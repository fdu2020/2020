-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_fast_corner is
port (
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    threhold : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of hls_fast_corner is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_fast_corner,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flvd1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.661000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=43,HLS_SYN_DSP=3,HLS_SYN_FF=8039,HLS_SYN_LUT=15587,HLS_VERSION=2018_3}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_INPUT_STREAM_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal Duplicate_U0_ap_start : STD_LOGIC;
    signal Duplicate_U0_start_full_n : STD_LOGIC;
    signal Duplicate_U0_ap_done : STD_LOGIC;
    signal Duplicate_U0_ap_continue : STD_LOGIC;
    signal Duplicate_U0_ap_idle : STD_LOGIC;
    signal Duplicate_U0_ap_ready : STD_LOGIC;
    signal Duplicate_U0_start_out : STD_LOGIC;
    signal Duplicate_U0_start_write : STD_LOGIC;
    signal Duplicate_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Duplicate_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Duplicate_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Duplicate_U0_dst1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst1_data_stream_0_V_write : STD_LOGIC;
    signal Duplicate_U0_dst1_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst1_data_stream_1_V_write : STD_LOGIC;
    signal Duplicate_U0_dst1_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst1_data_stream_2_V_write : STD_LOGIC;
    signal Duplicate_U0_dst2_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst2_data_stream_0_V_write : STD_LOGIC;
    signal Duplicate_U0_dst2_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst2_data_stream_1_V_write : STD_LOGIC;
    signal Duplicate_U0_dst2_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst2_data_stream_2_V_write : STD_LOGIC;
    signal CvtColor_U0_ap_start : STD_LOGIC;
    signal CvtColor_U0_ap_done : STD_LOGIC;
    signal CvtColor_U0_ap_continue : STD_LOGIC;
    signal CvtColor_U0_ap_idle : STD_LOGIC;
    signal CvtColor_U0_ap_ready : STD_LOGIC;
    signal CvtColor_U0_start_out : STD_LOGIC;
    signal CvtColor_U0_start_write : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal CvtColor_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal FAST_t_opr_U0_ap_start : STD_LOGIC;
    signal FAST_t_opr_U0_ap_done : STD_LOGIC;
    signal FAST_t_opr_U0_ap_continue : STD_LOGIC;
    signal FAST_t_opr_U0_ap_idle : STD_LOGIC;
    signal FAST_t_opr_U0_ap_ready : STD_LOGIC;
    signal FAST_t_opr_U0_start_out : STD_LOGIC;
    signal FAST_t_opr_U0_start_write : STD_LOGIC;
    signal FAST_t_opr_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal FAST_t_opr_U0_p_mask_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal FAST_t_opr_U0_p_mask_data_stream_V_write : STD_LOGIC;
    signal Dilate_U0_ap_start : STD_LOGIC;
    signal Dilate_U0_ap_done : STD_LOGIC;
    signal Dilate_U0_ap_continue : STD_LOGIC;
    signal Dilate_U0_ap_idle : STD_LOGIC;
    signal Dilate_U0_ap_ready : STD_LOGIC;
    signal Dilate_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Dilate_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal PaintMask_U0_ap_start : STD_LOGIC;
    signal PaintMask_U0_ap_done : STD_LOGIC;
    signal PaintMask_U0_ap_continue : STD_LOGIC;
    signal PaintMask_U0_ap_idle : STD_LOGIC;
    signal PaintMask_U0_ap_ready : STD_LOGIC;
    signal PaintMask_U0_start_out : STD_LOGIC;
    signal PaintMask_U0_start_write : STD_LOGIC;
    signal PaintMask_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal PaintMask_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal PaintMask_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal PaintMask_U0_p_mask_data_stream_V_read : STD_LOGIC;
    signal PaintMask_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal PaintMask_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal PaintMask_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal PaintMask_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal PaintMask_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal PaintMask_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal p_src_data_stream_0_s_full_n : STD_LOGIC;
    signal p_src_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_data_stream_0_s_empty_n : STD_LOGIC;
    signal p_src_data_stream_1_s_full_n : STD_LOGIC;
    signal p_src_data_stream_1_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_data_stream_1_s_empty_n : STD_LOGIC;
    signal p_src_data_stream_2_s_full_n : STD_LOGIC;
    signal p_src_data_stream_2_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_data_stream_2_s_empty_n : STD_LOGIC;
    signal src0_data_stream_0_s_full_n : STD_LOGIC;
    signal src0_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src0_data_stream_0_s_empty_n : STD_LOGIC;
    signal src0_data_stream_1_s_full_n : STD_LOGIC;
    signal src0_data_stream_1_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src0_data_stream_1_s_empty_n : STD_LOGIC;
    signal src0_data_stream_2_s_full_n : STD_LOGIC;
    signal src0_data_stream_2_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src0_data_stream_2_s_empty_n : STD_LOGIC;
    signal src1_data_stream_0_s_full_n : STD_LOGIC;
    signal src1_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src1_data_stream_0_s_empty_n : STD_LOGIC;
    signal src1_data_stream_1_s_full_n : STD_LOGIC;
    signal src1_data_stream_1_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src1_data_stream_1_s_empty_n : STD_LOGIC;
    signal src1_data_stream_2_s_full_n : STD_LOGIC;
    signal src1_data_stream_2_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src1_data_stream_2_s_empty_n : STD_LOGIC;
    signal gray_data_stream_0_s_full_n : STD_LOGIC;
    signal gray_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal gray_data_stream_0_s_empty_n : STD_LOGIC;
    signal mask_data_stream_0_s_full_n : STD_LOGIC;
    signal mask_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_data_stream_0_s_empty_n : STD_LOGIC;
    signal dmask_data_stream_0_full_n : STD_LOGIC;
    signal dmask_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dmask_data_stream_0_empty_n : STD_LOGIC;
    signal p_dst_data_stream_0_s_full_n : STD_LOGIC;
    signal p_dst_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_data_stream_0_s_empty_n : STD_LOGIC;
    signal p_dst_data_stream_1_s_full_n : STD_LOGIC;
    signal p_dst_data_stream_1_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_data_stream_1_s_empty_n : STD_LOGIC;
    signal p_dst_data_stream_2_s_full_n : STD_LOGIC;
    signal p_dst_data_stream_2_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_data_stream_2_s_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_Duplicate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_empty_n : STD_LOGIC;
    signal start_for_CvtColor_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_full_n : STD_LOGIC;
    signal start_for_CvtColor_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_empty_n : STD_LOGIC;
    signal start_for_PaintMask_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PaintMask_U0_full_n : STD_LOGIC;
    signal start_for_PaintMask_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PaintMask_U0_empty_n : STD_LOGIC;
    signal start_for_FAST_t_opr_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FAST_t_opr_U0_full_n : STD_LOGIC;
    signal start_for_FAST_t_opr_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FAST_t_opr_U0_empty_n : STD_LOGIC;
    signal start_for_Dilate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate_U0_full_n : STD_LOGIC;
    signal start_for_Dilate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate_U0_empty_n : STD_LOGIC;
    signal Dilate_U0_start_full_n : STD_LOGIC;
    signal Dilate_U0_start_write : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Duplicate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst1_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_0_V_full_n : IN STD_LOGIC;
        dst1_data_stream_0_V_write : OUT STD_LOGIC;
        dst1_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_1_V_full_n : IN STD_LOGIC;
        dst1_data_stream_1_V_write : OUT STD_LOGIC;
        dst1_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_2_V_full_n : IN STD_LOGIC;
        dst1_data_stream_2_V_write : OUT STD_LOGIC;
        dst2_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_0_V_full_n : IN STD_LOGIC;
        dst2_data_stream_0_V_write : OUT STD_LOGIC;
        dst2_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_1_V_full_n : IN STD_LOGIC;
        dst2_data_stream_1_V_write : OUT STD_LOGIC;
        dst2_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_2_V_full_n : IN STD_LOGIC;
        dst2_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component CvtColor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component FAST_t_opr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_mask_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_mask_data_stream_V_full_n : IN STD_LOGIC;
        p_mask_data_stream_V_write : OUT STD_LOGIC;
        threhold : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dilate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component PaintMask IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_mask_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_mask_data_stream_V_empty_n : IN STD_LOGIC;
        p_mask_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d20000_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_DuplicaqcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_CvtColorcU IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_PaintMasc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_FAST_t_tde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Dilate_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIudo IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_Duplicate_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        INPUT_STREAM_TDATA => INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => AXIvideo2Mat_U0_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => INPUT_STREAM_TDEST,
        img_rows_V => rows,
        img_cols_V => cols,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => p_src_data_stream_0_s_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => p_src_data_stream_1_s_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => p_src_data_stream_2_s_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write);

    Duplicate_U0 : component Duplicate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Duplicate_U0_ap_start,
        start_full_n => Duplicate_U0_start_full_n,
        ap_done => Duplicate_U0_ap_done,
        ap_continue => Duplicate_U0_ap_continue,
        ap_idle => Duplicate_U0_ap_idle,
        ap_ready => Duplicate_U0_ap_ready,
        start_out => Duplicate_U0_start_out,
        start_write => Duplicate_U0_start_write,
        src_rows_V => rows,
        src_cols_V => cols,
        src_data_stream_0_V_dout => p_src_data_stream_0_s_dout,
        src_data_stream_0_V_empty_n => p_src_data_stream_0_s_empty_n,
        src_data_stream_0_V_read => Duplicate_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => p_src_data_stream_1_s_dout,
        src_data_stream_1_V_empty_n => p_src_data_stream_1_s_empty_n,
        src_data_stream_1_V_read => Duplicate_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => p_src_data_stream_2_s_dout,
        src_data_stream_2_V_empty_n => p_src_data_stream_2_s_empty_n,
        src_data_stream_2_V_read => Duplicate_U0_src_data_stream_2_V_read,
        dst1_data_stream_0_V_din => Duplicate_U0_dst1_data_stream_0_V_din,
        dst1_data_stream_0_V_full_n => src0_data_stream_0_s_full_n,
        dst1_data_stream_0_V_write => Duplicate_U0_dst1_data_stream_0_V_write,
        dst1_data_stream_1_V_din => Duplicate_U0_dst1_data_stream_1_V_din,
        dst1_data_stream_1_V_full_n => src0_data_stream_1_s_full_n,
        dst1_data_stream_1_V_write => Duplicate_U0_dst1_data_stream_1_V_write,
        dst1_data_stream_2_V_din => Duplicate_U0_dst1_data_stream_2_V_din,
        dst1_data_stream_2_V_full_n => src0_data_stream_2_s_full_n,
        dst1_data_stream_2_V_write => Duplicate_U0_dst1_data_stream_2_V_write,
        dst2_data_stream_0_V_din => Duplicate_U0_dst2_data_stream_0_V_din,
        dst2_data_stream_0_V_full_n => src1_data_stream_0_s_full_n,
        dst2_data_stream_0_V_write => Duplicate_U0_dst2_data_stream_0_V_write,
        dst2_data_stream_1_V_din => Duplicate_U0_dst2_data_stream_1_V_din,
        dst2_data_stream_1_V_full_n => src1_data_stream_1_s_full_n,
        dst2_data_stream_1_V_write => Duplicate_U0_dst2_data_stream_1_V_write,
        dst2_data_stream_2_V_din => Duplicate_U0_dst2_data_stream_2_V_din,
        dst2_data_stream_2_V_full_n => src1_data_stream_2_s_full_n,
        dst2_data_stream_2_V_write => Duplicate_U0_dst2_data_stream_2_V_write);

    CvtColor_U0 : component CvtColor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => CvtColor_U0_ap_start,
        start_full_n => start_for_FAST_t_opr_U0_full_n,
        ap_done => CvtColor_U0_ap_done,
        ap_continue => CvtColor_U0_ap_continue,
        ap_idle => CvtColor_U0_ap_idle,
        ap_ready => CvtColor_U0_ap_ready,
        start_out => CvtColor_U0_start_out,
        start_write => CvtColor_U0_start_write,
        p_src_rows_V => rows,
        p_src_cols_V => cols,
        p_src_data_stream_0_V_dout => src0_data_stream_0_s_dout,
        p_src_data_stream_0_V_empty_n => src0_data_stream_0_s_empty_n,
        p_src_data_stream_0_V_read => CvtColor_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => src0_data_stream_1_s_dout,
        p_src_data_stream_1_V_empty_n => src0_data_stream_1_s_empty_n,
        p_src_data_stream_1_V_read => CvtColor_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => src0_data_stream_2_s_dout,
        p_src_data_stream_2_V_empty_n => src0_data_stream_2_s_empty_n,
        p_src_data_stream_2_V_read => CvtColor_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_V_din => CvtColor_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => gray_data_stream_0_s_full_n,
        p_dst_data_stream_V_write => CvtColor_U0_p_dst_data_stream_V_write);

    FAST_t_opr_U0 : component FAST_t_opr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => FAST_t_opr_U0_ap_start,
        start_full_n => start_for_Dilate_U0_full_n,
        ap_done => FAST_t_opr_U0_ap_done,
        ap_continue => FAST_t_opr_U0_ap_continue,
        ap_idle => FAST_t_opr_U0_ap_idle,
        ap_ready => FAST_t_opr_U0_ap_ready,
        start_out => FAST_t_opr_U0_start_out,
        start_write => FAST_t_opr_U0_start_write,
        p_src_rows_V => rows,
        p_src_cols_V => cols,
        p_src_data_stream_V_dout => gray_data_stream_0_s_dout,
        p_src_data_stream_V_empty_n => gray_data_stream_0_s_empty_n,
        p_src_data_stream_V_read => FAST_t_opr_U0_p_src_data_stream_V_read,
        p_mask_data_stream_V_din => FAST_t_opr_U0_p_mask_data_stream_V_din,
        p_mask_data_stream_V_full_n => mask_data_stream_0_s_full_n,
        p_mask_data_stream_V_write => FAST_t_opr_U0_p_mask_data_stream_V_write,
        threhold => threhold);

    Dilate_U0 : component Dilate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Dilate_U0_ap_start,
        ap_done => Dilate_U0_ap_done,
        ap_continue => Dilate_U0_ap_continue,
        ap_idle => Dilate_U0_ap_idle,
        ap_ready => Dilate_U0_ap_ready,
        p_src_rows_V => rows,
        p_src_cols_V => cols,
        p_src_data_stream_V_dout => mask_data_stream_0_s_dout,
        p_src_data_stream_V_empty_n => mask_data_stream_0_s_empty_n,
        p_src_data_stream_V_read => Dilate_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Dilate_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => dmask_data_stream_0_full_n,
        p_dst_data_stream_V_write => Dilate_U0_p_dst_data_stream_V_write);

    PaintMask_U0 : component PaintMask
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => PaintMask_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => PaintMask_U0_ap_done,
        ap_continue => PaintMask_U0_ap_continue,
        ap_idle => PaintMask_U0_ap_idle,
        ap_ready => PaintMask_U0_ap_ready,
        start_out => PaintMask_U0_start_out,
        start_write => PaintMask_U0_start_write,
        p_src_rows_V => rows,
        p_src_cols_V => cols,
        p_src_data_stream_0_V_dout => src1_data_stream_0_s_dout,
        p_src_data_stream_0_V_empty_n => src1_data_stream_0_s_empty_n,
        p_src_data_stream_0_V_read => PaintMask_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => src1_data_stream_1_s_dout,
        p_src_data_stream_1_V_empty_n => src1_data_stream_1_s_empty_n,
        p_src_data_stream_1_V_read => PaintMask_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => src1_data_stream_2_s_dout,
        p_src_data_stream_2_V_empty_n => src1_data_stream_2_s_empty_n,
        p_src_data_stream_2_V_read => PaintMask_U0_p_src_data_stream_2_V_read,
        p_mask_data_stream_V_dout => dmask_data_stream_0_dout,
        p_mask_data_stream_V_empty_n => dmask_data_stream_0_empty_n,
        p_mask_data_stream_V_read => PaintMask_U0_p_mask_data_stream_V_read,
        p_dst_data_stream_0_V_din => PaintMask_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => p_dst_data_stream_0_s_full_n,
        p_dst_data_stream_0_V_write => PaintMask_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => PaintMask_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => p_dst_data_stream_1_s_full_n,
        p_dst_data_stream_1_V_write => PaintMask_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => PaintMask_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => p_dst_data_stream_2_s_full_n,
        p_dst_data_stream_2_V_write => PaintMask_U0_p_dst_data_stream_2_V_write);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_rows_V => rows,
        img_cols_V => cols,
        img_data_stream_0_V_dout => p_dst_data_stream_0_s_dout,
        img_data_stream_0_V_empty_n => p_dst_data_stream_0_s_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => p_dst_data_stream_1_s_dout,
        img_data_stream_1_V_empty_n => p_dst_data_stream_1_s_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => p_dst_data_stream_2_s_dout,
        img_data_stream_2_V_empty_n => p_dst_data_stream_2_s_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        OUTPUT_STREAM_TDATA => Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => Mat2AXIvideo_U0_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST);

    p_src_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => p_src_data_stream_0_s_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => p_src_data_stream_0_s_dout,
        if_empty_n => p_src_data_stream_0_s_empty_n,
        if_read => Duplicate_U0_src_data_stream_0_V_read);

    p_src_data_stream_1_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => p_src_data_stream_1_s_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => p_src_data_stream_1_s_dout,
        if_empty_n => p_src_data_stream_1_s_empty_n,
        if_read => Duplicate_U0_src_data_stream_1_V_read);

    p_src_data_stream_2_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => p_src_data_stream_2_s_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => p_src_data_stream_2_s_dout,
        if_empty_n => p_src_data_stream_2_s_empty_n,
        if_read => Duplicate_U0_src_data_stream_2_V_read);

    src0_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst1_data_stream_0_V_din,
        if_full_n => src0_data_stream_0_s_full_n,
        if_write => Duplicate_U0_dst1_data_stream_0_V_write,
        if_dout => src0_data_stream_0_s_dout,
        if_empty_n => src0_data_stream_0_s_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_0_V_read);

    src0_data_stream_1_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst1_data_stream_1_V_din,
        if_full_n => src0_data_stream_1_s_full_n,
        if_write => Duplicate_U0_dst1_data_stream_1_V_write,
        if_dout => src0_data_stream_1_s_dout,
        if_empty_n => src0_data_stream_1_s_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_1_V_read);

    src0_data_stream_2_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst1_data_stream_2_V_din,
        if_full_n => src0_data_stream_2_s_full_n,
        if_write => Duplicate_U0_dst1_data_stream_2_V_write,
        if_dout => src0_data_stream_2_s_dout,
        if_empty_n => src0_data_stream_2_s_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_2_V_read);

    src1_data_stream_0_s_U : component fifo_w8_d20000_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst2_data_stream_0_V_din,
        if_full_n => src1_data_stream_0_s_full_n,
        if_write => Duplicate_U0_dst2_data_stream_0_V_write,
        if_dout => src1_data_stream_0_s_dout,
        if_empty_n => src1_data_stream_0_s_empty_n,
        if_read => PaintMask_U0_p_src_data_stream_0_V_read);

    src1_data_stream_1_s_U : component fifo_w8_d20000_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst2_data_stream_1_V_din,
        if_full_n => src1_data_stream_1_s_full_n,
        if_write => Duplicate_U0_dst2_data_stream_1_V_write,
        if_dout => src1_data_stream_1_s_dout,
        if_empty_n => src1_data_stream_1_s_empty_n,
        if_read => PaintMask_U0_p_src_data_stream_1_V_read);

    src1_data_stream_2_s_U : component fifo_w8_d20000_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst2_data_stream_2_V_din,
        if_full_n => src1_data_stream_2_s_full_n,
        if_write => Duplicate_U0_dst2_data_stream_2_V_write,
        if_dout => src1_data_stream_2_s_dout,
        if_empty_n => src1_data_stream_2_s_empty_n,
        if_read => PaintMask_U0_p_src_data_stream_2_V_read);

    gray_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_p_dst_data_stream_V_din,
        if_full_n => gray_data_stream_0_s_full_n,
        if_write => CvtColor_U0_p_dst_data_stream_V_write,
        if_dout => gray_data_stream_0_s_dout,
        if_empty_n => gray_data_stream_0_s_empty_n,
        if_read => FAST_t_opr_U0_p_src_data_stream_V_read);

    mask_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FAST_t_opr_U0_p_mask_data_stream_V_din,
        if_full_n => mask_data_stream_0_s_full_n,
        if_write => FAST_t_opr_U0_p_mask_data_stream_V_write,
        if_dout => mask_data_stream_0_s_dout,
        if_empty_n => mask_data_stream_0_s_empty_n,
        if_read => Dilate_U0_p_src_data_stream_V_read);

    dmask_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate_U0_p_dst_data_stream_V_din,
        if_full_n => dmask_data_stream_0_full_n,
        if_write => Dilate_U0_p_dst_data_stream_V_write,
        if_dout => dmask_data_stream_0_dout,
        if_empty_n => dmask_data_stream_0_empty_n,
        if_read => PaintMask_U0_p_mask_data_stream_V_read);

    p_dst_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PaintMask_U0_p_dst_data_stream_0_V_din,
        if_full_n => p_dst_data_stream_0_s_full_n,
        if_write => PaintMask_U0_p_dst_data_stream_0_V_write,
        if_dout => p_dst_data_stream_0_s_dout,
        if_empty_n => p_dst_data_stream_0_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    p_dst_data_stream_1_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PaintMask_U0_p_dst_data_stream_1_V_din,
        if_full_n => p_dst_data_stream_1_s_full_n,
        if_write => PaintMask_U0_p_dst_data_stream_1_V_write,
        if_dout => p_dst_data_stream_1_s_dout,
        if_empty_n => p_dst_data_stream_1_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    p_dst_data_stream_2_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PaintMask_U0_p_dst_data_stream_2_V_din,
        if_full_n => p_dst_data_stream_2_s_full_n,
        if_write => PaintMask_U0_p_dst_data_stream_2_V_write,
        if_dout => p_dst_data_stream_2_s_dout,
        if_empty_n => p_dst_data_stream_2_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_DuplicaqcK_U : component start_for_DuplicaqcK
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate_U0_din,
        if_full_n => start_for_Duplicate_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_Duplicate_U0_dout,
        if_empty_n => start_for_Duplicate_U0_empty_n,
        if_read => Duplicate_U0_ap_ready);

    start_for_CvtColorcU_U : component start_for_CvtColorcU
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_CvtColor_U0_din,
        if_full_n => start_for_CvtColor_U0_full_n,
        if_write => Duplicate_U0_start_write,
        if_dout => start_for_CvtColor_U0_dout,
        if_empty_n => start_for_CvtColor_U0_empty_n,
        if_read => CvtColor_U0_ap_ready);

    start_for_PaintMasc4_U : component start_for_PaintMasc4
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_PaintMask_U0_din,
        if_full_n => start_for_PaintMask_U0_full_n,
        if_write => Duplicate_U0_start_write,
        if_dout => start_for_PaintMask_U0_dout,
        if_empty_n => start_for_PaintMask_U0_empty_n,
        if_read => PaintMask_U0_ap_ready);

    start_for_FAST_t_tde_U : component start_for_FAST_t_tde
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FAST_t_opr_U0_din,
        if_full_n => start_for_FAST_t_opr_U0_full_n,
        if_write => CvtColor_U0_start_write,
        if_dout => start_for_FAST_t_opr_U0_dout,
        if_empty_n => start_for_FAST_t_opr_U0_empty_n,
        if_read => FAST_t_opr_U0_ap_ready);

    start_for_Dilate_U0_U : component start_for_Dilate_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Dilate_U0_din,
        if_full_n => start_for_Dilate_U0_full_n,
        if_write => FAST_t_opr_U0_start_write,
        if_dout => start_for_Dilate_U0_dout,
        if_empty_n => start_for_Dilate_U0_empty_n,
        if_read => Dilate_U0_ap_ready);

    start_for_Mat2AXIudo_U : component start_for_Mat2AXIudo
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => PaintMask_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);




    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ap_start;
    CvtColor_U0_ap_continue <= ap_const_logic_1;
    CvtColor_U0_ap_start <= start_for_CvtColor_U0_empty_n;
    Dilate_U0_ap_continue <= ap_const_logic_1;
    Dilate_U0_ap_start <= start_for_Dilate_U0_empty_n;
    Dilate_U0_start_full_n <= ap_const_logic_1;
    Dilate_U0_start_write <= ap_const_logic_0;
    Duplicate_U0_ap_continue <= ap_const_logic_1;
    Duplicate_U0_ap_start <= start_for_Duplicate_U0_empty_n;
    Duplicate_U0_start_full_n <= (start_for_PaintMask_U0_full_n and start_for_CvtColor_U0_full_n);
    FAST_t_opr_U0_ap_continue <= ap_const_logic_1;
    FAST_t_opr_U0_ap_start <= start_for_FAST_t_opr_U0_empty_n;
    INPUT_STREAM_TREADY <= AXIvideo2Mat_U0_INPUT_STREAM_TREADY;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    OUTPUT_STREAM_TDATA <= Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA;
    OUTPUT_STREAM_TDEST <= Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST;
    OUTPUT_STREAM_TID <= Mat2AXIvideo_U0_OUTPUT_STREAM_TID;
    OUTPUT_STREAM_TKEEP <= Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP;
    OUTPUT_STREAM_TLAST <= Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST;
    OUTPUT_STREAM_TSTRB <= Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB;
    OUTPUT_STREAM_TUSER <= Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER;
    OUTPUT_STREAM_TVALID <= Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID;
    PaintMask_U0_ap_continue <= ap_const_logic_1;
    PaintMask_U0_ap_start <= start_for_PaintMask_U0_empty_n;
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (PaintMask_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and FAST_t_opr_U0_ap_idle and Duplicate_U0_ap_idle and Dilate_U0_ap_idle and CvtColor_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= AXIvideo2Mat_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_ready <= AXIvideo2Mat_U0_ap_ready;
    start_for_CvtColor_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Dilate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Duplicate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_FAST_t_opr_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_PaintMask_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
