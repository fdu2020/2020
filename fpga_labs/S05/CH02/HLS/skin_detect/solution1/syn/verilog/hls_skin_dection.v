// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_skin_dection (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read,
        src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read,
        src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_dout,
        cols_empty_n,
        cols_read,
        y_lower_dout,
        y_lower_empty_n,
        y_lower_read,
        y_upper_dout,
        y_upper_empty_n,
        y_upper_read,
        cb_lower_dout,
        cb_lower_empty_n,
        cb_lower_read,
        cb_upper_dout,
        cb_upper_empty_n,
        cb_upper_read,
        cr_lower_dout,
        cr_lower_empty_n,
        cr_lower_read,
        cr_upper_dout,
        cr_upper_empty_n,
        cr_upper_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] src_data_stream_0_V_dout;
input   src_data_stream_0_V_empty_n;
output   src_data_stream_0_V_read;
input  [7:0] src_data_stream_1_V_dout;
input   src_data_stream_1_V_empty_n;
output   src_data_stream_1_V_read;
input  [7:0] src_data_stream_2_V_dout;
input   src_data_stream_2_V_empty_n;
output   src_data_stream_2_V_read;
output  [7:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [7:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [7:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_dout;
input   cols_empty_n;
output   cols_read;
input  [31:0] y_lower_dout;
input   y_lower_empty_n;
output   y_lower_read;
input  [31:0] y_upper_dout;
input   y_upper_empty_n;
output   y_upper_read;
input  [31:0] cb_lower_dout;
input   cb_lower_empty_n;
output   cb_lower_read;
input  [31:0] cb_upper_dout;
input   cb_upper_empty_n;
output   cb_upper_read;
input  [31:0] cr_lower_dout;
input   cr_lower_empty_n;
output   cr_lower_read;
input  [31:0] cr_upper_dout;
input   cr_upper_empty_n;
output   cr_upper_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_0_V_read;
reg src_data_stream_1_V_read;
reg src_data_stream_2_V_read;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;
reg rows_read;
reg cols_read;
reg y_lower_read;
reg y_upper_read;
reg cb_lower_read;
reg cb_upper_read;
reg cr_lower_read;
reg cr_upper_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_1_i_fu_376_p2;
reg    src_data_stream_1_V_blk_n;
reg    src_data_stream_2_V_blk_n;
reg    dst_data_stream_0_V_blk_n;
wire    ap_CS_fsm_state6;
reg    dst_data_stream_1_V_blk_n;
reg    dst_data_stream_2_V_blk_n;
reg    rows_blk_n;
reg    cols_blk_n;
reg    y_lower_blk_n;
reg    y_upper_blk_n;
reg    cb_lower_blk_n;
reg    cb_upper_blk_n;
reg    cr_lower_blk_n;
reg    cr_upper_blk_n;
reg   [31:0] rows_read_reg_607;
reg    ap_block_state1;
reg   [31:0] cols_read_reg_612;
reg   [31:0] y_lower_read_reg_617;
reg   [31:0] y_upper_read_reg_622;
reg   [31:0] cb_lower_read_reg_627;
reg   [31:0] cb_upper_read_reg_632;
reg   [31:0] cr_lower_read_reg_637;
reg   [31:0] cr_upper_read_reg_642;
wire   [30:0] row_fu_366_p2;
reg   [30:0] row_reg_650;
wire    ap_CS_fsm_state2;
wire   [30:0] col_fu_381_p2;
reg   [30:0] col_reg_658;
reg    ap_block_state3;
reg   [7:0] tmp_3_reg_663;
reg   [7:0] tmp_4_reg_670;
reg   [7:0] tmp_5_reg_676;
wire   [15:0] tmp_6_cast_i_fu_396_p1;
reg   [15:0] tmp_6_cast_i_reg_683;
wire    ap_CS_fsm_state4;
wire   [14:0] grp_fu_557_p3;
reg   [14:0] tmp3_reg_688;
reg   [7:0] tmp_17_i_reg_693;
reg   [7:0] tmp_24_i_reg_698;
wire   [0:0] sel_tmp1_fu_530_p2;
reg   [0:0] sel_tmp1_reg_703;
wire    ap_CS_fsm_state5;
reg   [30:0] row_i_reg_335;
reg   [30:0] col_i_reg_346;
wire   [0:0] tmp_i_fu_361_p2;
reg    ap_block_state6;
wire   [31:0] row_cast_i_fu_357_p1;
wire   [31:0] col_cast_i_fu_372_p1;
wire   [7:0] tmp_5_i_fu_390_p0;
wire   [14:0] tmp_4_cast65_i_fu_387_p1;
wire   [14:0] tmp_11_i_fu_402_p3;
wire  signed [15:0] grp_fu_573_p3;
wire   [14:0] tmp_18_i_fu_422_p3;
wire  signed [15:0] grp_fu_582_p3;
wire   [15:0] grp_fu_599_p3;
wire   [7:0] y_fu_445_p4;
wire   [31:0] tmp_25_i_fu_464_p1;
wire   [7:0] cb_fu_454_p2;
wire   [31:0] tmp_30_i_fu_478_p1;
wire   [7:0] cr_fu_459_p2;
wire   [31:0] tmp_33_i_fu_492_p1;
wire   [0:0] tmp_31_i_fu_482_p2;
wire   [0:0] tmp_27_i_fu_473_p2;
wire   [0:0] tmp9_fu_506_p2;
wire   [0:0] tmp_32_i_fu_487_p2;
wire   [0:0] tmp_35_i_fu_501_p2;
wire   [0:0] tmp_34_i_fu_496_p2;
wire   [0:0] tmp1_fu_518_p2;
wire   [0:0] tmp_26_i_fu_468_p2;
wire   [0:0] tmp2_fu_524_p2;
wire   [0:0] tmp8_fu_512_p2;
wire   [7:0] grp_fu_557_p0;
wire   [13:0] tmp_8_cast64_i_fu_399_p1;
wire   [5:0] grp_fu_557_p1;
wire   [14:0] grp_fu_557_p2;
wire   [7:0] grp_fu_565_p0;
wire  signed [6:0] grp_fu_565_p1;
wire   [14:0] grp_fu_565_p2;
wire   [7:0] grp_fu_573_p0;
wire  signed [7:0] grp_fu_573_p1;
wire  signed [15:0] grp_fu_565_p3;
wire   [7:0] grp_fu_582_p0;
wire  signed [7:0] grp_fu_582_p1;
wire  signed [15:0] grp_fu_590_p3;
wire   [7:0] grp_fu_590_p0;
wire  signed [5:0] grp_fu_590_p1;
wire   [14:0] grp_fu_590_p2;
wire   [7:0] grp_fu_599_p0;
wire   [8:0] grp_fu_599_p1;
wire   [14:0] grp_fu_599_p2;
reg   [5:0] ap_NS_fsm;
wire   [15:0] grp_fu_565_p20;
wire   [15:0] grp_fu_590_p20;
wire   [15:0] grp_fu_599_p20;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
end

ImgProcess_Top_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
ImgProcess_Top_mabkb_U31(
    .din0(grp_fu_557_p0),
    .din1(grp_fu_557_p1),
    .din2(grp_fu_557_p2),
    .dout(grp_fu_557_p3)
);

ImgProcess_Top_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
ImgProcess_Top_macud_U32(
    .din0(grp_fu_565_p0),
    .din1(grp_fu_565_p1),
    .din2(grp_fu_565_p2),
    .dout(grp_fu_565_p3)
);

ImgProcess_Top_madEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
ImgProcess_Top_madEe_U33(
    .din0(grp_fu_573_p0),
    .din1(grp_fu_573_p1),
    .din2(grp_fu_565_p3),
    .dout(grp_fu_573_p3)
);

ImgProcess_Top_madEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
ImgProcess_Top_madEe_U34(
    .din0(grp_fu_582_p0),
    .din1(grp_fu_582_p1),
    .din2(grp_fu_590_p3),
    .dout(grp_fu_582_p3)
);

ImgProcess_Top_maeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
ImgProcess_Top_maeOg_U35(
    .din0(grp_fu_590_p0),
    .din1(grp_fu_590_p1),
    .din2(grp_fu_590_p2),
    .dout(grp_fu_590_p3)
);

ImgProcess_Top_mafYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
ImgProcess_Top_mafYi_U36(
    .din0(grp_fu_599_p0),
    .din1(grp_fu_599_p1),
    .din2(grp_fu_599_p2),
    .dout(grp_fu_599_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_i_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        col_i_reg_346 <= col_reg_658;
    end else if (((tmp_i_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        col_i_reg_346 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_376_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        row_i_reg_335 <= row_reg_650;
    end else if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_i_reg_335 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cb_lower_read_reg_627 <= cb_lower_dout;
        cb_upper_read_reg_632 <= cb_upper_dout;
        cols_read_reg_612 <= cols_dout;
        cr_lower_read_reg_637 <= cr_lower_dout;
        cr_upper_read_reg_642 <= cr_upper_dout;
        rows_read_reg_607 <= rows_dout;
        y_lower_read_reg_617 <= y_lower_dout;
        y_upper_read_reg_622 <= y_upper_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        col_reg_658 <= col_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_reg_650 <= row_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sel_tmp1_reg_703 <= sel_tmp1_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp3_reg_688 <= grp_fu_557_p3;
        tmp_17_i_reg_693 <= {{grp_fu_573_p3[15:8]}};
        tmp_24_i_reg_698 <= {{grp_fu_582_p3[15:8]}};
        tmp_6_cast_i_reg_683[7 : 0] <= tmp_6_cast_i_fu_396_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~(((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_3_reg_663 <= src_data_stream_0_V_dout;
        tmp_4_reg_670 <= src_data_stream_1_V_dout;
        tmp_5_reg_676 <= src_data_stream_2_V_dout;
    end
end

always @ (*) begin
    if (((tmp_i_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cb_lower_blk_n = cb_lower_empty_n;
    end else begin
        cb_lower_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cb_lower_read = 1'b1;
    end else begin
        cb_lower_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cb_upper_blk_n = cb_upper_empty_n;
    end else begin
        cb_upper_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cb_upper_read = 1'b1;
    end else begin
        cb_upper_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_blk_n = cols_empty_n;
    end else begin
        cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_read = 1'b1;
    end else begin
        cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cr_lower_blk_n = cr_lower_empty_n;
    end else begin
        cr_lower_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cr_lower_read = 1'b1;
    end else begin
        cr_lower_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cr_upper_blk_n = cr_upper_empty_n;
    end else begin
        cr_upper_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cr_upper_read = 1'b1;
    end else begin
        cr_upper_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n;
    end else begin
        dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        dst_data_stream_0_V_write = 1'b1;
    end else begin
        dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n;
    end else begin
        dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        dst_data_stream_1_V_write = 1'b1;
    end else begin
        dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n;
    end else begin
        dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        dst_data_stream_2_V_write = 1'b1;
    end else begin
        dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_i_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_0_V_blk_n = src_data_stream_0_V_empty_n;
    end else begin
        src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_0_V_read = 1'b1;
    end else begin
        src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_i_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_1_V_blk_n = src_data_stream_1_V_empty_n;
    end else begin
        src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_1_V_read = 1'b1;
    end else begin
        src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_i_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_2_V_blk_n = src_data_stream_2_V_empty_n;
    end else begin
        src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_2_V_read = 1'b1;
    end else begin
        src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_lower_blk_n = y_lower_empty_n;
    end else begin
        y_lower_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_lower_read = 1'b1;
    end else begin
        y_lower_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_upper_blk_n = y_upper_empty_n;
    end else begin
        y_upper_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_upper_read = 1'b1;
    end else begin
        y_upper_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_i_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_376_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (y_lower_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = (((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_376_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state6 = ((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0));
end

assign cb_fu_454_p2 = (tmp_17_i_reg_693 ^ 8'd128);

assign col_cast_i_fu_372_p1 = col_i_reg_346;

assign col_fu_381_p2 = (col_i_reg_346 + 31'd1);

assign cr_fu_459_p2 = (tmp_24_i_reg_698 ^ 8'd128);

assign dst_data_stream_0_V_din = ((sel_tmp1_reg_703[0:0] === 1'b1) ? 8'd255 : tmp_3_reg_663);

assign dst_data_stream_1_V_din = ((sel_tmp1_reg_703[0:0] === 1'b1) ? 8'd255 : tmp_4_reg_670);

assign dst_data_stream_2_V_din = ((sel_tmp1_reg_703[0:0] === 1'b1) ? 8'd255 : tmp_5_reg_676);

assign grp_fu_557_p0 = tmp_8_cast64_i_fu_399_p1;

assign grp_fu_557_p1 = 14'd29;

assign grp_fu_557_p2 = (tmp_5_i_fu_390_p0 * $signed('h4C));

assign grp_fu_565_p0 = tmp_4_cast65_i_fu_387_p1;

assign grp_fu_565_p1 = 15'd32725;

assign grp_fu_565_p2 = grp_fu_565_p20;

assign grp_fu_565_p20 = tmp_11_i_fu_402_p3;

assign grp_fu_573_p0 = tmp_6_cast_i_fu_396_p1;

assign grp_fu_573_p1 = 16'd65451;

assign grp_fu_582_p0 = tmp_6_cast_i_fu_396_p1;

assign grp_fu_582_p1 = 16'd65429;

assign grp_fu_590_p0 = tmp_8_cast64_i_fu_399_p1;

assign grp_fu_590_p1 = 14'd16363;

assign grp_fu_590_p2 = grp_fu_590_p20;

assign grp_fu_590_p20 = tmp_18_i_fu_422_p3;

assign grp_fu_599_p0 = tmp_6_cast_i_reg_683;

assign grp_fu_599_p1 = 16'd150;

assign grp_fu_599_p2 = grp_fu_599_p20;

assign grp_fu_599_p20 = tmp3_reg_688;

assign row_cast_i_fu_357_p1 = row_i_reg_335;

assign row_fu_366_p2 = (row_i_reg_335 + 31'd1);

assign sel_tmp1_fu_530_p2 = (tmp8_fu_512_p2 & tmp2_fu_524_p2);

assign tmp1_fu_518_p2 = (tmp_35_i_fu_501_p2 & tmp_34_i_fu_496_p2);

assign tmp2_fu_524_p2 = (tmp_26_i_fu_468_p2 & tmp1_fu_518_p2);

assign tmp8_fu_512_p2 = (tmp_32_i_fu_487_p2 & tmp9_fu_506_p2);

assign tmp9_fu_506_p2 = (tmp_31_i_fu_482_p2 & tmp_27_i_fu_473_p2);

assign tmp_11_i_fu_402_p3 = {{tmp_3_reg_663}, {7'd0}};

assign tmp_18_i_fu_422_p3 = {{tmp_5_reg_676}, {7'd0}};

assign tmp_1_i_fu_376_p2 = (($signed(col_cast_i_fu_372_p1) < $signed(cols_read_reg_612)) ? 1'b1 : 1'b0);

assign tmp_25_i_fu_464_p1 = y_fu_445_p4;

assign tmp_26_i_fu_468_p2 = (($signed(tmp_25_i_fu_464_p1) > $signed(y_lower_read_reg_617)) ? 1'b1 : 1'b0);

assign tmp_27_i_fu_473_p2 = (($signed(tmp_25_i_fu_464_p1) < $signed(y_upper_read_reg_622)) ? 1'b1 : 1'b0);

assign tmp_30_i_fu_478_p1 = cb_fu_454_p2;

assign tmp_31_i_fu_482_p2 = (($signed(tmp_30_i_fu_478_p1) > $signed(cb_lower_read_reg_627)) ? 1'b1 : 1'b0);

assign tmp_32_i_fu_487_p2 = (($signed(tmp_30_i_fu_478_p1) < $signed(cb_upper_read_reg_632)) ? 1'b1 : 1'b0);

assign tmp_33_i_fu_492_p1 = cr_fu_459_p2;

assign tmp_34_i_fu_496_p2 = (($signed(tmp_33_i_fu_492_p1) > $signed(cr_lower_read_reg_637)) ? 1'b1 : 1'b0);

assign tmp_35_i_fu_501_p2 = (($signed(tmp_33_i_fu_492_p1) < $signed(cr_upper_read_reg_642)) ? 1'b1 : 1'b0);

assign tmp_4_cast65_i_fu_387_p1 = tmp_5_reg_676;

assign tmp_5_i_fu_390_p0 = tmp_4_cast65_i_fu_387_p1;

assign tmp_6_cast_i_fu_396_p1 = tmp_4_reg_670;

assign tmp_8_cast64_i_fu_399_p1 = tmp_3_reg_663;

assign tmp_i_fu_361_p2 = (($signed(row_cast_i_fu_357_p1) < $signed(rows_read_reg_607)) ? 1'b1 : 1'b0);

assign y_fu_445_p4 = {{grp_fu_599_p3[15:8]}};

always @ (posedge ap_clk) begin
    tmp_6_cast_i_reg_683[15:8] <= 8'b00000000;
end

endmodule //hls_skin_dection
