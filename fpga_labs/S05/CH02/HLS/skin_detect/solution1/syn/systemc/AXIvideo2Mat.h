// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AXIvideo2Mat_HH_
#define _AXIvideo2Mat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AXIvideo2Mat : public sc_module {
    // Port declarations 39
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > AXI_video_strm_V_data_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_data_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_data_V_read;
    sc_in< sc_lv<4> > AXI_video_strm_V_keep_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_keep_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_keep_V_read;
    sc_in< sc_lv<4> > AXI_video_strm_V_strb_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_strb_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_strb_V_read;
    sc_in< sc_lv<1> > AXI_video_strm_V_user_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_user_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_user_V_read;
    sc_in< sc_lv<1> > AXI_video_strm_V_last_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_last_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_last_V_read;
    sc_in< sc_lv<1> > AXI_video_strm_V_id_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_id_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_id_V_read;
    sc_in< sc_lv<1> > AXI_video_strm_V_dest_V_dout;
    sc_in< sc_logic > AXI_video_strm_V_dest_V_empty_n;
    sc_out< sc_logic > AXI_video_strm_V_dest_V_read;
    sc_in< sc_lv<32> > img_rows_V_read;
    sc_in< sc_lv<32> > img_cols_V_read;
    sc_out< sc_lv<8> > img_data_stream_0_V_din;
    sc_in< sc_logic > img_data_stream_0_V_full_n;
    sc_out< sc_logic > img_data_stream_0_V_write;
    sc_out< sc_lv<8> > img_data_stream_1_V_din;
    sc_in< sc_logic > img_data_stream_1_V_full_n;
    sc_out< sc_logic > img_data_stream_1_V_write;
    sc_out< sc_lv<8> > img_data_stream_2_V_din;
    sc_in< sc_logic > img_data_stream_2_V_full_n;
    sc_out< sc_logic > img_data_stream_2_V_write;


    // Module declarations
    AXIvideo2Mat(sc_module_name name);
    SC_HAS_PROCESS(AXIvideo2Mat);

    ~AXIvideo2Mat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > exitcond_reg_512;
    sc_signal< sc_lv<1> > brmerge_fu_438_p2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_2_phi_fu_387_p4;
    sc_signal< sc_logic > AXI_video_strm_V_keep_V_blk_n;
    sc_signal< sc_logic > AXI_video_strm_V_strb_V_blk_n;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_blk_n;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_blk_n;
    sc_signal< sc_logic > AXI_video_strm_V_id_V_blk_n;
    sc_signal< sc_logic > AXI_video_strm_V_dest_V_blk_n;
    sc_signal< sc_logic > img_data_stream_0_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< sc_lv<1> > exitcond_reg_512_pp1_iter1_reg;
    sc_signal< sc_logic > img_data_stream_1_V_blk_n;
    sc_signal< sc_logic > img_data_stream_2_V_blk_n;
    sc_signal< sc_lv<32> > t_V_2_reg_290;
    sc_signal< sc_lv<1> > eol_1_reg_301;
    sc_signal< sc_lv<32> > axi_data_V_1_reg_312;
    sc_signal< sc_lv<1> > eol_reg_323;
    sc_signal< sc_lv<1> > axi_last_V_2_reg_335;
    sc_signal< sc_lv<32> > p_Val2_s_reg_348;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > tmp_data_V_reg_483;
    sc_signal< sc_logic > AXI_video_strm_V_id_V0_status;
    sc_signal< sc_lv<1> > tmp_last_V_reg_491;
    sc_signal< sc_lv<1> > exitcond2_fu_413_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > i_V_fu_418_p2;
    sc_signal< sc_lv<32> > i_V_reg_507;
    sc_signal< sc_lv<1> > exitcond_fu_424_p2;
    sc_signal< bool > ap_block_state5_pp1_stage0_iter0;
    sc_signal< bool > ap_predicate_op59_read_state6;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter2;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<32> > j_V_fu_429_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<8> > tmp_8_fu_444_p1;
    sc_signal< sc_lv<8> > tmp_8_reg_525;
    sc_signal< sc_lv<8> > tmp_4_reg_530;
    sc_signal< sc_lv<8> > tmp_5_reg_535;
    sc_signal< bool > ap_block_state9;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter1_state6;
    sc_signal< sc_lv<1> > axi_last_V_3_reg_360;
    sc_signal< sc_lv<1> > axi_last_V1_reg_259;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > axi_data_V_3_reg_372;
    sc_signal< sc_lv<32> > axi_data_V1_reg_269;
    sc_signal< sc_lv<32> > t_V_reg_279;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_1_phi_fu_304_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_axi_data_V_1_phi_fu_315_p4;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_phi_fu_327_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp1_iter1_axi_last_V_2_reg_335;
    sc_signal< sc_lv<32> > ap_phi_mux_p_Val2_s_phi_fu_352_p4;
    sc_signal< sc_lv<32> > ap_phi_reg_pp1_iter1_p_Val2_s_reg_348;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > eol_2_reg_384;
    sc_signal< sc_logic > AXI_video_strm_V_id_V0_update;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<1> > sof_1_fu_204;
    sc_signal< sc_lv<1> > tmp_user_V_fu_404_p1;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< bool > ap_condition_287;
    sc_signal< bool > ap_condition_249;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_pp1_stage0;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<8> ap_ST_fsm_state9;
    static const sc_lv<8> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AXI_video_strm_V_data_V_blk_n();
    void thread_AXI_video_strm_V_data_V_read();
    void thread_AXI_video_strm_V_dest_V_blk_n();
    void thread_AXI_video_strm_V_dest_V_read();
    void thread_AXI_video_strm_V_id_V0_status();
    void thread_AXI_video_strm_V_id_V0_update();
    void thread_AXI_video_strm_V_id_V_blk_n();
    void thread_AXI_video_strm_V_id_V_read();
    void thread_AXI_video_strm_V_keep_V_blk_n();
    void thread_AXI_video_strm_V_keep_V_read();
    void thread_AXI_video_strm_V_last_V_blk_n();
    void thread_AXI_video_strm_V_last_V_read();
    void thread_AXI_video_strm_V_strb_V_blk_n();
    void thread_AXI_video_strm_V_strb_V_read();
    void thread_AXI_video_strm_V_user_V_blk_n();
    void thread_AXI_video_strm_V_user_V_read();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state5_pp1_stage0_iter0();
    void thread_ap_block_state6_pp1_stage0_iter1();
    void thread_ap_block_state7_pp1_stage0_iter2();
    void thread_ap_block_state9();
    void thread_ap_condition_249();
    void thread_ap_condition_287();
    void thread_ap_condition_pp1_exit_iter1_state6();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_axi_data_V_1_phi_fu_315_p4();
    void thread_ap_phi_mux_eol_1_phi_fu_304_p4();
    void thread_ap_phi_mux_eol_2_phi_fu_387_p4();
    void thread_ap_phi_mux_eol_phi_fu_327_p4();
    void thread_ap_phi_mux_p_Val2_s_phi_fu_352_p4();
    void thread_ap_phi_reg_pp1_iter1_axi_last_V_2_reg_335();
    void thread_ap_phi_reg_pp1_iter1_p_Val2_s_reg_348();
    void thread_ap_predicate_op59_read_state6();
    void thread_ap_ready();
    void thread_brmerge_fu_438_p2();
    void thread_exitcond2_fu_413_p2();
    void thread_exitcond_fu_424_p2();
    void thread_i_V_fu_418_p2();
    void thread_img_data_stream_0_V_blk_n();
    void thread_img_data_stream_0_V_din();
    void thread_img_data_stream_0_V_write();
    void thread_img_data_stream_1_V_blk_n();
    void thread_img_data_stream_1_V_din();
    void thread_img_data_stream_1_V_write();
    void thread_img_data_stream_2_V_blk_n();
    void thread_img_data_stream_2_V_din();
    void thread_img_data_stream_2_V_write();
    void thread_j_V_fu_429_p2();
    void thread_tmp_8_fu_444_p1();
    void thread_tmp_user_V_fu_404_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
