-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_skin_dection is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_empty_n : IN STD_LOGIC;
    cols_read : OUT STD_LOGIC;
    y_lower_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    y_lower_empty_n : IN STD_LOGIC;
    y_lower_read : OUT STD_LOGIC;
    y_upper_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    y_upper_empty_n : IN STD_LOGIC;
    y_upper_read : OUT STD_LOGIC;
    cb_lower_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cb_lower_empty_n : IN STD_LOGIC;
    cb_lower_read : OUT STD_LOGIC;
    cb_upper_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cb_upper_empty_n : IN STD_LOGIC;
    cb_upper_read : OUT STD_LOGIC;
    cr_lower_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cr_lower_empty_n : IN STD_LOGIC;
    cr_lower_read : OUT STD_LOGIC;
    cr_upper_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cr_upper_empty_n : IN STD_LOGIC;
    cr_upper_read : OUT STD_LOGIC );
end;


architecture behav of hls_skin_dection is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv15_4C : STD_LOGIC_VECTOR (14 downto 0) := "000000001001100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv14_1D : STD_LOGIC_VECTOR (13 downto 0) := "00000000011101";
    constant ap_const_lv15_7FD5 : STD_LOGIC_VECTOR (14 downto 0) := "111111111010101";
    constant ap_const_lv16_FFAB : STD_LOGIC_VECTOR (15 downto 0) := "1111111110101011";
    constant ap_const_lv16_FF95 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110010101";
    constant ap_const_lv14_3FEB : STD_LOGIC_VECTOR (13 downto 0) := "11111111101011";
    constant ap_const_lv16_96 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_i_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_stream_1_V_blk_n : STD_LOGIC;
    signal src_data_stream_2_V_blk_n : STD_LOGIC;
    signal dst_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal dst_data_stream_1_V_blk_n : STD_LOGIC;
    signal dst_data_stream_2_V_blk_n : STD_LOGIC;
    signal rows_blk_n : STD_LOGIC;
    signal cols_blk_n : STD_LOGIC;
    signal y_lower_blk_n : STD_LOGIC;
    signal y_upper_blk_n : STD_LOGIC;
    signal cb_lower_blk_n : STD_LOGIC;
    signal cb_upper_blk_n : STD_LOGIC;
    signal cr_lower_blk_n : STD_LOGIC;
    signal cr_upper_blk_n : STD_LOGIC;
    signal rows_read_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_read_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_lower_read_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_upper_read_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_lower_read_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_upper_read_reg_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_lower_read_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_upper_read_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_fu_366_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_reg_650 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal col_fu_381_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_reg_658 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_3_reg_663 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_cast_i_fu_396_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_cast_i_reg_683 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_557_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp3_reg_688 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_17_i_reg_693 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_i_reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp1_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal row_i_reg_335 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_i_reg_346 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal row_cast_i_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_cast_i_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_fu_390_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_cast65_i_fu_387_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_11_i_fu_402_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_573_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_i_fu_422_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_582_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_599_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_fu_445_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_i_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_i_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_fu_459_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_i_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_i_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_i_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_557_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_cast64_i_fu_399_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_557_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_557_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_565_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_573_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_573_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_565_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_582_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_582_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_590_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_590_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_590_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_590_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_599_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_599_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_565_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_590_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_599_p20 : STD_LOGIC_VECTOR (15 downto 0);

    component ImgProcess_Top_mabkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component ImgProcess_Top_macud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component ImgProcess_Top_madEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component ImgProcess_Top_maeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component ImgProcess_Top_mafYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    ImgProcess_Top_mabkb_U31 : component ImgProcess_Top_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_557_p0,
        din1 => grp_fu_557_p1,
        din2 => grp_fu_557_p2,
        dout => grp_fu_557_p3);

    ImgProcess_Top_macud_U32 : component ImgProcess_Top_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_565_p0,
        din1 => grp_fu_565_p1,
        din2 => grp_fu_565_p2,
        dout => grp_fu_565_p3);

    ImgProcess_Top_madEe_U33 : component ImgProcess_Top_madEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_573_p0,
        din1 => grp_fu_573_p1,
        din2 => grp_fu_565_p3,
        dout => grp_fu_573_p3);

    ImgProcess_Top_madEe_U34 : component ImgProcess_Top_madEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_582_p0,
        din1 => grp_fu_582_p1,
        din2 => grp_fu_590_p3,
        dout => grp_fu_582_p3);

    ImgProcess_Top_maeOg_U35 : component ImgProcess_Top_maeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_590_p0,
        din1 => grp_fu_590_p1,
        din2 => grp_fu_590_p2,
        dout => grp_fu_590_p3);

    ImgProcess_Top_mafYi_U36 : component ImgProcess_Top_mafYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_599_p0,
        din1 => grp_fu_599_p1,
        din2 => grp_fu_599_p2,
        dout => grp_fu_599_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_i_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    col_i_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                col_i_reg_346 <= col_reg_658;
            elsif (((tmp_i_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_i_reg_346 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    row_i_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                row_i_reg_335 <= row_reg_650;
            elsif ((not(((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_i_reg_335 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cb_lower_read_reg_627 <= cb_lower_dout;
                cb_upper_read_reg_632 <= cb_upper_dout;
                cols_read_reg_612 <= cols_dout;
                cr_lower_read_reg_637 <= cr_lower_dout;
                cr_upper_read_reg_642 <= cr_upper_dout;
                rows_read_reg_607 <= rows_dout;
                y_lower_read_reg_617 <= y_lower_dout;
                y_upper_read_reg_622 <= y_upper_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                col_reg_658 <= col_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_reg_650 <= row_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sel_tmp1_reg_703 <= sel_tmp1_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp3_reg_688 <= grp_fu_557_p3;
                tmp_17_i_reg_693 <= grp_fu_573_p3(15 downto 8);
                tmp_24_i_reg_698 <= grp_fu_582_p3(15 downto 8);
                    tmp_6_cast_i_reg_683(7 downto 0) <= tmp_6_cast_i_fu_396_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_3_reg_663 <= src_data_stream_0_V_dout;
                tmp_4_reg_670 <= src_data_stream_1_V_dout;
                tmp_5_reg_676 <= src_data_stream_2_V_dout;
            end if;
        end if;
    end process;
    tmp_6_cast_i_reg_683(15 downto 8) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, rows_empty_n, cols_empty_n, y_lower_empty_n, y_upper_empty_n, cb_lower_empty_n, cb_upper_empty_n, cr_lower_empty_n, cr_upper_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_376_p2, ap_CS_fsm_state6, ap_CS_fsm_state2, tmp_i_fu_361_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_i_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if ((not(((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_empty_n, y_lower_empty_n, y_upper_empty_n, cb_lower_empty_n, cb_upper_empty_n, cr_lower_empty_n, cr_upper_empty_n)
    begin
                ap_block_state1 <= ((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, tmp_1_i_fu_376_p2)
    begin
                ap_block_state3 <= (((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state6_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n)
    begin
                ap_block_state6 <= ((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_i_fu_361_p2)
    begin
        if (((tmp_i_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_i_fu_361_p2)
    begin
        if (((tmp_i_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cb_fu_454_p2 <= (tmp_17_i_reg_693 xor ap_const_lv8_80);

    cb_lower_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cb_lower_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cb_lower_blk_n <= cb_lower_empty_n;
        else 
            cb_lower_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cb_lower_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, y_lower_empty_n, y_upper_empty_n, cb_lower_empty_n, cb_upper_empty_n, cr_lower_empty_n, cr_upper_empty_n)
    begin
        if ((not(((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cb_lower_read <= ap_const_logic_1;
        else 
            cb_lower_read <= ap_const_logic_0;
        end if; 
    end process;


    cb_upper_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cb_upper_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cb_upper_blk_n <= cb_upper_empty_n;
        else 
            cb_upper_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cb_upper_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, y_lower_empty_n, y_upper_empty_n, cb_lower_empty_n, cb_upper_empty_n, cr_lower_empty_n, cr_upper_empty_n)
    begin
        if ((not(((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cb_upper_read <= ap_const_logic_1;
        else 
            cb_upper_read <= ap_const_logic_0;
        end if; 
    end process;

    col_cast_i_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_reg_346),32));
    col_fu_381_p2 <= std_logic_vector(unsigned(col_i_reg_346) + unsigned(ap_const_lv31_1));

    cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_blk_n <= cols_empty_n;
        else 
            cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, y_lower_empty_n, y_upper_empty_n, cb_lower_empty_n, cb_upper_empty_n, cr_lower_empty_n, cr_upper_empty_n)
    begin
        if ((not(((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_read <= ap_const_logic_1;
        else 
            cols_read <= ap_const_logic_0;
        end if; 
    end process;

    cr_fu_459_p2 <= (tmp_24_i_reg_698 xor ap_const_lv8_80);

    cr_lower_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cr_lower_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cr_lower_blk_n <= cr_lower_empty_n;
        else 
            cr_lower_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cr_lower_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, y_lower_empty_n, y_upper_empty_n, cb_lower_empty_n, cb_upper_empty_n, cr_lower_empty_n, cr_upper_empty_n)
    begin
        if ((not(((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cr_lower_read <= ap_const_logic_1;
        else 
            cr_lower_read <= ap_const_logic_0;
        end if; 
    end process;


    cr_upper_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cr_upper_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cr_upper_blk_n <= cr_upper_empty_n;
        else 
            cr_upper_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cr_upper_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, y_lower_empty_n, y_upper_empty_n, cb_lower_empty_n, cb_upper_empty_n, cr_lower_empty_n, cr_upper_empty_n)
    begin
        if ((not(((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cr_upper_read <= ap_const_logic_1;
        else 
            cr_upper_read <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_0_V_blk_n_assign_proc : process(dst_data_stream_0_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_data_stream_0_V_blk_n <= dst_data_stream_0_V_full_n;
        else 
            dst_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_0_V_din <= 
        ap_const_lv8_FF when (sel_tmp1_reg_703(0) = '1') else 
        tmp_3_reg_663;

    dst_data_stream_0_V_write_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_CS_fsm_state6)
    begin
        if ((not(((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_1_V_blk_n_assign_proc : process(dst_data_stream_1_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_data_stream_1_V_blk_n <= dst_data_stream_1_V_full_n;
        else 
            dst_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_1_V_din <= 
        ap_const_lv8_FF when (sel_tmp1_reg_703(0) = '1') else 
        tmp_4_reg_670;

    dst_data_stream_1_V_write_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_CS_fsm_state6)
    begin
        if ((not(((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_2_V_blk_n_assign_proc : process(dst_data_stream_2_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_data_stream_2_V_blk_n <= dst_data_stream_2_V_full_n;
        else 
            dst_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_2_V_din <= 
        ap_const_lv8_FF when (sel_tmp1_reg_703(0) = '1') else 
        tmp_5_reg_676;

    dst_data_stream_2_V_write_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_CS_fsm_state6)
    begin
        if ((not(((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_557_p0 <= tmp_8_cast64_i_fu_399_p1(8 - 1 downto 0);
    grp_fu_557_p1 <= ap_const_lv14_1D(6 - 1 downto 0);
    grp_fu_557_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_i_fu_390_p0) * unsigned(ap_const_lv15_4C), 15));
    grp_fu_565_p0 <= tmp_4_cast65_i_fu_387_p1(8 - 1 downto 0);
    grp_fu_565_p1 <= ap_const_lv15_7FD5(7 - 1 downto 0);
    grp_fu_565_p2 <= grp_fu_565_p20(15 - 1 downto 0);
    grp_fu_565_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_i_fu_402_p3),16));
    grp_fu_573_p0 <= tmp_6_cast_i_fu_396_p1(8 - 1 downto 0);
    grp_fu_573_p1 <= ap_const_lv16_FFAB(8 - 1 downto 0);
    grp_fu_582_p0 <= tmp_6_cast_i_fu_396_p1(8 - 1 downto 0);
    grp_fu_582_p1 <= ap_const_lv16_FF95(8 - 1 downto 0);
    grp_fu_590_p0 <= tmp_8_cast64_i_fu_399_p1(8 - 1 downto 0);
    grp_fu_590_p1 <= ap_const_lv14_3FEB(6 - 1 downto 0);
    grp_fu_590_p2 <= grp_fu_590_p20(15 - 1 downto 0);
    grp_fu_590_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_i_fu_422_p3),16));
    grp_fu_599_p0 <= tmp_6_cast_i_reg_683(8 - 1 downto 0);
    grp_fu_599_p1 <= ap_const_lv16_96(9 - 1 downto 0);
    grp_fu_599_p2 <= grp_fu_599_p20(15 - 1 downto 0);
    grp_fu_599_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_reg_688),16));
    row_cast_i_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_i_reg_335),32));
    row_fu_366_p2 <= std_logic_vector(unsigned(row_i_reg_335) + unsigned(ap_const_lv31_1));

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, y_lower_empty_n, y_upper_empty_n, cb_lower_empty_n, cb_upper_empty_n, cr_lower_empty_n, cr_upper_empty_n)
    begin
        if ((not(((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_530_p2 <= (tmp8_fu_512_p2 and tmp2_fu_524_p2);

    src_data_stream_0_V_blk_n_assign_proc : process(src_data_stream_0_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_376_p2)
    begin
        if (((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_0_V_blk_n <= src_data_stream_0_V_empty_n;
        else 
            src_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_0_V_read_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_376_p2)
    begin
        if ((not((((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_1_V_blk_n_assign_proc : process(src_data_stream_1_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_376_p2)
    begin
        if (((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_1_V_blk_n <= src_data_stream_1_V_empty_n;
        else 
            src_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_1_V_read_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_376_p2)
    begin
        if ((not((((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_2_V_blk_n_assign_proc : process(src_data_stream_2_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_376_p2)
    begin
        if (((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_2_V_blk_n <= src_data_stream_2_V_empty_n;
        else 
            src_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_2_V_read_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_376_p2)
    begin
        if ((not((((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_518_p2 <= (tmp_35_i_fu_501_p2 and tmp_34_i_fu_496_p2);
    tmp2_fu_524_p2 <= (tmp_26_i_fu_468_p2 and tmp1_fu_518_p2);
    tmp8_fu_512_p2 <= (tmp_32_i_fu_487_p2 and tmp9_fu_506_p2);
    tmp9_fu_506_p2 <= (tmp_31_i_fu_482_p2 and tmp_27_i_fu_473_p2);
    tmp_11_i_fu_402_p3 <= (tmp_3_reg_663 & ap_const_lv7_0);
    tmp_18_i_fu_422_p3 <= (tmp_5_reg_676 & ap_const_lv7_0);
    tmp_1_i_fu_376_p2 <= "1" when (signed(col_cast_i_fu_372_p1) < signed(cols_read_reg_612)) else "0";
    tmp_25_i_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_445_p4),32));
    tmp_26_i_fu_468_p2 <= "1" when (signed(tmp_25_i_fu_464_p1) > signed(y_lower_read_reg_617)) else "0";
    tmp_27_i_fu_473_p2 <= "1" when (signed(tmp_25_i_fu_464_p1) < signed(y_upper_read_reg_622)) else "0";
    tmp_30_i_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cb_fu_454_p2),32));
    tmp_31_i_fu_482_p2 <= "1" when (signed(tmp_30_i_fu_478_p1) > signed(cb_lower_read_reg_627)) else "0";
    tmp_32_i_fu_487_p2 <= "1" when (signed(tmp_30_i_fu_478_p1) < signed(cb_upper_read_reg_632)) else "0";
    tmp_33_i_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cr_fu_459_p2),32));
    tmp_34_i_fu_496_p2 <= "1" when (signed(tmp_33_i_fu_492_p1) > signed(cr_lower_read_reg_637)) else "0";
    tmp_35_i_fu_501_p2 <= "1" when (signed(tmp_33_i_fu_492_p1) < signed(cr_upper_read_reg_642)) else "0";
    tmp_4_cast65_i_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_676),15));
    tmp_5_i_fu_390_p0 <= tmp_4_cast65_i_fu_387_p1(8 - 1 downto 0);
    tmp_6_cast_i_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_670),16));
    tmp_8_cast64_i_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_663),14));
    tmp_i_fu_361_p2 <= "1" when (signed(row_cast_i_fu_357_p1) < signed(rows_read_reg_607)) else "0";
    y_fu_445_p4 <= grp_fu_599_p3(15 downto 8);

    y_lower_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, y_lower_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_lower_blk_n <= y_lower_empty_n;
        else 
            y_lower_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_lower_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, y_lower_empty_n, y_upper_empty_n, cb_lower_empty_n, cb_upper_empty_n, cr_lower_empty_n, cr_upper_empty_n)
    begin
        if ((not(((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_lower_read <= ap_const_logic_1;
        else 
            y_lower_read <= ap_const_logic_0;
        end if; 
    end process;


    y_upper_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, y_upper_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_upper_blk_n <= y_upper_empty_n;
        else 
            y_upper_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_upper_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, y_lower_empty_n, y_upper_empty_n, cb_lower_empty_n, cb_upper_empty_n, cr_lower_empty_n, cr_upper_empty_n)
    begin
        if ((not(((cr_upper_empty_n = ap_const_logic_0) or (cr_lower_empty_n = ap_const_logic_0) or (cb_upper_empty_n = ap_const_logic_0) or (cb_lower_empty_n = ap_const_logic_0) or (y_upper_empty_n = ap_const_logic_0) or (y_lower_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_upper_read <= ap_const_logic_1;
        else 
            y_upper_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
