// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_hough,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flvd1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2000,HLS_SYN_DSP=76,HLS_SYN_FF=14007,HLS_SYN_LUT=18493,HLS_VERSION=2018_3}" *)

module hls_hough (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_axi_V_data_V_dout,
        src_axi_V_data_V_empty_n,
        src_axi_V_data_V_read,
        src_axi_V_keep_V_dout,
        src_axi_V_keep_V_empty_n,
        src_axi_V_keep_V_read,
        src_axi_V_strb_V_dout,
        src_axi_V_strb_V_empty_n,
        src_axi_V_strb_V_read,
        src_axi_V_user_V_dout,
        src_axi_V_user_V_empty_n,
        src_axi_V_user_V_read,
        src_axi_V_last_V_dout,
        src_axi_V_last_V_empty_n,
        src_axi_V_last_V_read,
        src_axi_V_id_V_dout,
        src_axi_V_id_V_empty_n,
        src_axi_V_id_V_read,
        src_axi_V_dest_V_dout,
        src_axi_V_dest_V_empty_n,
        src_axi_V_dest_V_read,
        dst_axi_V_data_V_din,
        dst_axi_V_data_V_full_n,
        dst_axi_V_data_V_write,
        dst_axi_V_keep_V_din,
        dst_axi_V_keep_V_full_n,
        dst_axi_V_keep_V_write,
        dst_axi_V_strb_V_din,
        dst_axi_V_strb_V_full_n,
        dst_axi_V_strb_V_write,
        dst_axi_V_user_V_din,
        dst_axi_V_user_V_full_n,
        dst_axi_V_user_V_write,
        dst_axi_V_last_V_din,
        dst_axi_V_last_V_full_n,
        dst_axi_V_last_V_write,
        dst_axi_V_id_V_din,
        dst_axi_V_id_V_full_n,
        dst_axi_V_id_V_write,
        dst_axi_V_dest_V_din,
        dst_axi_V_dest_V_full_n,
        dst_axi_V_dest_V_write,
        rows,
        cols
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] src_axi_V_data_V_dout;
input   src_axi_V_data_V_empty_n;
output   src_axi_V_data_V_read;
input  [3:0] src_axi_V_keep_V_dout;
input   src_axi_V_keep_V_empty_n;
output   src_axi_V_keep_V_read;
input  [3:0] src_axi_V_strb_V_dout;
input   src_axi_V_strb_V_empty_n;
output   src_axi_V_strb_V_read;
input  [0:0] src_axi_V_user_V_dout;
input   src_axi_V_user_V_empty_n;
output   src_axi_V_user_V_read;
input  [0:0] src_axi_V_last_V_dout;
input   src_axi_V_last_V_empty_n;
output   src_axi_V_last_V_read;
input  [0:0] src_axi_V_id_V_dout;
input   src_axi_V_id_V_empty_n;
output   src_axi_V_id_V_read;
input  [0:0] src_axi_V_dest_V_dout;
input   src_axi_V_dest_V_empty_n;
output   src_axi_V_dest_V_read;
output  [31:0] dst_axi_V_data_V_din;
input   dst_axi_V_data_V_full_n;
output   dst_axi_V_data_V_write;
output  [3:0] dst_axi_V_keep_V_din;
input   dst_axi_V_keep_V_full_n;
output   dst_axi_V_keep_V_write;
output  [3:0] dst_axi_V_strb_V_din;
input   dst_axi_V_strb_V_full_n;
output   dst_axi_V_strb_V_write;
output  [0:0] dst_axi_V_user_V_din;
input   dst_axi_V_user_V_full_n;
output   dst_axi_V_user_V_write;
output  [0:0] dst_axi_V_last_V_din;
input   dst_axi_V_last_V_full_n;
output   dst_axi_V_last_V_write;
output  [0:0] dst_axi_V_id_V_din;
input   dst_axi_V_id_V_full_n;
output   dst_axi_V_id_V_write;
output  [0:0] dst_axi_V_dest_V_din;
input   dst_axi_V_dest_V_full_n;
output   dst_axi_V_dest_V_write;
input  [31:0] rows;
input  [31:0] cols;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_axi_V_data_V_read;
reg src_axi_V_keep_V_read;
reg src_axi_V_strb_V_read;
reg src_axi_V_user_V_read;
reg src_axi_V_last_V_read;
reg src_axi_V_id_V_read;
reg src_axi_V_dest_V_read;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dst_axi_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_reg_384;
reg    dst_axi_V_keep_V_blk_n;
reg    dst_axi_V_strb_V_blk_n;
reg    dst_axi_V_user_V_blk_n;
reg    dst_axi_V_last_V_blk_n;
reg    dst_axi_V_id_V_blk_n;
reg    dst_axi_V_dest_V_blk_n;
reg   [31:0] t_V_2_reg_207;
wire   [32:0] ret_V_fu_281_p2;
reg   [32:0] ret_V_reg_370;
wire    ap_CS_fsm_state4;
wire    grp_hls_hough_line_fu_218_ap_ready;
wire    grp_hls_hough_line_fu_218_ap_done;
wire   [0:0] exitcond1_i_fu_287_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] i_V_fu_292_p2;
reg   [31:0] i_V_reg_379;
wire   [0:0] exitcond_i_fu_298_p2;
wire    ap_block_state6_pp0_stage0_iter0;
wire   [7:0] img_dst_data_stream_s_dout;
wire    img_dst_data_stream_s_empty_n;
reg    img_dst_data_stream_s_read;
wire    dst_axi_V_id_V1_status;
reg    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] j_V_fu_303_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] axi_last_V_fu_313_p2;
reg   [0:0] axi_last_V_reg_393;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
wire    grp_hls_hough_line_fu_218_ap_start;
wire    grp_hls_hough_line_fu_218_ap_idle;
wire    grp_hls_hough_line_fu_218_src_data_stream_V_read;
wire   [7:0] grp_hls_hough_line_fu_218_dst_data_stream_V_din;
wire    grp_hls_hough_line_fu_218_dst_data_stream_V_write;
wire    grp_AXIvideo2Mat_fu_250_ap_start;
wire    grp_AXIvideo2Mat_fu_250_ap_done;
wire    grp_AXIvideo2Mat_fu_250_ap_idle;
wire    grp_AXIvideo2Mat_fu_250_ap_ready;
wire    grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read;
wire    grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read;
wire    grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read;
wire    grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read;
wire    grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read;
wire    grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read;
wire    grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read;
wire   [7:0] grp_AXIvideo2Mat_fu_250_img_data_stream_V_din;
wire    grp_AXIvideo2Mat_fu_250_img_data_stream_V_write;
reg   [31:0] t_V_reg_196;
wire    ap_CS_fsm_state8;
reg    grp_hls_hough_line_fu_218_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [7:0] img_src_data_stream_s_dout;
wire    img_src_data_stream_s_empty_n;
reg    img_src_data_stream_s_read;
wire    img_dst_data_stream_s_full_n;
reg    img_dst_data_stream_s_write;
reg    grp_AXIvideo2Mat_fu_250_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    img_src_data_stream_s_full_n;
reg    img_src_data_stream_s_write;
reg    dst_axi_V_id_V1_update;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] tmp_user_V_fu_138;
wire   [32:0] lhs_V_cast_fu_278_p1;
wire   [32:0] tmp_i_cast_fu_309_p1;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_hls_hough_line_fu_218_ap_start_reg = 1'b0;
#0 grp_AXIvideo2Mat_fu_250_ap_start_reg = 1'b0;
end

hls_hough_line grp_hls_hough_line_fu_218(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_hls_hough_line_fu_218_ap_start),
    .ap_done(grp_hls_hough_line_fu_218_ap_done),
    .ap_idle(grp_hls_hough_line_fu_218_ap_idle),
    .ap_ready(grp_hls_hough_line_fu_218_ap_ready),
    .src_data_stream_V_dout(img_src_data_stream_s_dout),
    .src_data_stream_V_empty_n(img_src_data_stream_s_empty_n),
    .src_data_stream_V_read(grp_hls_hough_line_fu_218_src_data_stream_V_read),
    .dst_data_stream_V_din(grp_hls_hough_line_fu_218_dst_data_stream_V_din),
    .dst_data_stream_V_full_n(img_dst_data_stream_s_full_n),
    .dst_data_stream_V_write(grp_hls_hough_line_fu_218_dst_data_stream_V_write),
    .rows(rows),
    .cols(cols)
);

AXIvideo2Mat grp_AXIvideo2Mat_fu_250(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AXIvideo2Mat_fu_250_ap_start),
    .ap_done(grp_AXIvideo2Mat_fu_250_ap_done),
    .ap_idle(grp_AXIvideo2Mat_fu_250_ap_idle),
    .ap_ready(grp_AXIvideo2Mat_fu_250_ap_ready),
    .AXI_video_strm_V_data_V_dout(src_axi_V_data_V_dout),
    .AXI_video_strm_V_data_V_empty_n(src_axi_V_data_V_empty_n),
    .AXI_video_strm_V_data_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read),
    .AXI_video_strm_V_keep_V_dout(src_axi_V_keep_V_dout),
    .AXI_video_strm_V_keep_V_empty_n(src_axi_V_keep_V_empty_n),
    .AXI_video_strm_V_keep_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read),
    .AXI_video_strm_V_strb_V_dout(src_axi_V_strb_V_dout),
    .AXI_video_strm_V_strb_V_empty_n(src_axi_V_strb_V_empty_n),
    .AXI_video_strm_V_strb_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read),
    .AXI_video_strm_V_user_V_dout(src_axi_V_user_V_dout),
    .AXI_video_strm_V_user_V_empty_n(src_axi_V_user_V_empty_n),
    .AXI_video_strm_V_user_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read),
    .AXI_video_strm_V_last_V_dout(src_axi_V_last_V_dout),
    .AXI_video_strm_V_last_V_empty_n(src_axi_V_last_V_empty_n),
    .AXI_video_strm_V_last_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read),
    .AXI_video_strm_V_id_V_dout(src_axi_V_id_V_dout),
    .AXI_video_strm_V_id_V_empty_n(src_axi_V_id_V_empty_n),
    .AXI_video_strm_V_id_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read),
    .AXI_video_strm_V_dest_V_dout(src_axi_V_dest_V_dout),
    .AXI_video_strm_V_dest_V_empty_n(src_axi_V_dest_V_empty_n),
    .AXI_video_strm_V_dest_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read),
    .img_rows_V_read(rows),
    .img_cols_V_read(cols),
    .img_data_stream_V_din(grp_AXIvideo2Mat_fu_250_img_data_stream_V_din),
    .img_data_stream_V_full_n(img_src_data_stream_s_full_n),
    .img_data_stream_V_write(grp_AXIvideo2Mat_fu_250_img_data_stream_V_write)
);

fifo_w8_d64_A img_src_data_stream_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_AXIvideo2Mat_fu_250_img_data_stream_V_din),
    .if_full_n(img_src_data_stream_s_full_n),
    .if_write(img_src_data_stream_s_write),
    .if_dout(img_src_data_stream_s_dout),
    .if_empty_n(img_src_data_stream_s_empty_n),
    .if_read(img_src_data_stream_s_read)
);

fifo_w8_d64_A img_dst_data_stream_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_hls_hough_line_fu_218_dst_data_stream_V_din),
    .if_full_n(img_dst_data_stream_s_full_n),
    .if_write(img_dst_data_stream_s_write),
    .if_dout(img_dst_data_stream_s_dout),
    .if_empty_n(img_dst_data_stream_s_empty_n),
    .if_read(img_dst_data_stream_s_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_i_fu_287_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_i_fu_287_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AXIvideo2Mat_fu_250_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_AXIvideo2Mat_fu_250_ap_start_reg <= 1'b1;
        end else if ((grp_AXIvideo2Mat_fu_250_ap_ready == 1'b1)) begin
            grp_AXIvideo2Mat_fu_250_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_hls_hough_line_fu_218_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_hls_hough_line_fu_218_ap_start_reg <= 1'b1;
        end else if ((grp_hls_hough_line_fu_218_ap_ready == 1'b1)) begin
            grp_hls_hough_line_fu_218_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_fu_298_p2 == 1'd0))) begin
        t_V_2_reg_207 <= j_V_fu_303_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_i_fu_287_p2 == 1'd0))) begin
        t_V_2_reg_207 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_V_reg_196 <= i_V_reg_379;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_hls_hough_line_fu_218_ap_done == 1'b1))) begin
        t_V_reg_196 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_reg_384 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_user_V_fu_138 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_user_V_fu_138 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_fu_298_p2 == 1'd0))) begin
        axi_last_V_reg_393 <= axi_last_V_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_i_reg_384 <= exitcond_i_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_V_reg_379 <= i_V_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_hls_hough_line_fu_218_ap_done == 1'b1))) begin
        ret_V_reg_370 <= ret_V_fu_281_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_298_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_i_fu_287_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_i_fu_287_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_axi_V_data_V_blk_n = dst_axi_V_data_V_full_n;
    end else begin
        dst_axi_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_axi_V_dest_V_blk_n = dst_axi_V_dest_V_full_n;
    end else begin
        dst_axi_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_384 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_axi_V_id_V1_update = 1'b1;
    end else begin
        dst_axi_V_id_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_axi_V_id_V_blk_n = dst_axi_V_id_V_full_n;
    end else begin
        dst_axi_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_axi_V_keep_V_blk_n = dst_axi_V_keep_V_full_n;
    end else begin
        dst_axi_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_axi_V_last_V_blk_n = dst_axi_V_last_V_full_n;
    end else begin
        dst_axi_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_axi_V_strb_V_blk_n = dst_axi_V_strb_V_full_n;
    end else begin
        dst_axi_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_axi_V_user_V_blk_n = dst_axi_V_user_V_full_n;
    end else begin
        dst_axi_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_384 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_dst_data_stream_s_read = 1'b1;
    end else begin
        img_dst_data_stream_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_dst_data_stream_s_write = grp_hls_hough_line_fu_218_dst_data_stream_V_write;
    end else begin
        img_dst_data_stream_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_src_data_stream_s_read = grp_hls_hough_line_fu_218_src_data_stream_V_read;
    end else begin
        img_src_data_stream_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_src_data_stream_s_write = grp_AXIvideo2Mat_fu_250_img_data_stream_V_write;
    end else begin
        img_src_data_stream_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_axi_V_data_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read;
    end else begin
        src_axi_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_axi_V_dest_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read;
    end else begin
        src_axi_V_dest_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_axi_V_id_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read;
    end else begin
        src_axi_V_id_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_axi_V_keep_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read;
    end else begin
        src_axi_V_keep_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_axi_V_last_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read;
    end else begin
        src_axi_V_last_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_axi_V_strb_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read;
    end else begin
        src_axi_V_strb_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_axi_V_user_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read;
    end else begin
        src_axi_V_user_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_AXIvideo2Mat_fu_250_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_hls_hough_line_fu_218_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_i_fu_287_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_fu_298_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_fu_298_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_384 == 1'd0) & (dst_axi_V_id_V1_status == 1'b0)) | ((exitcond_i_reg_384 == 1'd0) & (img_dst_data_stream_s_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_384 == 1'd0) & (dst_axi_V_id_V1_status == 1'b0)) | ((exitcond_i_reg_384 == 1'd0) & (img_dst_data_stream_s_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_384 == 1'd0) & (dst_axi_V_id_V1_status == 1'b0)) | ((exitcond_i_reg_384 == 1'd0) & (img_dst_data_stream_s_empty_n == 1'b0))));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = (((exitcond_i_reg_384 == 1'd0) & (dst_axi_V_id_V1_status == 1'b0)) | ((exitcond_i_reg_384 == 1'd0) & (img_dst_data_stream_s_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign axi_last_V_fu_313_p2 = ((tmp_i_cast_fu_309_p1 == ret_V_reg_370) ? 1'b1 : 1'b0);

assign dst_axi_V_data_V_din = {{24'd16777215}, {img_dst_data_stream_s_dout}};

assign dst_axi_V_data_V_write = dst_axi_V_id_V1_update;

assign dst_axi_V_dest_V_din = 1'd0;

assign dst_axi_V_dest_V_write = dst_axi_V_id_V1_update;

assign dst_axi_V_id_V1_status = (dst_axi_V_user_V_full_n & dst_axi_V_strb_V_full_n & dst_axi_V_last_V_full_n & dst_axi_V_keep_V_full_n & dst_axi_V_id_V_full_n & dst_axi_V_dest_V_full_n & dst_axi_V_data_V_full_n);

assign dst_axi_V_id_V_din = 1'd0;

assign dst_axi_V_id_V_write = dst_axi_V_id_V1_update;

assign dst_axi_V_keep_V_din = 4'd15;

assign dst_axi_V_keep_V_write = dst_axi_V_id_V1_update;

assign dst_axi_V_last_V_din = axi_last_V_reg_393;

assign dst_axi_V_last_V_write = dst_axi_V_id_V1_update;

assign dst_axi_V_strb_V_din = 4'd0;

assign dst_axi_V_strb_V_write = dst_axi_V_id_V1_update;

assign dst_axi_V_user_V_din = tmp_user_V_fu_138;

assign dst_axi_V_user_V_write = dst_axi_V_id_V1_update;

assign exitcond1_i_fu_287_p2 = ((t_V_reg_196 == rows) ? 1'b1 : 1'b0);

assign exitcond_i_fu_298_p2 = ((t_V_2_reg_207 == cols) ? 1'b1 : 1'b0);

assign grp_AXIvideo2Mat_fu_250_ap_start = grp_AXIvideo2Mat_fu_250_ap_start_reg;

assign grp_hls_hough_line_fu_218_ap_start = grp_hls_hough_line_fu_218_ap_start_reg;

assign i_V_fu_292_p2 = (t_V_reg_196 + 32'd1);

assign j_V_fu_303_p2 = (t_V_2_reg_207 + 32'd1);

assign lhs_V_cast_fu_278_p1 = cols;

assign ret_V_fu_281_p2 = ($signed(lhs_V_cast_fu_278_p1) + $signed(33'd8589934591));

assign tmp_i_cast_fu_309_p1 = t_V_2_reg_207;

endmodule //hls_hough
