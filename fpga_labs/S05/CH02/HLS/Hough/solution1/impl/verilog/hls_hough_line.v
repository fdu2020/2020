// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_hough_line (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write,
        rows,
        cols
);

parameter    ap_ST_fsm_state1 = 135'd1;
parameter    ap_ST_fsm_state2 = 135'd2;
parameter    ap_ST_fsm_state3 = 135'd4;
parameter    ap_ST_fsm_state4 = 135'd8;
parameter    ap_ST_fsm_state5 = 135'd16;
parameter    ap_ST_fsm_state6 = 135'd32;
parameter    ap_ST_fsm_state7 = 135'd64;
parameter    ap_ST_fsm_state8 = 135'd128;
parameter    ap_ST_fsm_state9 = 135'd256;
parameter    ap_ST_fsm_state10 = 135'd512;
parameter    ap_ST_fsm_state11 = 135'd1024;
parameter    ap_ST_fsm_state12 = 135'd2048;
parameter    ap_ST_fsm_state13 = 135'd4096;
parameter    ap_ST_fsm_state14 = 135'd8192;
parameter    ap_ST_fsm_state15 = 135'd16384;
parameter    ap_ST_fsm_state16 = 135'd32768;
parameter    ap_ST_fsm_state17 = 135'd65536;
parameter    ap_ST_fsm_state18 = 135'd131072;
parameter    ap_ST_fsm_state19 = 135'd262144;
parameter    ap_ST_fsm_state20 = 135'd524288;
parameter    ap_ST_fsm_state21 = 135'd1048576;
parameter    ap_ST_fsm_state22 = 135'd2097152;
parameter    ap_ST_fsm_state23 = 135'd4194304;
parameter    ap_ST_fsm_state24 = 135'd8388608;
parameter    ap_ST_fsm_state25 = 135'd16777216;
parameter    ap_ST_fsm_state26 = 135'd33554432;
parameter    ap_ST_fsm_state27 = 135'd67108864;
parameter    ap_ST_fsm_state28 = 135'd134217728;
parameter    ap_ST_fsm_state29 = 135'd268435456;
parameter    ap_ST_fsm_state30 = 135'd536870912;
parameter    ap_ST_fsm_state31 = 135'd1073741824;
parameter    ap_ST_fsm_state32 = 135'd2147483648;
parameter    ap_ST_fsm_state33 = 135'd4294967296;
parameter    ap_ST_fsm_state34 = 135'd8589934592;
parameter    ap_ST_fsm_state35 = 135'd17179869184;
parameter    ap_ST_fsm_state36 = 135'd34359738368;
parameter    ap_ST_fsm_state37 = 135'd68719476736;
parameter    ap_ST_fsm_state38 = 135'd137438953472;
parameter    ap_ST_fsm_state39 = 135'd274877906944;
parameter    ap_ST_fsm_state40 = 135'd549755813888;
parameter    ap_ST_fsm_state41 = 135'd1099511627776;
parameter    ap_ST_fsm_state42 = 135'd2199023255552;
parameter    ap_ST_fsm_state43 = 135'd4398046511104;
parameter    ap_ST_fsm_state44 = 135'd8796093022208;
parameter    ap_ST_fsm_state45 = 135'd17592186044416;
parameter    ap_ST_fsm_state46 = 135'd35184372088832;
parameter    ap_ST_fsm_state47 = 135'd70368744177664;
parameter    ap_ST_fsm_state48 = 135'd140737488355328;
parameter    ap_ST_fsm_state49 = 135'd281474976710656;
parameter    ap_ST_fsm_state50 = 135'd562949953421312;
parameter    ap_ST_fsm_state51 = 135'd1125899906842624;
parameter    ap_ST_fsm_state52 = 135'd2251799813685248;
parameter    ap_ST_fsm_state53 = 135'd4503599627370496;
parameter    ap_ST_fsm_state54 = 135'd9007199254740992;
parameter    ap_ST_fsm_state55 = 135'd18014398509481984;
parameter    ap_ST_fsm_state56 = 135'd36028797018963968;
parameter    ap_ST_fsm_state57 = 135'd72057594037927936;
parameter    ap_ST_fsm_state58 = 135'd144115188075855872;
parameter    ap_ST_fsm_state59 = 135'd288230376151711744;
parameter    ap_ST_fsm_state60 = 135'd576460752303423488;
parameter    ap_ST_fsm_state61 = 135'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 135'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 135'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 135'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 135'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 135'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 135'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 135'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 135'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 135'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 135'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 135'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 135'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 135'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 135'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 135'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 135'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 135'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 135'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 135'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 135'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 135'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 135'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 135'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 135'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 135'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 135'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 135'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 135'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 135'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 135'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 135'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 135'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 135'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 135'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 135'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 135'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 135'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 135'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 135'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 135'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 135'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 135'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 135'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 135'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 135'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 135'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 135'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 135'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 135'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 135'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 135'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 135'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 135'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 135'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 135'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 135'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 135'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 135'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 135'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 135'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 135'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 135'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 135'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 135'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 135'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 135'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 135'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 135'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 135'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 135'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 135'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 135'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 135'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 135'd21778071482940061661655974875633165533184;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
output  [7:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;
input  [31:0] rows;
input  [31:0] cols;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_V_read;
reg dst_data_stream_V_write;

(* fsm_encoding = "none" *) reg   [134:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_40_fu_443_p2;
reg    dst_data_stream_V_blk_n;
wire    ap_CS_fsm_state135;
wire   [63:0] grp_fu_370_p1;
reg   [63:0] reg_378;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state79;
reg   [63:0] reg_383;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state84;
wire   [63:0] grp_pow_generic_double_s_fu_308_ap_return;
reg   [63:0] reg_388;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state107;
wire   [63:0] grp_pow_generic_double_s_fu_337_ap_return;
reg   [63:0] reg_393;
wire   [63:0] grp_fu_366_p2;
reg   [63:0] reg_398;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state112;
wire   [63:0] grp_fu_373_p2;
reg   [63:0] reg_403;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state133;
wire   [20:0] row_2_fu_413_p2;
reg   [20:0] row_2_reg_1018;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond5_fu_407_p2;
wire   [31:0] row_1_cast_fu_424_p1;
reg   [31:0] row_1_cast_reg_1028;
wire    ap_CS_fsm_state4;
wire   [30:0] row_3_fu_433_p2;
reg   [30:0] row_3_reg_1036;
wire   [31:0] col_cast_fu_439_p1;
reg   [31:0] col_cast_reg_1041;
reg    ap_block_state5;
wire   [30:0] col_2_fu_448_p2;
reg   [30:0] col_2_reg_1049;
wire   [0:0] tmp_43_fu_454_p2;
reg   [0:0] tmp_43_reg_1054;
wire   [31:0] a_3_fu_465_p2;
reg   [31:0] a_3_reg_1061;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp_45_fu_471_p2;
wire   [0:0] exitcond4_fu_460_p2;
wire   [31:0] b_3_fu_482_p2;
reg   [31:0] b_3_reg_1074;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_50_fu_488_p2;
wire   [0:0] exitcond3_fu_477_p2;
wire   [31:0] p_Val2_99_fu_630_p3;
reg   [31:0] p_Val2_99_reg_1084;
wire    ap_CS_fsm_state63;
wire   [0:0] or_cond_fu_650_p2;
wire  signed [31:0] tmp_fu_666_p2;
reg  signed [31:0] tmp_reg_1093;
wire    ap_CS_fsm_state64;
reg   [20:0] p_count_addr_2_reg_1098;
wire    ap_CS_fsm_state65;
wire   [31:0] tmp_57_fu_687_p2;
wire    ap_CS_fsm_state68;
wire   [31:0] a_1_cast_fu_694_p1;
reg   [31:0] a_1_cast_reg_1108;
wire    ap_CS_fsm_state70;
wire   [30:0] a_2_fu_703_p2;
reg   [30:0] a_2_reg_1118;
wire   [31:0] b_1_cast_fu_709_p1;
reg   [31:0] b_1_cast_reg_1123;
wire    ap_CS_fsm_state71;
wire   [30:0] b_2_fu_718_p2;
reg   [30:0] b_2_reg_1132;
wire   [31:0] radius_cast2_fu_728_p1;
reg   [31:0] radius_cast2_reg_1137;
wire    ap_CS_fsm_state72;
wire  signed [31:0] tmp2_fu_757_p2;
reg  signed [31:0] tmp2_reg_1145;
wire   [0:0] exitcond2_fu_736_p2;
wire    ap_CS_fsm_state73;
wire   [0:0] tmp_49_fu_776_p2;
reg   [0:0] tmp_49_reg_1155;
wire    ap_CS_fsm_state76;
wire   [31:0] k_1_fu_787_p2;
reg   [31:0] k_1_reg_1162;
wire    ap_CS_fsm_state80;
wire   [5:0] radius_2_fu_793_p2;
wire   [0:0] exitcond1_fu_782_p2;
wire   [31:0] col_3_fu_804_p2;
reg   [31:0] col_3_reg_1175;
wire    ap_CS_fsm_state81;
wire   [31:0] tmp_58_fu_810_p2;
wire   [0:0] exitcond_fu_799_p2;
wire   [0:0] tmp_59_fu_970_p2;
reg   [0:0] tmp_59_reg_1185;
wire    ap_CS_fsm_state134;
wire   [0:0] tmp_60_fu_976_p2;
reg   [0:0] tmp_60_reg_1190;
reg   [20:0] p_count_address0;
reg    p_count_ce0;
reg    p_count_we0;
reg   [31:0] p_count_d0;
wire   [31:0] p_count_q0;
wire    grp_pow_generic_double_s_fu_308_ap_start;
wire    grp_pow_generic_double_s_fu_308_ap_done;
wire    grp_pow_generic_double_s_fu_308_ap_idle;
wire    grp_pow_generic_double_s_fu_308_ap_ready;
wire    grp_pow_generic_double_s_fu_337_ap_start;
wire    grp_pow_generic_double_s_fu_337_ap_done;
wire    grp_pow_generic_double_s_fu_337_ap_idle;
wire    grp_pow_generic_double_s_fu_337_ap_ready;
reg   [20:0] row_reg_194;
wire    ap_CS_fsm_state3;
reg   [30:0] row_1_reg_205;
reg   [30:0] col_reg_216;
wire   [0:0] tmp_39_fu_428_p2;
reg   [31:0] a_reg_227;
reg   [31:0] b_reg_239;
wire    ap_CS_fsm_state69;
reg   [30:0] a_1_reg_251;
wire   [0:0] tmp_44_fu_713_p2;
reg   [30:0] b_1_reg_262;
wire   [0:0] tmp_41_fu_698_p2;
reg  signed [5:0] radius_reg_273;
reg   [31:0] k_reg_285;
reg   [31:0] col_1_reg_297;
reg    grp_pow_generic_double_s_fu_308_ap_start_reg;
reg   [134:0] ap_NS_fsm;
wire    ap_NS_fsm_state14;
wire    ap_NS_fsm_state85;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state85;
reg    grp_pow_generic_double_s_fu_337_ap_start_reg;
wire   [63:0] tmp_s_fu_419_p1;
wire  signed [63:0] tmp_56_fu_682_p1;
wire  signed [63:0] tmp_48_fu_771_p1;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state108;
reg   [31:0] grp_fu_370_p0;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state113;
wire  signed [31:0] tmp_39_fu_428_p1;
wire  signed [31:0] tmp_40_fu_443_p1;
wire  signed [31:0] exitcond4_fu_460_p1;
wire  signed [31:0] exitcond3_fu_477_p1;
wire   [63:0] p_Val2_s_fu_494_p1;
wire   [51:0] tmp_V_5_fu_516_p1;
wire   [53:0] mantissa_V_fu_520_p4;
wire   [10:0] tmp_V_fu_506_p4;
wire   [11:0] tmp_i_i_i_i_cast3_fu_534_p1;
wire   [11:0] sh_assign_fu_538_p2;
wire   [10:0] tmp_i_i_i_fu_552_p2;
wire   [0:0] isNeg_fu_544_p3;
wire  signed [11:0] tmp_i_i_i_cast_fu_558_p1;
wire   [11:0] ush_fu_562_p3;
wire  signed [31:0] sh_assign_6_cast_fu_570_p1;
wire   [53:0] tmp_i_i_i_cast_60_fu_578_p1;
wire   [136:0] mantissa_V_1_cast_fu_530_p1;
wire   [136:0] tmp_i_i_i_59_fu_574_p1;
wire   [53:0] r_V_fu_582_p2;
wire   [0:0] tmp_70_fu_594_p3;
wire   [136:0] r_V_39_fu_588_p2;
wire   [31:0] tmp_51_fu_602_p1;
wire   [31:0] tmp_62_fu_606_p4;
wire   [31:0] p_Val2_98_fu_616_p3;
wire   [0:0] p_Result_s_fu_498_p3;
wire   [31:0] result_V_1_fu_624_p2;
wire   [0:0] tmp_52_fu_638_p2;
wire   [0:0] tmp_53_fu_644_p2;
wire  signed [31:0] tmp_54_fu_656_p2;
wire  signed [31:0] tmp_55_fu_661_p1;
wire   [31:0] tmp_55_fu_661_p2;
wire  signed [31:0] tmp4_fu_672_p1;
wire   [31:0] tmp4_fu_672_p2;
wire   [31:0] index_1_fu_676_p2;
wire  signed [31:0] tmp_41_fu_698_p1;
wire  signed [31:0] tmp_44_fu_713_p1;
wire  signed [6:0] radius_cast5_fu_724_p1;
wire   [7:0] radius_cast_fu_732_p1;
wire   [7:0] tmp_46_fu_742_p2;
wire   [7:0] tmp_47_fu_752_p0;
wire  signed [31:0] tmp_47_fu_752_p1;
wire   [31:0] tmp_47_fu_752_p2;
wire  signed [31:0] tmp3_fu_762_p1;
wire   [31:0] tmp3_fu_762_p2;
wire   [31:0] index_fu_766_p2;
wire  signed [31:0] exitcond1_fu_782_p1;
wire  signed [31:0] exitcond_fu_799_p1;
wire   [63:0] p_Val2_93_fu_816_p1;
wire   [51:0] tmp_V_7_fu_838_p1;
wire   [53:0] mantissa_V_1_fu_842_p4;
wire   [10:0] tmp_V_6_fu_828_p4;
wire   [11:0] tmp_i_i_i_i1_cast1_fu_856_p1;
wire   [11:0] sh_assign_3_fu_860_p2;
wire   [10:0] tmp_i_i_i1_fu_874_p2;
wire   [0:0] isNeg_1_fu_866_p3;
wire  signed [11:0] tmp_i_i_i1_cast_fu_880_p1;
wire   [11:0] ush_1_fu_884_p3;
wire  signed [31:0] sh_assign_9_cast_fu_892_p1;
wire   [53:0] tmp_i_i_i1_cast_62_fu_900_p1;
wire   [136:0] mantissa_V_3_cast_fu_852_p1;
wire   [136:0] tmp_i_i_i1_61_fu_896_p1;
wire   [53:0] r_V_40_fu_904_p2;
wire   [0:0] tmp_74_fu_916_p3;
wire   [136:0] r_V_41_fu_910_p2;
wire   [31:0] tmp_63_fu_924_p1;
wire   [31:0] tmp_64_fu_928_p4;
wire   [31:0] p_Val2_100_fu_938_p3;
wire   [0:0] p_Result_27_fu_820_p3;
wire   [31:0] result_V_3_fu_946_p2;
wire   [31:0] p_Val2_101_fu_952_p3;
wire   [31:0] x1_fu_960_p2;
wire   [31:0] x2_fu_965_p2;
wire   [0:0] or_cond6_fu_982_p2;
reg   [1:0] grp_fu_366_opcode;
wire   [31:0] tmp_47_fu_752_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 135'd1;
#0 grp_pow_generic_double_s_fu_308_ap_start_reg = 1'b0;
#0 grp_pow_generic_double_s_fu_337_ap_start_reg = 1'b0;
end

hls_hough_line_p_ocq #(
    .DataWidth( 32 ),
    .AddressRange( 1089900 ),
    .AddressWidth( 21 ))
p_count_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_count_address0),
    .ce0(p_count_ce0),
    .we0(p_count_we0),
    .d0(p_count_d0),
    .q0(p_count_q0)
);

pow_generic_double_s grp_pow_generic_double_s_fu_308(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_308_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_308_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_308_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_308_ap_ready),
    .ap_ce(1'b1),
    .base_r(reg_378),
    .ap_return(grp_pow_generic_double_s_fu_308_ap_return)
);

pow_generic_double_s grp_pow_generic_double_s_fu_337(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_337_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_337_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_337_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_337_ap_ready),
    .ap_ce(1'b1),
    .base_r(reg_383),
    .ap_return(grp_pow_generic_double_s_fu_337_ap_return)
);

hls_hough_dadddsupcA #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
hls_hough_dadddsupcA_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_388),
    .din1(reg_393),
    .opcode(grp_fu_366_opcode),
    .ce(1'b1),
    .dout(grp_fu_366_p2)
);

hls_hough_sitodp_qcK #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
hls_hough_sitodp_qcK_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_370_p0),
    .ce(1'b1),
    .dout(grp_fu_370_p1)
);

hls_hough_dsqrt_6rcU #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
hls_hough_dsqrt_6rcU_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_398),
    .ce(1'b1),
    .dout(grp_fu_373_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_308_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state85) & (1'b1 == ap_CS_fsm_state84)) | ((1'b1 == ap_NS_fsm_state14) & (1'b1 == ap_CS_fsm_state13)))) begin
            grp_pow_generic_double_s_fu_308_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_308_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_308_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_337_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state85) & (1'b1 == ap_CS_fsm_state84)) | ((1'b1 == ap_NS_fsm_state14) & (1'b1 == ap_CS_fsm_state13)))) begin
            grp_pow_generic_double_s_fu_337_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_337_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_337_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_39_fu_428_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        a_1_reg_251 <= 31'd0;
    end else if (((tmp_44_fu_713_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
        a_1_reg_251 <= a_2_reg_1118;
    end
end

always @ (posedge ap_clk) begin
    if ((~((src_data_stream_V_empty_n == 1'b0) & (tmp_40_fu_443_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state5) & (tmp_43_fu_454_p2 == 1'd1) & (tmp_40_fu_443_p2 == 1'd1))) begin
        a_reg_227 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond3_fu_477_p2 == 1'd1))) begin
        a_reg_227 <= a_3_reg_1061;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state70) & (tmp_41_fu_698_p2 == 1'd1))) begin
        b_1_reg_262 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state72) & (exitcond2_fu_736_p2 == 1'd1))) begin
        b_1_reg_262 <= b_2_reg_1132;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        b_reg_239 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        b_reg_239 <= b_3_reg_1074;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_782_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state80) & (tmp_49_reg_1155 == 1'd1))) begin
        col_1_reg_297 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state135) & (dst_data_stream_V_full_n == 1'b1))) begin
        col_1_reg_297 <= col_3_reg_1175;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_39_fu_428_p2 == 1'd1))) begin
        col_reg_216 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & ((tmp_43_reg_1054 == 1'd0) | (exitcond4_fu_460_p2 == 1'd1)))) begin
        col_reg_216 <= col_2_reg_1049;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) & (exitcond_fu_799_p2 == 1'd1))) begin
        k_reg_285 <= k_1_reg_1162;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        k_reg_285 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (tmp_44_fu_713_p2 == 1'd1))) begin
        radius_reg_273 <= 6'd46;
    end else if (((1'b1 == ap_CS_fsm_state80) & ((tmp_49_reg_1155 == 1'd0) | (exitcond1_fu_782_p2 == 1'd1)))) begin
        radius_reg_273 <= radius_2_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_407_p2 == 1'd1))) begin
        row_1_reg_205 <= 31'd0;
    end else if ((~((src_data_stream_V_empty_n == 1'b0) & (tmp_40_fu_443_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state5) & (tmp_40_fu_443_p2 == 1'd0))) begin
        row_1_reg_205 <= row_3_reg_1036;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_reg_194 <= row_2_reg_1018;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_reg_194 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        a_1_cast_reg_1108[30 : 0] <= a_1_cast_fu_694_p1[30 : 0];
        a_2_reg_1118 <= a_2_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_43_reg_1054 == 1'd1))) begin
        a_3_reg_1061 <= a_3_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        b_1_cast_reg_1123[30 : 0] <= b_1_cast_fu_709_p1[30 : 0];
        b_2_reg_1132 <= b_2_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_3_reg_1074 <= b_3_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((src_data_stream_V_empty_n == 1'b0) & (tmp_40_fu_443_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state5))) begin
        col_2_reg_1049 <= col_2_fu_448_p2;
        col_cast_reg_1041[30 : 0] <= col_cast_fu_439_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        col_3_reg_1175 <= col_3_fu_804_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state80) & (tmp_49_reg_1155 == 1'd1))) begin
        k_1_reg_1162 <= k_1_fu_787_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        p_Val2_99_reg_1084 <= p_Val2_99_fu_630_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        p_count_addr_2_reg_1098 <= tmp_56_fu_682_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        radius_cast2_reg_1137[6 : 0] <= radius_cast2_fu_728_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_378 <= grp_fu_370_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_383 <= grp_fu_370_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state36))) begin
        reg_388 <= grp_pow_generic_double_s_fu_308_ap_return;
        reg_393 <= grp_pow_generic_double_s_fu_337_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state41))) begin
        reg_398 <= grp_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state62))) begin
        reg_403 <= grp_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        row_1_cast_reg_1028[30 : 0] <= row_1_cast_fu_424_p1[30 : 0];
        row_3_reg_1036 <= row_3_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_2_reg_1018 <= row_2_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_736_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state72))) begin
        tmp2_reg_1145 <= tmp2_fu_757_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((src_data_stream_V_empty_n == 1'b0) & (tmp_40_fu_443_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state5) & (tmp_40_fu_443_p2 == 1'd1))) begin
        tmp_43_reg_1054 <= tmp_43_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        tmp_49_reg_1155 <= tmp_49_fu_776_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        tmp_59_reg_1185 <= tmp_59_fu_970_p2;
        tmp_60_reg_1190 <= tmp_60_fu_976_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        tmp_reg_1093 <= tmp_fu_666_p2;
    end
end

always @ (*) begin
    if ((((tmp_41_fu_698_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state70)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_41_fu_698_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state70))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state135)) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state135) & (dst_data_stream_V_full_n == 1'b1))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        grp_fu_366_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_366_opcode = 2'd0;
    end else begin
        grp_fu_366_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_fu_370_p0 = tmp_58_fu_810_p2;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_370_p0 = radius_cast2_reg_1137;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_370_p0 = tmp_50_fu_488_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_370_p0 = tmp_45_fu_471_p2;
    end else begin
        grp_fu_370_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        p_count_address0 = tmp_48_fu_771_p1;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        p_count_address0 = p_count_addr_2_reg_1098;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        p_count_address0 = tmp_56_fu_682_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_count_address0 = tmp_s_fu_419_p1;
    end else begin
        p_count_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state2))) begin
        p_count_ce0 = 1'b1;
    end else begin
        p_count_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        p_count_d0 = tmp_57_fu_687_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_count_d0 = 32'd0;
    end else begin
        p_count_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | ((exitcond5_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        p_count_we0 = 1'b1;
    end else begin
        p_count_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_40_fu_443_p2 == 1'd1))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((src_data_stream_V_empty_n == 1'b0) & (tmp_40_fu_443_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state5) & (tmp_40_fu_443_p2 == 1'd1))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_407_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_39_fu_428_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((src_data_stream_V_empty_n == 1'b0) & (tmp_40_fu_443_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state5) & (tmp_40_fu_443_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((src_data_stream_V_empty_n == 1'b0) & (tmp_40_fu_443_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state5) & (tmp_40_fu_443_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & ((tmp_43_reg_1054 == 1'd0) | (exitcond4_fu_460_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond3_fu_477_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((or_cond_fu_650_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state70 : begin
            if (((tmp_41_fu_698_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((tmp_44_fu_713_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == ap_CS_fsm_state72) & (exitcond2_fu_736_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((tmp_49_fu_776_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if (((1'b1 == ap_CS_fsm_state80) & ((tmp_49_reg_1155 == 1'd0) | (exitcond1_fu_782_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state81 : begin
            if (((1'b1 == ap_CS_fsm_state81) & (exitcond_fu_799_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            if (((1'b1 == ap_CS_fsm_state135) & (dst_data_stream_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_1_cast_fu_694_p1 = a_1_reg_251;

assign a_2_fu_703_p2 = (a_1_reg_251 + 31'd1);

assign a_3_fu_465_p2 = (a_reg_227 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state14 = ap_NS_fsm[32'd13];

assign ap_NS_fsm_state85 = ap_NS_fsm[32'd84];

always @ (*) begin
    ap_block_state5 = ((src_data_stream_V_empty_n == 1'b0) & (tmp_40_fu_443_p2 == 1'd1));
end

assign b_1_cast_fu_709_p1 = b_1_reg_262;

assign b_2_fu_718_p2 = (b_1_reg_262 + 31'd1);

assign b_3_fu_482_p2 = (b_reg_239 + 32'd1);

assign col_2_fu_448_p2 = (col_reg_216 + 31'd1);

assign col_3_fu_804_p2 = (col_1_reg_297 + 32'd1);

assign col_cast_fu_439_p1 = col_reg_216;

assign dst_data_stream_V_din = ((or_cond6_fu_982_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign exitcond1_fu_782_p1 = rows;

assign exitcond1_fu_782_p2 = ((k_reg_285 == exitcond1_fu_782_p1) ? 1'b1 : 1'b0);

assign exitcond2_fu_736_p2 = ((radius_reg_273 == 6'd56) ? 1'b1 : 1'b0);

assign exitcond3_fu_477_p1 = cols;

assign exitcond3_fu_477_p2 = ((b_reg_239 == exitcond3_fu_477_p1) ? 1'b1 : 1'b0);

assign exitcond4_fu_460_p1 = rows;

assign exitcond4_fu_460_p2 = ((a_reg_227 == exitcond4_fu_460_p1) ? 1'b1 : 1'b0);

assign exitcond5_fu_407_p2 = ((row_reg_194 == 21'd1089900) ? 1'b1 : 1'b0);

assign exitcond_fu_799_p1 = cols;

assign exitcond_fu_799_p2 = ((col_1_reg_297 == exitcond_fu_799_p1) ? 1'b1 : 1'b0);

assign grp_pow_generic_double_s_fu_308_ap_start = grp_pow_generic_double_s_fu_308_ap_start_reg;

assign grp_pow_generic_double_s_fu_337_ap_start = grp_pow_generic_double_s_fu_337_ap_start_reg;

assign index_1_fu_676_p2 = (tmp4_fu_672_p2 + a_reg_227);

assign index_fu_766_p2 = (tmp3_fu_762_p2 + a_1_cast_reg_1108);

assign isNeg_1_fu_866_p3 = sh_assign_3_fu_860_p2[32'd11];

assign isNeg_fu_544_p3 = sh_assign_fu_538_p2[32'd11];

assign k_1_fu_787_p2 = (k_reg_285 + 32'd1);

assign mantissa_V_1_cast_fu_530_p1 = mantissa_V_fu_520_p4;

assign mantissa_V_1_fu_842_p4 = {{{{1'd1}, {tmp_V_7_fu_838_p1}}}, {1'd0}};

assign mantissa_V_3_cast_fu_852_p1 = mantissa_V_1_fu_842_p4;

assign mantissa_V_fu_520_p4 = {{{{1'd1}, {tmp_V_5_fu_516_p1}}}, {1'd0}};

assign or_cond6_fu_982_p2 = (tmp_60_reg_1190 | tmp_59_reg_1185);

assign or_cond_fu_650_p2 = (tmp_53_fu_644_p2 & tmp_52_fu_638_p2);

assign p_Result_27_fu_820_p3 = p_Val2_93_fu_816_p1[32'd63];

assign p_Result_s_fu_498_p3 = p_Val2_s_fu_494_p1[32'd63];

assign p_Val2_100_fu_938_p3 = ((isNeg_1_fu_866_p3[0:0] === 1'b1) ? tmp_63_fu_924_p1 : tmp_64_fu_928_p4);

assign p_Val2_101_fu_952_p3 = ((p_Result_27_fu_820_p3[0:0] === 1'b1) ? result_V_3_fu_946_p2 : p_Val2_100_fu_938_p3);

assign p_Val2_93_fu_816_p1 = reg_403;

assign p_Val2_98_fu_616_p3 = ((isNeg_fu_544_p3[0:0] === 1'b1) ? tmp_51_fu_602_p1 : tmp_62_fu_606_p4);

assign p_Val2_99_fu_630_p3 = ((p_Result_s_fu_498_p3[0:0] === 1'b1) ? result_V_1_fu_624_p2 : p_Val2_98_fu_616_p3);

assign p_Val2_s_fu_494_p1 = reg_403;

assign r_V_39_fu_588_p2 = mantissa_V_1_cast_fu_530_p1 << tmp_i_i_i_59_fu_574_p1;

assign r_V_40_fu_904_p2 = mantissa_V_1_fu_842_p4 >> tmp_i_i_i1_cast_62_fu_900_p1;

assign r_V_41_fu_910_p2 = mantissa_V_3_cast_fu_852_p1 << tmp_i_i_i1_61_fu_896_p1;

assign r_V_fu_582_p2 = mantissa_V_fu_520_p4 >> tmp_i_i_i_cast_60_fu_578_p1;

assign radius_2_fu_793_p2 = ($signed(radius_reg_273) + $signed(6'd1));

assign radius_cast2_fu_728_p1 = $unsigned(radius_cast5_fu_724_p1);

assign radius_cast5_fu_724_p1 = radius_reg_273;

assign radius_cast_fu_732_p1 = $unsigned(radius_cast5_fu_724_p1);

assign result_V_1_fu_624_p2 = (32'd0 - p_Val2_98_fu_616_p3);

assign result_V_3_fu_946_p2 = (32'd0 - p_Val2_100_fu_938_p3);

assign row_1_cast_fu_424_p1 = row_1_reg_205;

assign row_2_fu_413_p2 = (row_reg_194 + 21'd1);

assign row_3_fu_433_p2 = (row_1_reg_205 + 31'd1);

assign sh_assign_3_fu_860_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i1_cast1_fu_856_p1));

assign sh_assign_6_cast_fu_570_p1 = $signed(ush_fu_562_p3);

assign sh_assign_9_cast_fu_892_p1 = $signed(ush_1_fu_884_p3);

assign sh_assign_fu_538_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast3_fu_534_p1));

assign tmp2_fu_757_p2 = (tmp_47_fu_752_p2 + b_1_cast_reg_1123);

assign tmp3_fu_762_p1 = rows;

assign tmp3_fu_762_p2 = ($signed(tmp2_reg_1145) * $signed(tmp3_fu_762_p1));

assign tmp4_fu_672_p1 = rows;

assign tmp4_fu_672_p2 = ($signed(tmp_reg_1093) * $signed(tmp4_fu_672_p1));

assign tmp_39_fu_428_p1 = rows;

assign tmp_39_fu_428_p2 = (($signed(row_1_cast_fu_424_p1) < $signed(tmp_39_fu_428_p1)) ? 1'b1 : 1'b0);

assign tmp_40_fu_443_p1 = cols;

assign tmp_40_fu_443_p2 = (($signed(col_cast_fu_439_p1) < $signed(tmp_40_fu_443_p1)) ? 1'b1 : 1'b0);

assign tmp_41_fu_698_p1 = rows;

assign tmp_41_fu_698_p2 = (($signed(a_1_cast_fu_694_p1) < $signed(tmp_41_fu_698_p1)) ? 1'b1 : 1'b0);

assign tmp_43_fu_454_p2 = ((src_data_stream_V_dout == 8'd0) ? 1'b1 : 1'b0);

assign tmp_44_fu_713_p1 = cols;

assign tmp_44_fu_713_p2 = (($signed(b_1_cast_fu_709_p1) < $signed(tmp_44_fu_713_p1)) ? 1'b1 : 1'b0);

assign tmp_45_fu_471_p2 = (row_1_cast_reg_1028 - a_reg_227);

assign tmp_46_fu_742_p2 = ($signed(radius_cast_fu_732_p1) + $signed(8'd146));

assign tmp_47_fu_752_p0 = tmp_47_fu_752_p00;

assign tmp_47_fu_752_p00 = tmp_46_fu_742_p2;

assign tmp_47_fu_752_p1 = cols;

assign tmp_47_fu_752_p2 = ($signed({{1'b0}, {tmp_47_fu_752_p0}}) * $signed(tmp_47_fu_752_p1));

assign tmp_48_fu_771_p1 = $signed(index_fu_766_p2);

assign tmp_49_fu_776_p2 = (($signed(p_count_q0) > $signed(32'd210)) ? 1'b1 : 1'b0);

assign tmp_50_fu_488_p2 = (col_cast_reg_1041 - b_reg_239);

assign tmp_51_fu_602_p1 = tmp_70_fu_594_p3;

assign tmp_52_fu_638_p2 = (($signed(p_Val2_99_fu_630_p3) > $signed(32'd110)) ? 1'b1 : 1'b0);

assign tmp_53_fu_644_p2 = (($signed(p_Val2_99_fu_630_p3) < $signed(32'd120)) ? 1'b1 : 1'b0);

assign tmp_54_fu_656_p2 = ($signed(p_Val2_99_reg_1084) + $signed(32'd4294967186));

assign tmp_55_fu_661_p1 = cols;

assign tmp_55_fu_661_p2 = ($signed(tmp_54_fu_656_p2) * $signed(tmp_55_fu_661_p1));

assign tmp_56_fu_682_p1 = $signed(index_1_fu_676_p2);

assign tmp_57_fu_687_p2 = (p_count_q0 + 32'd1);

assign tmp_58_fu_810_p2 = (col_1_reg_297 - b_1_cast_reg_1123);

assign tmp_59_fu_970_p2 = ((k_reg_285 == x1_fu_960_p2) ? 1'b1 : 1'b0);

assign tmp_60_fu_976_p2 = ((k_reg_285 == x2_fu_965_p2) ? 1'b1 : 1'b0);

assign tmp_62_fu_606_p4 = {{r_V_39_fu_588_p2[84:53]}};

assign tmp_63_fu_924_p1 = tmp_74_fu_916_p3;

assign tmp_64_fu_928_p4 = {{r_V_41_fu_910_p2[84:53]}};

assign tmp_70_fu_594_p3 = r_V_fu_582_p2[32'd53];

assign tmp_74_fu_916_p3 = r_V_40_fu_904_p2[32'd53];

assign tmp_V_5_fu_516_p1 = p_Val2_s_fu_494_p1[51:0];

assign tmp_V_6_fu_828_p4 = {{p_Val2_93_fu_816_p1[62:52]}};

assign tmp_V_7_fu_838_p1 = p_Val2_93_fu_816_p1[51:0];

assign tmp_V_fu_506_p4 = {{p_Val2_s_fu_494_p1[62:52]}};

assign tmp_fu_666_p2 = (tmp_55_fu_661_p2 + b_reg_239);

assign tmp_i_i_i1_61_fu_896_p1 = $unsigned(sh_assign_9_cast_fu_892_p1);

assign tmp_i_i_i1_cast_62_fu_900_p1 = $unsigned(sh_assign_9_cast_fu_892_p1);

assign tmp_i_i_i1_cast_fu_880_p1 = $signed(tmp_i_i_i1_fu_874_p2);

assign tmp_i_i_i1_fu_874_p2 = (11'd1023 - tmp_V_6_fu_828_p4);

assign tmp_i_i_i_59_fu_574_p1 = $unsigned(sh_assign_6_cast_fu_570_p1);

assign tmp_i_i_i_cast_60_fu_578_p1 = $unsigned(sh_assign_6_cast_fu_570_p1);

assign tmp_i_i_i_cast_fu_558_p1 = $signed(tmp_i_i_i_fu_552_p2);

assign tmp_i_i_i_fu_552_p2 = (11'd1023 - tmp_V_fu_506_p4);

assign tmp_i_i_i_i1_cast1_fu_856_p1 = tmp_V_6_fu_828_p4;

assign tmp_i_i_i_i_cast3_fu_534_p1 = tmp_V_fu_506_p4;

assign tmp_s_fu_419_p1 = row_reg_194;

assign ush_1_fu_884_p3 = ((isNeg_1_fu_866_p3[0:0] === 1'b1) ? tmp_i_i_i1_cast_fu_880_p1 : sh_assign_3_fu_860_p2);

assign ush_fu_562_p3 = ((isNeg_fu_544_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_558_p1 : sh_assign_fu_538_p2);

assign x1_fu_960_p2 = (a_1_cast_reg_1108 + p_Val2_101_fu_952_p3);

assign x2_fu_965_p2 = (a_1_cast_reg_1108 - p_Val2_101_fu_952_p3);

always @ (posedge ap_clk) begin
    row_1_cast_reg_1028[31] <= 1'b0;
    col_cast_reg_1041[31] <= 1'b0;
    a_1_cast_reg_1108[31] <= 1'b0;
    b_1_cast_reg_1123[31] <= 1'b0;
    radius_cast2_reg_1137[31:7] <= 25'b0000000000000000000000000;
end

endmodule //hls_hough_line
