-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_hough is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_axi_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_axi_V_data_V_empty_n : IN STD_LOGIC;
    src_axi_V_data_V_read : OUT STD_LOGIC;
    src_axi_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    src_axi_V_keep_V_empty_n : IN STD_LOGIC;
    src_axi_V_keep_V_read : OUT STD_LOGIC;
    src_axi_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    src_axi_V_strb_V_empty_n : IN STD_LOGIC;
    src_axi_V_strb_V_read : OUT STD_LOGIC;
    src_axi_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    src_axi_V_user_V_empty_n : IN STD_LOGIC;
    src_axi_V_user_V_read : OUT STD_LOGIC;
    src_axi_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    src_axi_V_last_V_empty_n : IN STD_LOGIC;
    src_axi_V_last_V_read : OUT STD_LOGIC;
    src_axi_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    src_axi_V_id_V_empty_n : IN STD_LOGIC;
    src_axi_V_id_V_read : OUT STD_LOGIC;
    src_axi_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    src_axi_V_dest_V_empty_n : IN STD_LOGIC;
    src_axi_V_dest_V_read : OUT STD_LOGIC;
    dst_axi_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_axi_V_data_V_full_n : IN STD_LOGIC;
    dst_axi_V_data_V_write : OUT STD_LOGIC;
    dst_axi_V_keep_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_axi_V_keep_V_full_n : IN STD_LOGIC;
    dst_axi_V_keep_V_write : OUT STD_LOGIC;
    dst_axi_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_axi_V_strb_V_full_n : IN STD_LOGIC;
    dst_axi_V_strb_V_write : OUT STD_LOGIC;
    dst_axi_V_user_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_axi_V_user_V_full_n : IN STD_LOGIC;
    dst_axi_V_user_V_write : OUT STD_LOGIC;
    dst_axi_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_axi_V_last_V_full_n : IN STD_LOGIC;
    dst_axi_V_last_V_write : OUT STD_LOGIC;
    dst_axi_V_id_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_axi_V_id_V_full_n : IN STD_LOGIC;
    dst_axi_V_id_V_write : OUT STD_LOGIC;
    dst_axi_V_dest_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_axi_V_dest_V_full_n : IN STD_LOGIC;
    dst_axi_V_dest_V_write : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hls_hough is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_hough,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flvd1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2000,HLS_SYN_DSP=76,HLS_SYN_FF=14007,HLS_SYN_LUT=18493,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dst_axi_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_reg_384 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_axi_V_keep_V_blk_n : STD_LOGIC;
    signal dst_axi_V_strb_V_blk_n : STD_LOGIC;
    signal dst_axi_V_user_V_blk_n : STD_LOGIC;
    signal dst_axi_V_last_V_blk_n : STD_LOGIC;
    signal dst_axi_V_id_V_blk_n : STD_LOGIC;
    signal dst_axi_V_dest_V_blk_n : STD_LOGIC;
    signal t_V_2_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_281_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_reg_370 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_hls_hough_line_fu_218_ap_ready : STD_LOGIC;
    signal grp_hls_hough_line_fu_218_ap_done : STD_LOGIC;
    signal exitcond1_i_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_V_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal img_dst_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_dst_data_stream_s_empty_n : STD_LOGIC;
    signal img_dst_data_stream_s_read : STD_LOGIC;
    signal dst_axi_V_id_V1_status : STD_LOGIC;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_V_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal axi_last_V_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal grp_hls_hough_line_fu_218_ap_start : STD_LOGIC;
    signal grp_hls_hough_line_fu_218_ap_idle : STD_LOGIC;
    signal grp_hls_hough_line_fu_218_src_data_stream_V_read : STD_LOGIC;
    signal grp_hls_hough_line_fu_218_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_hls_hough_line_fu_218_dst_data_stream_V_write : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_ap_start : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_ap_done : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_ap_idle : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_ap_ready : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AXIvideo2Mat_fu_250_img_data_stream_V_write : STD_LOGIC;
    signal t_V_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_hls_hough_line_fu_218_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal img_src_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_src_data_stream_s_empty_n : STD_LOGIC;
    signal img_src_data_stream_s_read : STD_LOGIC;
    signal img_dst_data_stream_s_full_n : STD_LOGIC;
    signal img_dst_data_stream_s_write : STD_LOGIC;
    signal grp_AXIvideo2Mat_fu_250_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal img_src_data_stream_s_full_n : STD_LOGIC;
    signal img_src_data_stream_s_write : STD_LOGIC;
    signal dst_axi_V_id_V1_update : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_user_V_fu_138 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_cast_fu_278_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_i_cast_fu_309_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component hls_hough_line IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AXI_video_strm_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        AXI_video_strm_V_data_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_data_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_keep_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_keep_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_strb_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_strb_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_user_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_user_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_last_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_last_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_id_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_id_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_dest_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_dest_V_read : OUT STD_LOGIC;
        img_rows_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w8_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_hls_hough_line_fu_218 : component hls_hough_line
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hls_hough_line_fu_218_ap_start,
        ap_done => grp_hls_hough_line_fu_218_ap_done,
        ap_idle => grp_hls_hough_line_fu_218_ap_idle,
        ap_ready => grp_hls_hough_line_fu_218_ap_ready,
        src_data_stream_V_dout => img_src_data_stream_s_dout,
        src_data_stream_V_empty_n => img_src_data_stream_s_empty_n,
        src_data_stream_V_read => grp_hls_hough_line_fu_218_src_data_stream_V_read,
        dst_data_stream_V_din => grp_hls_hough_line_fu_218_dst_data_stream_V_din,
        dst_data_stream_V_full_n => img_dst_data_stream_s_full_n,
        dst_data_stream_V_write => grp_hls_hough_line_fu_218_dst_data_stream_V_write,
        rows => rows,
        cols => cols);

    grp_AXIvideo2Mat_fu_250 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AXIvideo2Mat_fu_250_ap_start,
        ap_done => grp_AXIvideo2Mat_fu_250_ap_done,
        ap_idle => grp_AXIvideo2Mat_fu_250_ap_idle,
        ap_ready => grp_AXIvideo2Mat_fu_250_ap_ready,
        AXI_video_strm_V_data_V_dout => src_axi_V_data_V_dout,
        AXI_video_strm_V_data_V_empty_n => src_axi_V_data_V_empty_n,
        AXI_video_strm_V_data_V_read => grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read,
        AXI_video_strm_V_keep_V_dout => src_axi_V_keep_V_dout,
        AXI_video_strm_V_keep_V_empty_n => src_axi_V_keep_V_empty_n,
        AXI_video_strm_V_keep_V_read => grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read,
        AXI_video_strm_V_strb_V_dout => src_axi_V_strb_V_dout,
        AXI_video_strm_V_strb_V_empty_n => src_axi_V_strb_V_empty_n,
        AXI_video_strm_V_strb_V_read => grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read,
        AXI_video_strm_V_user_V_dout => src_axi_V_user_V_dout,
        AXI_video_strm_V_user_V_empty_n => src_axi_V_user_V_empty_n,
        AXI_video_strm_V_user_V_read => grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read,
        AXI_video_strm_V_last_V_dout => src_axi_V_last_V_dout,
        AXI_video_strm_V_last_V_empty_n => src_axi_V_last_V_empty_n,
        AXI_video_strm_V_last_V_read => grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read,
        AXI_video_strm_V_id_V_dout => src_axi_V_id_V_dout,
        AXI_video_strm_V_id_V_empty_n => src_axi_V_id_V_empty_n,
        AXI_video_strm_V_id_V_read => grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read,
        AXI_video_strm_V_dest_V_dout => src_axi_V_dest_V_dout,
        AXI_video_strm_V_dest_V_empty_n => src_axi_V_dest_V_empty_n,
        AXI_video_strm_V_dest_V_read => grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read,
        img_rows_V_read => rows,
        img_cols_V_read => cols,
        img_data_stream_V_din => grp_AXIvideo2Mat_fu_250_img_data_stream_V_din,
        img_data_stream_V_full_n => img_src_data_stream_s_full_n,
        img_data_stream_V_write => grp_AXIvideo2Mat_fu_250_img_data_stream_V_write);

    img_src_data_stream_s_fifo_U : component fifo_w8_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_AXIvideo2Mat_fu_250_img_data_stream_V_din,
        if_full_n => img_src_data_stream_s_full_n,
        if_write => img_src_data_stream_s_write,
        if_dout => img_src_data_stream_s_dout,
        if_empty_n => img_src_data_stream_s_empty_n,
        if_read => img_src_data_stream_s_read);

    img_dst_data_stream_s_fifo_U : component fifo_w8_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_hls_hough_line_fu_218_dst_data_stream_V_din,
        if_full_n => img_dst_data_stream_s_full_n,
        if_write => img_dst_data_stream_s_write,
        if_dout => img_dst_data_stream_s_dout,
        if_empty_n => img_dst_data_stream_s_empty_n,
        if_read => img_dst_data_stream_s_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_i_fu_287_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_i_fu_287_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AXIvideo2Mat_fu_250_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AXIvideo2Mat_fu_250_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_AXIvideo2Mat_fu_250_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AXIvideo2Mat_fu_250_ap_ready = ap_const_logic_1)) then 
                    grp_AXIvideo2Mat_fu_250_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hls_hough_line_fu_218_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hls_hough_line_fu_218_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_hls_hough_line_fu_218_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hls_hough_line_fu_218_ap_ready = ap_const_logic_1)) then 
                    grp_hls_hough_line_fu_218_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_2_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_i_fu_298_p2 = ap_const_lv1_0))) then 
                t_V_2_reg_207 <= j_V_fu_303_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_i_fu_287_p2 = ap_const_lv1_0))) then 
                t_V_2_reg_207 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                t_V_reg_196 <= i_V_reg_379;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_hls_hough_line_fu_218_ap_done = ap_const_logic_1))) then 
                t_V_reg_196 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_user_V_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_384 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_user_V_fu_138 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                tmp_user_V_fu_138 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_i_fu_298_p2 = ap_const_lv1_0))) then
                axi_last_V_reg_393 <= axi_last_V_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_i_reg_384 <= exitcond_i_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_V_reg_379 <= i_V_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_hls_hough_line_fu_218_ap_done = ap_const_logic_1))) then
                ret_V_reg_370 <= ret_V_fu_281_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, grp_hls_hough_line_fu_218_ap_done, exitcond1_i_fu_287_p2, ap_CS_fsm_state5, exitcond_i_fu_298_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, grp_AXIvideo2Mat_fu_250_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_AXIvideo2Mat_fu_250_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_hls_hough_line_fu_218_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_i_fu_287_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_fu_298_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_fu_298_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_i_reg_384, img_dst_data_stream_s_empty_n, dst_axi_V_id_V1_status)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_384 = ap_const_lv1_0) and (dst_axi_V_id_V1_status = ap_const_logic_0)) or ((exitcond_i_reg_384 = ap_const_lv1_0) and (img_dst_data_stream_s_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_i_reg_384, img_dst_data_stream_s_empty_n, dst_axi_V_id_V1_status)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_384 = ap_const_lv1_0) and (dst_axi_V_id_V1_status = ap_const_logic_0)) or ((exitcond_i_reg_384 = ap_const_lv1_0) and (img_dst_data_stream_s_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_i_reg_384, img_dst_data_stream_s_empty_n, dst_axi_V_id_V1_status)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i_reg_384 = ap_const_lv1_0) and (dst_axi_V_id_V1_status = ap_const_logic_0)) or ((exitcond_i_reg_384 = ap_const_lv1_0) and (img_dst_data_stream_s_empty_n = ap_const_logic_0))));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter1_assign_proc : process(exitcond_i_reg_384, img_dst_data_stream_s_empty_n, dst_axi_V_id_V1_status)
    begin
                ap_block_state7_pp0_stage0_iter1 <= (((exitcond_i_reg_384 = ap_const_lv1_0) and (dst_axi_V_id_V1_status = ap_const_logic_0)) or ((exitcond_i_reg_384 = ap_const_lv1_0) and (img_dst_data_stream_s_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state6_assign_proc : process(exitcond_i_fu_298_p2)
    begin
        if ((exitcond_i_fu_298_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(exitcond1_i_fu_287_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_i_fu_287_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond1_i_fu_287_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_i_fu_287_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    axi_last_V_fu_313_p2 <= "1" when (tmp_i_cast_fu_309_p1 = ret_V_reg_370) else "0";

    dst_axi_V_data_V_blk_n_assign_proc : process(dst_axi_V_data_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_384)
    begin
        if (((exitcond_i_reg_384 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_axi_V_data_V_blk_n <= dst_axi_V_data_V_full_n;
        else 
            dst_axi_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_axi_V_data_V_din <= (ap_const_lv24_FFFFFF & img_dst_data_stream_s_dout);
    dst_axi_V_data_V_write <= dst_axi_V_id_V1_update;

    dst_axi_V_dest_V_blk_n_assign_proc : process(dst_axi_V_dest_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_384)
    begin
        if (((exitcond_i_reg_384 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_axi_V_dest_V_blk_n <= dst_axi_V_dest_V_full_n;
        else 
            dst_axi_V_dest_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_axi_V_dest_V_din <= ap_const_lv1_0;
    dst_axi_V_dest_V_write <= dst_axi_V_id_V1_update;
    dst_axi_V_id_V1_status <= (dst_axi_V_user_V_full_n and dst_axi_V_strb_V_full_n and dst_axi_V_last_V_full_n and dst_axi_V_keep_V_full_n and dst_axi_V_id_V_full_n and dst_axi_V_dest_V_full_n and dst_axi_V_data_V_full_n);

    dst_axi_V_id_V1_update_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_384, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_384 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_axi_V_id_V1_update <= ap_const_logic_1;
        else 
            dst_axi_V_id_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    dst_axi_V_id_V_blk_n_assign_proc : process(dst_axi_V_id_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_384)
    begin
        if (((exitcond_i_reg_384 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_axi_V_id_V_blk_n <= dst_axi_V_id_V_full_n;
        else 
            dst_axi_V_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_axi_V_id_V_din <= ap_const_lv1_0;
    dst_axi_V_id_V_write <= dst_axi_V_id_V1_update;

    dst_axi_V_keep_V_blk_n_assign_proc : process(dst_axi_V_keep_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_384)
    begin
        if (((exitcond_i_reg_384 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_axi_V_keep_V_blk_n <= dst_axi_V_keep_V_full_n;
        else 
            dst_axi_V_keep_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_axi_V_keep_V_din <= ap_const_lv4_F;
    dst_axi_V_keep_V_write <= dst_axi_V_id_V1_update;

    dst_axi_V_last_V_blk_n_assign_proc : process(dst_axi_V_last_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_384)
    begin
        if (((exitcond_i_reg_384 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_axi_V_last_V_blk_n <= dst_axi_V_last_V_full_n;
        else 
            dst_axi_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_axi_V_last_V_din <= axi_last_V_reg_393;
    dst_axi_V_last_V_write <= dst_axi_V_id_V1_update;

    dst_axi_V_strb_V_blk_n_assign_proc : process(dst_axi_V_strb_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_384)
    begin
        if (((exitcond_i_reg_384 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_axi_V_strb_V_blk_n <= dst_axi_V_strb_V_full_n;
        else 
            dst_axi_V_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_axi_V_strb_V_din <= ap_const_lv4_0;
    dst_axi_V_strb_V_write <= dst_axi_V_id_V1_update;

    dst_axi_V_user_V_blk_n_assign_proc : process(dst_axi_V_user_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_384)
    begin
        if (((exitcond_i_reg_384 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_axi_V_user_V_blk_n <= dst_axi_V_user_V_full_n;
        else 
            dst_axi_V_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_axi_V_user_V_din <= tmp_user_V_fu_138;
    dst_axi_V_user_V_write <= dst_axi_V_id_V1_update;
    exitcond1_i_fu_287_p2 <= "1" when (t_V_reg_196 = rows) else "0";
    exitcond_i_fu_298_p2 <= "1" when (t_V_2_reg_207 = cols) else "0";
    grp_AXIvideo2Mat_fu_250_ap_start <= grp_AXIvideo2Mat_fu_250_ap_start_reg;
    grp_hls_hough_line_fu_218_ap_start <= grp_hls_hough_line_fu_218_ap_start_reg;
    i_V_fu_292_p2 <= std_logic_vector(unsigned(t_V_reg_196) + unsigned(ap_const_lv32_1));

    img_dst_data_stream_s_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_384, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_384 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_dst_data_stream_s_read <= ap_const_logic_1;
        else 
            img_dst_data_stream_s_read <= ap_const_logic_0;
        end if; 
    end process;


    img_dst_data_stream_s_write_assign_proc : process(ap_CS_fsm_state4, grp_hls_hough_line_fu_218_dst_data_stream_V_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_dst_data_stream_s_write <= grp_hls_hough_line_fu_218_dst_data_stream_V_write;
        else 
            img_dst_data_stream_s_write <= ap_const_logic_0;
        end if; 
    end process;


    img_src_data_stream_s_read_assign_proc : process(ap_CS_fsm_state4, grp_hls_hough_line_fu_218_src_data_stream_V_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_src_data_stream_s_read <= grp_hls_hough_line_fu_218_src_data_stream_V_read;
        else 
            img_src_data_stream_s_read <= ap_const_logic_0;
        end if; 
    end process;


    img_src_data_stream_s_write_assign_proc : process(grp_AXIvideo2Mat_fu_250_img_data_stream_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_src_data_stream_s_write <= grp_AXIvideo2Mat_fu_250_img_data_stream_V_write;
        else 
            img_src_data_stream_s_write <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_303_p2 <= std_logic_vector(unsigned(t_V_2_reg_207) + unsigned(ap_const_lv32_1));
    lhs_V_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols),33));
    ret_V_fu_281_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_278_p1) + unsigned(ap_const_lv33_1FFFFFFFF));

    src_axi_V_data_V_read_assign_proc : process(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_axi_V_data_V_read <= grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read;
        else 
            src_axi_V_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_axi_V_dest_V_read_assign_proc : process(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_axi_V_dest_V_read <= grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read;
        else 
            src_axi_V_dest_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_axi_V_id_V_read_assign_proc : process(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_axi_V_id_V_read <= grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read;
        else 
            src_axi_V_id_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_axi_V_keep_V_read_assign_proc : process(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_axi_V_keep_V_read <= grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read;
        else 
            src_axi_V_keep_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_axi_V_last_V_read_assign_proc : process(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_axi_V_last_V_read <= grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read;
        else 
            src_axi_V_last_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_axi_V_strb_V_read_assign_proc : process(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_axi_V_strb_V_read <= grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read;
        else 
            src_axi_V_strb_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_axi_V_user_V_read_assign_proc : process(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_axi_V_user_V_read <= grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read;
        else 
            src_axi_V_user_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_2_reg_207),33));
end behav;
