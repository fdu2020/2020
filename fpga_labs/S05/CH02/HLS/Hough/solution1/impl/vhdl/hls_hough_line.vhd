-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_hough_line is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hls_hough_line is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (134 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (134 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (134 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (134 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (134 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (134 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (134 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (134 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (134 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (134 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (134 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (134 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (134 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv21_10A16C : STD_LOGIC_VECTOR (20 downto 0) := "100001010000101101100";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_FFFFFF92 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110010010";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv8_92 : STD_LOGIC_VECTOR (7 downto 0) := "10010010";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (134 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_40_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal grp_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_378 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal reg_383 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_pow_generic_double_s_fu_308_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_388 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal grp_pow_generic_double_s_fu_337_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_393 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_398 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_403 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal row_2_fu_413_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal row_2_reg_1018 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond5_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_1_cast_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_1_cast_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal row_3_fu_433_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_3_reg_1036 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_cast_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_cast_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal col_2_fu_448_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_2_reg_1049 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_43_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_reg_1054 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_3_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_45_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_3_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_3_reg_1074 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_50_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_99_fu_630_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_99_reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal or_cond_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1093 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal p_count_addr_2_reg_1098 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_57_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal a_1_cast_fu_694_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_cast_reg_1108 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal a_2_fu_703_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal a_2_reg_1118 : STD_LOGIC_VECTOR (30 downto 0);
    signal b_1_cast_fu_709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_cast_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal b_2_fu_718_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal b_2_reg_1132 : STD_LOGIC_VECTOR (30 downto 0);
    signal radius_cast2_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal radius_cast2_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal tmp2_fu_757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1145 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal tmp_49_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_reg_1155 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal k_1_fu_787_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal radius_2_fu_793_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_3_fu_804_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_3_reg_1175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal tmp_58_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_1185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal tmp_60_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_reg_1190 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_count_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_count_ce0 : STD_LOGIC;
    signal p_count_we0 : STD_LOGIC;
    signal p_count_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_count_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pow_generic_double_s_fu_308_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_308_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_308_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_308_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_337_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_337_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_337_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_337_ap_ready : STD_LOGIC;
    signal row_reg_194 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal row_1_reg_205 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_reg_216 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_39_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal a_1_reg_251 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_44_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_1_reg_262 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_41_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal radius_reg_273 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_1_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pow_generic_double_s_fu_308_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (134 downto 0);
    signal ap_NS_fsm_state14 : STD_LOGIC;
    signal ap_NS_fsm_state85 : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal grp_pow_generic_double_s_fu_337_ap_start_reg : STD_LOGIC := '0';
    signal tmp_s_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal grp_fu_370_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal tmp_39_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_5_fu_516_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_520_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_506_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast3_fu_534_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_538_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_fu_552_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_544_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_558_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_562_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_6_cast_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_cast_60_fu_578_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_1_cast_fu_530_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i_59_fu_574_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_582_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_70_fu_594_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_39_fu_588_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_51_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_606_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_98_fu_616_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_1_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_656_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_661_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_672_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_1_fu_676_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_713_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal radius_cast5_fu_724_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal radius_cast_fu_732_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_752_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_752_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_762_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_fu_766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_93_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_7_fu_838_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_1_fu_842_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_6_fu_828_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i1_cast1_fu_856_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_fu_860_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i1_fu_874_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_866_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i1_cast_fu_880_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_884_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_9_cast_fu_892_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i1_cast_62_fu_900_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_3_cast_fu_852_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i1_61_fu_896_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_40_fu_904_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_74_fu_916_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_41_fu_910_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_63_fu_924_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_fu_928_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_100_fu_938_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_27_fu_820_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_3_fu_946_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_101_fu_952_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_fu_960_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_fu_965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond6_fu_982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_366_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_47_fu_752_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component pow_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hls_hough_dadddsupcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hls_hough_sitodp_qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hls_hough_dsqrt_6rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hls_hough_line_p_ocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    p_count_U : component hls_hough_line_p_ocq
    generic map (
        DataWidth => 32,
        AddressRange => 1089900,
        AddressWidth => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_count_address0,
        ce0 => p_count_ce0,
        we0 => p_count_we0,
        d0 => p_count_d0,
        q0 => p_count_q0);

    grp_pow_generic_double_s_fu_308 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_308_ap_start,
        ap_done => grp_pow_generic_double_s_fu_308_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_308_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_308_ap_ready,
        ap_ce => ap_const_logic_1,
        base_r => reg_378,
        ap_return => grp_pow_generic_double_s_fu_308_ap_return);

    grp_pow_generic_double_s_fu_337 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_337_ap_start,
        ap_done => grp_pow_generic_double_s_fu_337_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_337_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_337_ap_ready,
        ap_ce => ap_const_logic_1,
        base_r => reg_383,
        ap_return => grp_pow_generic_double_s_fu_337_ap_return);

    hls_hough_dadddsupcA_U26 : component hls_hough_dadddsupcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_388,
        din1 => reg_393,
        opcode => grp_fu_366_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_366_p2);

    hls_hough_sitodp_qcK_U27 : component hls_hough_sitodp_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_370_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_370_p1);

    hls_hough_dsqrt_6rcU_U28 : component hls_hough_dsqrt_6rcU
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => reg_398,
        ce => ap_const_logic_1,
        dout => grp_fu_373_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_308_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_308_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state85) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((ap_const_logic_1 = ap_NS_fsm_state14) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
                    grp_pow_generic_double_s_fu_308_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_308_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_308_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_337_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_337_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state85) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((ap_const_logic_1 = ap_NS_fsm_state14) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
                    grp_pow_generic_double_s_fu_337_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_337_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_337_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_1_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_39_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                a_1_reg_251 <= ap_const_lv31_0;
            elsif (((tmp_44_fu_713_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                a_1_reg_251 <= a_2_reg_1118;
            end if; 
        end if;
    end process;

    a_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((src_data_stream_V_empty_n = ap_const_logic_0) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_43_fu_454_p2 = ap_const_lv1_1) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) then 
                a_reg_227 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond3_fu_477_p2 = ap_const_lv1_1))) then 
                a_reg_227 <= a_3_reg_1061;
            end if; 
        end if;
    end process;

    b_1_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state70) and (tmp_41_fu_698_p2 = ap_const_lv1_1))) then 
                b_1_reg_262 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state72) and (exitcond2_fu_736_p2 = ap_const_lv1_1))) then 
                b_1_reg_262 <= b_2_reg_1132;
            end if; 
        end if;
    end process;

    b_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                b_reg_239 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                b_reg_239 <= b_3_reg_1074;
            end if; 
        end if;
    end process;

    col_1_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_782_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80) and (tmp_49_reg_1155 = ap_const_lv1_1))) then 
                col_1_reg_297 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state135) and (dst_data_stream_V_full_n = ap_const_logic_1))) then 
                col_1_reg_297 <= col_3_reg_1175;
            end if; 
        end if;
    end process;

    col_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_39_fu_428_p2 = ap_const_lv1_1))) then 
                col_reg_216 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and ((tmp_43_reg_1054 = ap_const_lv1_0) or (exitcond4_fu_460_p2 = ap_const_lv1_1)))) then 
                col_reg_216 <= col_2_reg_1049;
            end if; 
        end if;
    end process;

    k_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) and (exitcond_fu_799_p2 = ap_const_lv1_1))) then 
                k_reg_285 <= k_1_reg_1162;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                k_reg_285 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    radius_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state71) and (tmp_44_fu_713_p2 = ap_const_lv1_1))) then 
                radius_reg_273 <= ap_const_lv6_2E;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state80) and ((tmp_49_reg_1155 = ap_const_lv1_0) or (exitcond1_fu_782_p2 = ap_const_lv1_1)))) then 
                radius_reg_273 <= radius_2_fu_793_p2;
            end if; 
        end if;
    end process;

    row_1_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_407_p2 = ap_const_lv1_1))) then 
                row_1_reg_205 <= ap_const_lv31_0;
            elsif ((not(((src_data_stream_V_empty_n = ap_const_logic_0) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_40_fu_443_p2 = ap_const_lv1_0))) then 
                row_1_reg_205 <= row_3_reg_1036;
            end if; 
        end if;
    end process;

    row_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                row_reg_194 <= row_2_reg_1018;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_reg_194 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                    a_1_cast_reg_1108(30 downto 0) <= a_1_cast_fu_694_p1(30 downto 0);
                a_2_reg_1118 <= a_2_fu_703_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_43_reg_1054 = ap_const_lv1_1))) then
                a_3_reg_1061 <= a_3_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                    b_1_cast_reg_1123(30 downto 0) <= b_1_cast_fu_709_p1(30 downto 0);
                b_2_reg_1132 <= b_2_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                b_3_reg_1074 <= b_3_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((src_data_stream_V_empty_n = ap_const_logic_0) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                col_2_reg_1049 <= col_2_fu_448_p2;
                    col_cast_reg_1041(30 downto 0) <= col_cast_fu_439_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                col_3_reg_1175 <= col_3_fu_804_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state80) and (tmp_49_reg_1155 = ap_const_lv1_1))) then
                k_1_reg_1162 <= k_1_fu_787_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                p_Val2_99_reg_1084 <= p_Val2_99_fu_630_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                p_count_addr_2_reg_1098 <= tmp_56_fu_682_p1(21 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                    radius_cast2_reg_1137(6 downto 0) <= radius_cast2_fu_728_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_378 <= grp_fu_370_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_383 <= grp_fu_370_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state36))) then
                reg_388 <= grp_pow_generic_double_s_fu_308_ap_return;
                reg_393 <= grp_pow_generic_double_s_fu_337_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state41))) then
                reg_398 <= grp_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state62))) then
                reg_403 <= grp_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    row_1_cast_reg_1028(30 downto 0) <= row_1_cast_fu_424_p1(30 downto 0);
                row_3_reg_1036 <= row_3_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_2_reg_1018 <= row_2_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_736_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                tmp2_reg_1145 <= tmp2_fu_757_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((src_data_stream_V_empty_n = ap_const_logic_0) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) then
                tmp_43_reg_1054 <= tmp_43_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                tmp_49_reg_1155 <= tmp_49_fu_776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state134)) then
                tmp_59_reg_1185 <= tmp_59_fu_970_p2;
                tmp_60_reg_1190 <= tmp_60_fu_976_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                tmp_reg_1093 <= tmp_fu_666_p2;
            end if;
        end if;
    end process;
    row_1_cast_reg_1028(31) <= '0';
    col_cast_reg_1041(31) <= '0';
    a_1_cast_reg_1108(31) <= '0';
    b_1_cast_reg_1123(31) <= '0';
    radius_cast2_reg_1137(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_CS_fsm_state5, tmp_40_fu_443_p2, ap_CS_fsm_state135, ap_CS_fsm_state2, exitcond5_fu_407_p2, ap_CS_fsm_state4, tmp_43_reg_1054, ap_CS_fsm_state6, exitcond4_fu_460_p2, ap_CS_fsm_state10, exitcond3_fu_477_p2, ap_CS_fsm_state63, or_cond_fu_650_p2, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, exitcond2_fu_736_p2, tmp_49_fu_776_p2, tmp_49_reg_1155, ap_CS_fsm_state76, ap_CS_fsm_state80, exitcond1_fu_782_p2, ap_CS_fsm_state81, exitcond_fu_799_p2, tmp_39_fu_428_p2, tmp_44_fu_713_p2, tmp_41_fu_698_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_407_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((tmp_39_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((src_data_stream_V_empty_n = ap_const_logic_0) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_40_fu_443_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((src_data_stream_V_empty_n = ap_const_logic_0) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((tmp_43_reg_1054 = ap_const_lv1_0) or (exitcond4_fu_460_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond3_fu_477_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((or_cond_fu_650_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state70 => 
                if (((tmp_41_fu_698_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state71 => 
                if (((tmp_44_fu_713_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state72) and (exitcond2_fu_736_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((tmp_49_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state80) and ((tmp_49_reg_1155 = ap_const_lv1_0) or (exitcond1_fu_782_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state81 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (exitcond_fu_799_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state135) and (dst_data_stream_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state135;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_1_cast_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_1_reg_251),32));
    a_2_fu_703_p2 <= std_logic_vector(unsigned(a_1_reg_251) + unsigned(ap_const_lv31_1));
    a_3_fu_465_p2 <= std_logic_vector(unsigned(a_reg_227) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state14 <= ap_NS_fsm(13);
    ap_NS_fsm_state85 <= ap_NS_fsm(84);

    ap_block_state5_assign_proc : process(src_data_stream_V_empty_n, tmp_40_fu_443_p2)
    begin
                ap_block_state5 <= ((src_data_stream_V_empty_n = ap_const_logic_0) and (tmp_40_fu_443_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state70, tmp_41_fu_698_p2)
    begin
        if ((((tmp_41_fu_698_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state70, tmp_41_fu_698_p2)
    begin
        if (((tmp_41_fu_698_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_1_cast_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_1_reg_262),32));
    b_2_fu_718_p2 <= std_logic_vector(unsigned(b_1_reg_262) + unsigned(ap_const_lv31_1));
    b_3_fu_482_p2 <= std_logic_vector(unsigned(b_reg_239) + unsigned(ap_const_lv32_1));
    col_2_fu_448_p2 <= std_logic_vector(unsigned(col_reg_216) + unsigned(ap_const_lv31_1));
    col_3_fu_804_p2 <= std_logic_vector(unsigned(col_1_reg_297) + unsigned(ap_const_lv32_1));
    col_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_216),32));

    dst_data_stream_V_blk_n_assign_proc : process(dst_data_stream_V_full_n, ap_CS_fsm_state135)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state135)) then 
            dst_data_stream_V_blk_n <= dst_data_stream_V_full_n;
        else 
            dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_V_din <= 
        ap_const_lv8_FF when (or_cond6_fu_982_p2(0) = '1') else 
        ap_const_lv8_0;

    dst_data_stream_V_write_assign_proc : process(dst_data_stream_V_full_n, ap_CS_fsm_state135)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state135) and (dst_data_stream_V_full_n = ap_const_logic_1))) then 
            dst_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_782_p1 <= rows;
    exitcond1_fu_782_p2 <= "1" when (k_reg_285 = exitcond1_fu_782_p1) else "0";
    exitcond2_fu_736_p2 <= "1" when (radius_reg_273 = ap_const_lv6_38) else "0";
    exitcond3_fu_477_p1 <= cols;
    exitcond3_fu_477_p2 <= "1" when (b_reg_239 = exitcond3_fu_477_p1) else "0";
    exitcond4_fu_460_p1 <= rows;
    exitcond4_fu_460_p2 <= "1" when (a_reg_227 = exitcond4_fu_460_p1) else "0";
    exitcond5_fu_407_p2 <= "1" when (row_reg_194 = ap_const_lv21_10A16C) else "0";
    exitcond_fu_799_p1 <= cols;
    exitcond_fu_799_p2 <= "1" when (col_1_reg_297 = exitcond_fu_799_p1) else "0";

    grp_fu_366_opcode_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            grp_fu_366_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_366_opcode <= ap_const_lv2_0;
        else 
            grp_fu_366_opcode <= "XX";
        end if; 
    end process;


    grp_fu_370_p0_assign_proc : process(ap_CS_fsm_state6, tmp_45_fu_471_p2, ap_CS_fsm_state10, tmp_50_fu_488_p2, radius_cast2_reg_1137, ap_CS_fsm_state76, ap_CS_fsm_state81, tmp_58_fu_810_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_fu_370_p0 <= tmp_58_fu_810_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_370_p0 <= radius_cast2_reg_1137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_370_p0 <= tmp_50_fu_488_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_370_p0 <= tmp_45_fu_471_p2;
        else 
            grp_fu_370_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pow_generic_double_s_fu_308_ap_start <= grp_pow_generic_double_s_fu_308_ap_start_reg;
    grp_pow_generic_double_s_fu_337_ap_start <= grp_pow_generic_double_s_fu_337_ap_start_reg;
    index_1_fu_676_p2 <= std_logic_vector(unsigned(tmp4_fu_672_p2) + unsigned(a_reg_227));
    index_fu_766_p2 <= std_logic_vector(unsigned(tmp3_fu_762_p2) + unsigned(a_1_cast_reg_1108));
    isNeg_1_fu_866_p3 <= sh_assign_3_fu_860_p2(11 downto 11);
    isNeg_fu_544_p3 <= sh_assign_fu_538_p2(11 downto 11);
    k_1_fu_787_p2 <= std_logic_vector(unsigned(k_reg_285) + unsigned(ap_const_lv32_1));
    mantissa_V_1_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_520_p4),137));
    mantissa_V_1_fu_842_p4 <= ((ap_const_lv1_1 & tmp_V_7_fu_838_p1) & ap_const_lv1_0);
    mantissa_V_3_cast_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_842_p4),137));
    mantissa_V_fu_520_p4 <= ((ap_const_lv1_1 & tmp_V_5_fu_516_p1) & ap_const_lv1_0);
    or_cond6_fu_982_p2 <= (tmp_60_reg_1190 or tmp_59_reg_1185);
    or_cond_fu_650_p2 <= (tmp_53_fu_644_p2 and tmp_52_fu_638_p2);
    p_Result_27_fu_820_p3 <= p_Val2_93_fu_816_p1(63 downto 63);
    p_Result_s_fu_498_p3 <= p_Val2_s_fu_494_p1(63 downto 63);
    p_Val2_100_fu_938_p3 <= 
        tmp_63_fu_924_p1 when (isNeg_1_fu_866_p3(0) = '1') else 
        tmp_64_fu_928_p4;
    p_Val2_101_fu_952_p3 <= 
        result_V_3_fu_946_p2 when (p_Result_27_fu_820_p3(0) = '1') else 
        p_Val2_100_fu_938_p3;
    p_Val2_93_fu_816_p1 <= reg_403;
    p_Val2_98_fu_616_p3 <= 
        tmp_51_fu_602_p1 when (isNeg_fu_544_p3(0) = '1') else 
        tmp_62_fu_606_p4;
    p_Val2_99_fu_630_p3 <= 
        result_V_1_fu_624_p2 when (p_Result_s_fu_498_p3(0) = '1') else 
        p_Val2_98_fu_616_p3;
    p_Val2_s_fu_494_p1 <= reg_403;

    p_count_address0_assign_proc : process(ap_CS_fsm_state2, p_count_addr_2_reg_1098, ap_CS_fsm_state65, ap_CS_fsm_state68, ap_CS_fsm_state73, tmp_s_fu_419_p1, tmp_56_fu_682_p1, tmp_48_fu_771_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            p_count_address0 <= tmp_48_fu_771_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            p_count_address0 <= p_count_addr_2_reg_1098;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            p_count_address0 <= tmp_56_fu_682_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_count_address0 <= tmp_s_fu_419_p1(21 - 1 downto 0);
        else 
            p_count_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_count_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state65, ap_CS_fsm_state68, ap_CS_fsm_state73, ap_CS_fsm_state76, ap_CS_fsm_state3, ap_CS_fsm_state69, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state74, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_count_ce0 <= ap_const_logic_1;
        else 
            p_count_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_count_d0_assign_proc : process(ap_CS_fsm_state2, tmp_57_fu_687_p2, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            p_count_d0 <= tmp_57_fu_687_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_count_d0 <= ap_const_lv32_0;
        else 
            p_count_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_count_we0_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_407_p2, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or ((exitcond5_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            p_count_we0 <= ap_const_logic_1;
        else 
            p_count_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_39_fu_588_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_1_cast_fu_530_p1),to_integer(unsigned('0' & tmp_i_i_i_59_fu_574_p1(31-1 downto 0)))));
    r_V_40_fu_904_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_842_p4),to_integer(unsigned('0' & tmp_i_i_i1_cast_62_fu_900_p1(31-1 downto 0)))));
    r_V_41_fu_910_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_3_cast_fu_852_p1),to_integer(unsigned('0' & tmp_i_i_i1_61_fu_896_p1(31-1 downto 0)))));
    r_V_fu_582_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_520_p4),to_integer(unsigned('0' & tmp_i_i_i_cast_60_fu_578_p1(31-1 downto 0)))));
    radius_2_fu_793_p2 <= std_logic_vector(signed(radius_reg_273) + signed(ap_const_lv6_1));
    radius_cast2_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radius_cast5_fu_724_p1),32));
        radius_cast5_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(radius_reg_273),7));

    radius_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radius_cast5_fu_724_p1),8));
    result_V_1_fu_624_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_98_fu_616_p3));
    result_V_3_fu_946_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_100_fu_938_p3));
    row_1_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_1_reg_205),32));
    row_2_fu_413_p2 <= std_logic_vector(unsigned(row_reg_194) + unsigned(ap_const_lv21_1));
    row_3_fu_433_p2 <= std_logic_vector(unsigned(row_1_reg_205) + unsigned(ap_const_lv31_1));
    sh_assign_3_fu_860_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i1_cast1_fu_856_p1));
        sh_assign_6_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_562_p3),32));

        sh_assign_9_cast_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_884_p3),32));

    sh_assign_fu_538_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast3_fu_534_p1));

    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_state5, tmp_40_fu_443_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_state5, tmp_40_fu_443_p2)
    begin
        if ((not(((src_data_stream_V_empty_n = ap_const_logic_0) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_40_fu_443_p2 = ap_const_lv1_1))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_fu_757_p2 <= std_logic_vector(unsigned(tmp_47_fu_752_p2) + unsigned(b_1_cast_reg_1123));
    tmp3_fu_762_p1 <= rows;
    tmp3_fu_762_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp2_reg_1145) * signed(tmp3_fu_762_p1))), 32));
    tmp4_fu_672_p1 <= rows;
    tmp4_fu_672_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_1093) * signed(tmp4_fu_672_p1))), 32));
    tmp_39_fu_428_p1 <= rows;
    tmp_39_fu_428_p2 <= "1" when (signed(row_1_cast_fu_424_p1) < signed(tmp_39_fu_428_p1)) else "0";
    tmp_40_fu_443_p1 <= cols;
    tmp_40_fu_443_p2 <= "1" when (signed(col_cast_fu_439_p1) < signed(tmp_40_fu_443_p1)) else "0";
    tmp_41_fu_698_p1 <= rows;
    tmp_41_fu_698_p2 <= "1" when (signed(a_1_cast_fu_694_p1) < signed(tmp_41_fu_698_p1)) else "0";
    tmp_43_fu_454_p2 <= "1" when (src_data_stream_V_dout = ap_const_lv8_0) else "0";
    tmp_44_fu_713_p1 <= cols;
    tmp_44_fu_713_p2 <= "1" when (signed(b_1_cast_fu_709_p1) < signed(tmp_44_fu_713_p1)) else "0";
    tmp_45_fu_471_p2 <= std_logic_vector(unsigned(row_1_cast_reg_1028) - unsigned(a_reg_227));
    tmp_46_fu_742_p2 <= std_logic_vector(unsigned(radius_cast_fu_732_p1) + unsigned(ap_const_lv8_92));
    tmp_47_fu_752_p0 <= tmp_47_fu_752_p00(8 - 1 downto 0);
    tmp_47_fu_752_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_742_p2),32));
    tmp_47_fu_752_p1 <= cols;
    tmp_47_fu_752_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_47_fu_752_p0) * signed(tmp_47_fu_752_p1))), 32));
        tmp_48_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_fu_766_p2),64));

    tmp_49_fu_776_p2 <= "1" when (signed(p_count_q0) > signed(ap_const_lv32_D2)) else "0";
    tmp_50_fu_488_p2 <= std_logic_vector(unsigned(col_cast_reg_1041) - unsigned(b_reg_239));
    tmp_51_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_594_p3),32));
    tmp_52_fu_638_p2 <= "1" when (signed(p_Val2_99_fu_630_p3) > signed(ap_const_lv32_6E)) else "0";
    tmp_53_fu_644_p2 <= "1" when (signed(p_Val2_99_fu_630_p3) < signed(ap_const_lv32_78)) else "0";
    tmp_54_fu_656_p2 <= std_logic_vector(unsigned(p_Val2_99_reg_1084) + unsigned(ap_const_lv32_FFFFFF92));
    tmp_55_fu_661_p1 <= cols;
    tmp_55_fu_661_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_54_fu_656_p2) * signed(tmp_55_fu_661_p1))), 32));
        tmp_56_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_1_fu_676_p2),64));

    tmp_57_fu_687_p2 <= std_logic_vector(unsigned(p_count_q0) + unsigned(ap_const_lv32_1));
    tmp_58_fu_810_p2 <= std_logic_vector(unsigned(col_1_reg_297) - unsigned(b_1_cast_reg_1123));
    tmp_59_fu_970_p2 <= "1" when (k_reg_285 = x1_fu_960_p2) else "0";
    tmp_60_fu_976_p2 <= "1" when (k_reg_285 = x2_fu_965_p2) else "0";
    tmp_62_fu_606_p4 <= r_V_39_fu_588_p2(84 downto 53);
    tmp_63_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_fu_916_p3),32));
    tmp_64_fu_928_p4 <= r_V_41_fu_910_p2(84 downto 53);
    tmp_70_fu_594_p3 <= r_V_fu_582_p2(53 downto 53);
    tmp_74_fu_916_p3 <= r_V_40_fu_904_p2(53 downto 53);
    tmp_V_5_fu_516_p1 <= p_Val2_s_fu_494_p1(52 - 1 downto 0);
    tmp_V_6_fu_828_p4 <= p_Val2_93_fu_816_p1(62 downto 52);
    tmp_V_7_fu_838_p1 <= p_Val2_93_fu_816_p1(52 - 1 downto 0);
    tmp_V_fu_506_p4 <= p_Val2_s_fu_494_p1(62 downto 52);
    tmp_fu_666_p2 <= std_logic_vector(unsigned(tmp_55_fu_661_p2) + unsigned(b_reg_239));
    tmp_i_i_i1_61_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_9_cast_fu_892_p1),137));
    tmp_i_i_i1_cast_62_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_9_cast_fu_892_p1),54));
        tmp_i_i_i1_cast_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i1_fu_874_p2),12));

    tmp_i_i_i1_fu_874_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_6_fu_828_p4));
    tmp_i_i_i_59_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_6_cast_fu_570_p1),137));
    tmp_i_i_i_cast_60_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_6_cast_fu_570_p1),54));
        tmp_i_i_i_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_552_p2),12));

    tmp_i_i_i_fu_552_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_506_p4));
    tmp_i_i_i_i1_cast1_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_6_fu_828_p4),12));
    tmp_i_i_i_i_cast3_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_506_p4),12));
    tmp_s_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_194),64));
    ush_1_fu_884_p3 <= 
        tmp_i_i_i1_cast_fu_880_p1 when (isNeg_1_fu_866_p3(0) = '1') else 
        sh_assign_3_fu_860_p2;
    ush_fu_562_p3 <= 
        tmp_i_i_i_cast_fu_558_p1 when (isNeg_fu_544_p3(0) = '1') else 
        sh_assign_fu_538_p2;
    x1_fu_960_p2 <= std_logic_vector(unsigned(a_1_cast_reg_1108) + unsigned(p_Val2_101_fu_952_p3));
    x2_fu_965_p2 <= std_logic_vector(unsigned(a_1_cast_reg_1108) - unsigned(p_Val2_101_fu_952_p3));
end behav;
