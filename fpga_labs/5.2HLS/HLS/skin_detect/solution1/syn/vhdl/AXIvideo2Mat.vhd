-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIvideo2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AXI_video_strm_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    AXI_video_strm_V_data_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_data_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    AXI_video_strm_V_keep_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_keep_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    AXI_video_strm_V_strb_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_strb_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_user_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_user_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_last_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_last_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_id_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_id_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_dest_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_dest_V_read : OUT STD_LOGIC;
    img_rows_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    img_cols_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of AXIvideo2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal AXI_video_strm_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_phi_mux_eol_2_phi_fu_387_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_keep_V_blk_n : STD_LOGIC;
    signal AXI_video_strm_V_strb_V_blk_n : STD_LOGIC;
    signal AXI_video_strm_V_user_V_blk_n : STD_LOGIC;
    signal AXI_video_strm_V_last_V_blk_n : STD_LOGIC;
    signal AXI_video_strm_V_id_V_blk_n : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_blk_n : STD_LOGIC;
    signal img_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal exitcond_reg_512_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal img_data_stream_1_V_blk_n : STD_LOGIC;
    signal img_data_stream_2_V_blk_n : STD_LOGIC;
    signal t_V_2_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_1_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_2_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_data_V_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_video_strm_V_id_V0_status : STD_LOGIC;
    signal tmp_last_V_reg_491 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_V_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op59_read_state6 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal j_V_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_8_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_525 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_530 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_535 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter1_state6 : STD_LOGIC;
    signal axi_last_V_3_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_reg_259 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axi_data_V_3_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_data_V1_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_eol_1_phi_fu_304_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_axi_data_V_1_phi_fu_315_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_eol_phi_fu_327_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp1_iter1_axi_last_V_2_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_352_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter1_p_Val2_s_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal eol_2_reg_384 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_id_V0_update : STD_LOGIC;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal sof_1_fu_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_fu_404_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_287 : BOOLEAN;
    signal ap_condition_249 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_413_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_fu_424_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((exitcond2_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter1_state6)) or ((exitcond2_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter1_state6))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((exitcond2_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axi_data_V1_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_data_V1_reg_269 <= tmp_data_V_reg_483;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                axi_data_V1_reg_269 <= axi_data_V_3_reg_372;
            end if; 
        end if;
    end process;

    axi_data_V_1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                axi_data_V_1_reg_312 <= p_Val2_s_reg_348;
            elsif (((exitcond2_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                axi_data_V_1_reg_312 <= axi_data_V1_reg_269;
            end if; 
        end if;
    end process;

    axi_data_V_3_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                axi_data_V_3_reg_372 <= axi_data_V_1_reg_312;
            elsif ((not(((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_0 = AXI_video_strm_V_id_V0_status))) and (eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                axi_data_V_3_reg_372 <= AXI_video_strm_V_data_V_dout;
            end if; 
        end if;
    end process;

    axi_last_V1_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_last_V1_reg_259 <= tmp_last_V_reg_491;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                axi_last_V1_reg_259 <= axi_last_V_3_reg_360;
            end if; 
        end if;
    end process;

    axi_last_V_2_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_249)) then
                if (((brmerge_fu_438_p2 = ap_const_lv1_1) and (exitcond_reg_512 = ap_const_lv1_0))) then 
                    axi_last_V_2_reg_335 <= ap_phi_mux_eol_1_phi_fu_304_p4;
                elsif (((brmerge_fu_438_p2 = ap_const_lv1_0) and (exitcond_reg_512 = ap_const_lv1_0))) then 
                    axi_last_V_2_reg_335 <= AXI_video_strm_V_last_V_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    axi_last_V_2_reg_335 <= ap_phi_reg_pp1_iter1_axi_last_V_2_reg_335;
                end if;
            end if; 
        end if;
    end process;

    axi_last_V_3_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                axi_last_V_3_reg_360 <= eol_1_reg_301;
            elsif ((not(((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_0 = AXI_video_strm_V_id_V0_status))) and (eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                axi_last_V_3_reg_360 <= AXI_video_strm_V_last_V_dout;
            end if; 
        end if;
    end process;

    eol_1_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                eol_1_reg_301 <= axi_last_V_2_reg_335;
            elsif (((exitcond2_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_1_reg_301 <= axi_last_V1_reg_259;
            end if; 
        end if;
    end process;

    eol_2_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                eol_2_reg_384 <= eol_reg_323;
            elsif ((not(((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_0 = AXI_video_strm_V_id_V0_status))) and (eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                eol_2_reg_384 <= AXI_video_strm_V_last_V_dout;
            end if; 
        end if;
    end process;

    eol_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                eol_reg_323 <= axi_last_V_2_reg_335;
            elsif (((exitcond2_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_reg_323 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_249)) then
                if (((brmerge_fu_438_p2 = ap_const_lv1_1) and (exitcond_reg_512 = ap_const_lv1_0))) then 
                    p_Val2_s_reg_348 <= ap_phi_mux_axi_data_V_1_phi_fu_315_p4;
                elsif (((brmerge_fu_438_p2 = ap_const_lv1_0) and (exitcond_reg_512 = ap_const_lv1_0))) then 
                    p_Val2_s_reg_348 <= AXI_video_strm_V_data_V_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    p_Val2_s_reg_348 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_348;
                end if;
            end if; 
        end if;
    end process;

    sof_1_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_512 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                sof_1_fu_204 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sof_1_fu_204 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    t_V_2_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                t_V_2_reg_290 <= j_V_fu_429_p2;
            elsif (((exitcond2_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                t_V_2_reg_290 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                t_V_reg_279 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                t_V_reg_279 <= i_V_reg_507;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond_reg_512 <= exitcond_fu_424_p2;
                exitcond_reg_512_pp1_iter1_reg <= exitcond_reg_512;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_V_reg_507 <= i_V_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_512 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_4_reg_530 <= ap_phi_mux_p_Val2_s_phi_fu_352_p4(15 downto 8);
                tmp_5_reg_535 <= ap_phi_mux_p_Val2_s_phi_fu_352_p4(23 downto 16);
                tmp_8_reg_525 <= tmp_8_fu_444_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = AXI_video_strm_V_id_V0_status))) then
                tmp_data_V_reg_483 <= AXI_video_strm_V_data_V_dout;
                tmp_last_V_reg_491 <= AXI_video_strm_V_last_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state9, ap_phi_mux_eol_2_phi_fu_387_p4, AXI_video_strm_V_id_V0_status, exitcond2_fu_413_p2, ap_CS_fsm_state4, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, eol_2_reg_384, tmp_user_V_fu_404_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_user_V_fu_404_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = AXI_video_strm_V_id_V0_status))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_user_V_fu_404_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = AXI_video_strm_V_id_V0_status))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_413_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((not(((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_0 = AXI_video_strm_V_id_V0_status))) and (eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif ((not(((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_0 = AXI_video_strm_V_id_V0_status))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_phi_mux_eol_2_phi_fu_387_p4 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    AXI_video_strm_V_data_V_blk_n_assign_proc : process(AXI_video_strm_V_data_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_512, brmerge_fu_438_p2, ap_CS_fsm_state9, eol_2_reg_384)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((brmerge_fu_438_p2 = ap_const_lv1_0) and (exitcond_reg_512 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            AXI_video_strm_V_data_V_blk_n <= AXI_video_strm_V_data_V_empty_n;
        else 
            AXI_video_strm_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_data_V_read <= AXI_video_strm_V_id_V0_update;

    AXI_video_strm_V_dest_V_blk_n_assign_proc : process(AXI_video_strm_V_dest_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_512, brmerge_fu_438_p2, ap_CS_fsm_state9, eol_2_reg_384)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((brmerge_fu_438_p2 = ap_const_lv1_0) and (exitcond_reg_512 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            AXI_video_strm_V_dest_V_blk_n <= AXI_video_strm_V_dest_V_empty_n;
        else 
            AXI_video_strm_V_dest_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_dest_V_read <= AXI_video_strm_V_id_V0_update;
    AXI_video_strm_V_id_V0_status <= (AXI_video_strm_V_user_V_empty_n and AXI_video_strm_V_strb_V_empty_n and AXI_video_strm_V_last_V_empty_n and AXI_video_strm_V_keep_V_empty_n and AXI_video_strm_V_id_V_empty_n and AXI_video_strm_V_dest_V_empty_n and AXI_video_strm_V_data_V_empty_n);

    AXI_video_strm_V_id_V0_update_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state9, AXI_video_strm_V_id_V0_status, ap_predicate_op59_read_state6, ap_block_pp1_stage0_11001, eol_2_reg_384)
    begin
        if ((((ap_predicate_op59_read_state6 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = AXI_video_strm_V_id_V0_status)) or (not(((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_0 = AXI_video_strm_V_id_V0_status))) and (eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            AXI_video_strm_V_id_V0_update <= ap_const_logic_1;
        else 
            AXI_video_strm_V_id_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    AXI_video_strm_V_id_V_blk_n_assign_proc : process(AXI_video_strm_V_id_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_512, brmerge_fu_438_p2, ap_CS_fsm_state9, eol_2_reg_384)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((brmerge_fu_438_p2 = ap_const_lv1_0) and (exitcond_reg_512 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            AXI_video_strm_V_id_V_blk_n <= AXI_video_strm_V_id_V_empty_n;
        else 
            AXI_video_strm_V_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_id_V_read <= AXI_video_strm_V_id_V0_update;

    AXI_video_strm_V_keep_V_blk_n_assign_proc : process(AXI_video_strm_V_keep_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_512, brmerge_fu_438_p2, ap_CS_fsm_state9, eol_2_reg_384)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((brmerge_fu_438_p2 = ap_const_lv1_0) and (exitcond_reg_512 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            AXI_video_strm_V_keep_V_blk_n <= AXI_video_strm_V_keep_V_empty_n;
        else 
            AXI_video_strm_V_keep_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_keep_V_read <= AXI_video_strm_V_id_V0_update;

    AXI_video_strm_V_last_V_blk_n_assign_proc : process(AXI_video_strm_V_last_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_512, brmerge_fu_438_p2, ap_CS_fsm_state9, eol_2_reg_384)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((brmerge_fu_438_p2 = ap_const_lv1_0) and (exitcond_reg_512 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            AXI_video_strm_V_last_V_blk_n <= AXI_video_strm_V_last_V_empty_n;
        else 
            AXI_video_strm_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_last_V_read <= AXI_video_strm_V_id_V0_update;

    AXI_video_strm_V_strb_V_blk_n_assign_proc : process(AXI_video_strm_V_strb_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_512, brmerge_fu_438_p2, ap_CS_fsm_state9, eol_2_reg_384)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((brmerge_fu_438_p2 = ap_const_lv1_0) and (exitcond_reg_512 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            AXI_video_strm_V_strb_V_blk_n <= AXI_video_strm_V_strb_V_empty_n;
        else 
            AXI_video_strm_V_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_strb_V_read <= AXI_video_strm_V_id_V0_update;

    AXI_video_strm_V_user_V_blk_n_assign_proc : process(AXI_video_strm_V_user_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_512, brmerge_fu_438_p2, ap_CS_fsm_state9, eol_2_reg_384)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((brmerge_fu_438_p2 = ap_const_lv1_0) and (exitcond_reg_512 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            AXI_video_strm_V_user_V_blk_n <= AXI_video_strm_V_user_V_empty_n;
        else 
            AXI_video_strm_V_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_user_V_read <= AXI_video_strm_V_id_V0_update;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg, AXI_video_strm_V_id_V0_status, ap_predicate_op59_read_state6)
    begin
                ap_block_pp1_stage0_01001 <= (((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (ap_predicate_op59_read_state6 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg, AXI_video_strm_V_id_V0_status, ap_predicate_op59_read_state6)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (ap_predicate_op59_read_state6 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg, AXI_video_strm_V_id_V0_status, ap_predicate_op59_read_state6)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (ap_predicate_op59_read_state6 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp1_stage0_iter1_assign_proc : process(AXI_video_strm_V_id_V0_status, ap_predicate_op59_read_state6)
    begin
                ap_block_state6_pp1_stage0_iter1 <= ((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (ap_predicate_op59_read_state6 = ap_const_boolean_1));
    end process;


    ap_block_state7_pp1_stage0_iter2_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, exitcond_reg_512_pp1_iter1_reg)
    begin
                ap_block_state7_pp1_stage0_iter2 <= (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (img_data_stream_0_V_full_n = ap_const_logic_0)));
    end process;


    ap_block_state9_assign_proc : process(AXI_video_strm_V_id_V0_status, eol_2_reg_384)
    begin
                ap_block_state9 <= ((eol_2_reg_384 = ap_const_lv1_0) and (ap_const_logic_0 = AXI_video_strm_V_id_V0_status));
    end process;


    ap_condition_249_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001)
    begin
                ap_condition_249 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001));
    end process;


    ap_condition_287_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_512)
    begin
                ap_condition_287 <= ((exitcond_reg_512 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_condition_pp1_exit_iter1_state6_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_condition_pp1_exit_iter1_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter1_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond2_fu_413_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_413_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_axi_data_V_1_phi_fu_315_p4_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg, axi_data_V_1_reg_312, p_Val2_s_reg_348)
    begin
        if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_axi_data_V_1_phi_fu_315_p4 <= p_Val2_s_reg_348;
        else 
            ap_phi_mux_axi_data_V_1_phi_fu_315_p4 <= axi_data_V_1_reg_312;
        end if; 
    end process;


    ap_phi_mux_eol_1_phi_fu_304_p4_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg, eol_1_reg_301, axi_last_V_2_reg_335)
    begin
        if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_eol_1_phi_fu_304_p4 <= axi_last_V_2_reg_335;
        else 
            ap_phi_mux_eol_1_phi_fu_304_p4 <= eol_1_reg_301;
        end if; 
    end process;

    ap_phi_mux_eol_2_phi_fu_387_p4 <= eol_2_reg_384;

    ap_phi_mux_eol_phi_fu_327_p4_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg, eol_reg_323, axi_last_V_2_reg_335)
    begin
        if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_eol_phi_fu_327_p4 <= axi_last_V_2_reg_335;
        else 
            ap_phi_mux_eol_phi_fu_327_p4 <= eol_reg_323;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_352_p4_assign_proc : process(AXI_video_strm_V_data_V_dout, brmerge_fu_438_p2, ap_phi_mux_axi_data_V_1_phi_fu_315_p4, ap_phi_reg_pp1_iter1_p_Val2_s_reg_348, ap_condition_287)
    begin
        if ((ap_const_boolean_1 = ap_condition_287)) then
            if ((brmerge_fu_438_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_Val2_s_phi_fu_352_p4 <= ap_phi_mux_axi_data_V_1_phi_fu_315_p4;
            elsif ((brmerge_fu_438_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_Val2_s_phi_fu_352_p4 <= AXI_video_strm_V_data_V_dout;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_352_p4 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_348;
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_352_p4 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_348;
        end if; 
    end process;

    ap_phi_reg_pp1_iter1_axi_last_V_2_reg_335 <= "X";
    ap_phi_reg_pp1_iter1_p_Val2_s_reg_348 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op59_read_state6_assign_proc : process(exitcond_reg_512, brmerge_fu_438_p2)
    begin
                ap_predicate_op59_read_state6 <= ((brmerge_fu_438_p2 = ap_const_lv1_0) and (exitcond_reg_512 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(exitcond2_fu_413_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_413_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_fu_438_p2 <= (sof_1_fu_204 or ap_phi_mux_eol_phi_fu_327_p4);
    exitcond2_fu_413_p2 <= "1" when (t_V_reg_279 = img_rows_V_read) else "0";
    exitcond_fu_424_p2 <= "1" when (t_V_2_reg_290 = img_cols_V_read) else "0";
    i_V_fu_418_p2 <= std_logic_vector(unsigned(t_V_reg_279) + unsigned(ap_const_lv32_1));

    img_data_stream_0_V_blk_n_assign_proc : process(img_data_stream_0_V_full_n, ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg)
    begin
        if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            img_data_stream_0_V_blk_n <= img_data_stream_0_V_full_n;
        else 
            img_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_0_V_din <= tmp_8_reg_525;

    img_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg, ap_block_pp1_stage0_11001)
    begin
        if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            img_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_1_V_blk_n_assign_proc : process(img_data_stream_1_V_full_n, ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg)
    begin
        if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            img_data_stream_1_V_blk_n <= img_data_stream_1_V_full_n;
        else 
            img_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_1_V_din <= tmp_4_reg_530;

    img_data_stream_1_V_write_assign_proc : process(ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg, ap_block_pp1_stage0_11001)
    begin
        if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            img_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_2_V_blk_n_assign_proc : process(img_data_stream_2_V_full_n, ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg)
    begin
        if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            img_data_stream_2_V_blk_n <= img_data_stream_2_V_full_n;
        else 
            img_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_2_V_din <= tmp_5_reg_535;

    img_data_stream_2_V_write_assign_proc : process(ap_enable_reg_pp1_iter2, exitcond_reg_512_pp1_iter1_reg, ap_block_pp1_stage0_11001)
    begin
        if (((exitcond_reg_512_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            img_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_429_p2 <= std_logic_vector(unsigned(t_V_2_reg_290) + unsigned(ap_const_lv32_1));
    tmp_8_fu_444_p1 <= ap_phi_mux_p_Val2_s_phi_fu_352_p4(8 - 1 downto 0);
    tmp_user_V_fu_404_p1 <= AXI_video_strm_V_user_V_dout;
end behav;
