-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ImgProcess_Top is
port (
    input_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    input_V_data_V_empty_n : IN STD_LOGIC;
    input_V_data_V_read : OUT STD_LOGIC;
    input_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    input_V_keep_V_empty_n : IN STD_LOGIC;
    input_V_keep_V_read : OUT STD_LOGIC;
    input_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    input_V_strb_V_empty_n : IN STD_LOGIC;
    input_V_strb_V_read : OUT STD_LOGIC;
    input_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_user_V_empty_n : IN STD_LOGIC;
    input_V_user_V_read : OUT STD_LOGIC;
    input_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_last_V_empty_n : IN STD_LOGIC;
    input_V_last_V_read : OUT STD_LOGIC;
    input_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_id_V_empty_n : IN STD_LOGIC;
    input_V_id_V_read : OUT STD_LOGIC;
    input_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_dest_V_empty_n : IN STD_LOGIC;
    input_V_dest_V_read : OUT STD_LOGIC;
    output_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_V_data_V_full_n : IN STD_LOGIC;
    output_V_data_V_write : OUT STD_LOGIC;
    output_V_keep_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_keep_V_full_n : IN STD_LOGIC;
    output_V_keep_V_write : OUT STD_LOGIC;
    output_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_strb_V_full_n : IN STD_LOGIC;
    output_V_strb_V_write : OUT STD_LOGIC;
    output_V_user_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_user_V_full_n : IN STD_LOGIC;
    output_V_user_V_write : OUT STD_LOGIC;
    output_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_last_V_full_n : IN STD_LOGIC;
    output_V_last_V_write : OUT STD_LOGIC;
    output_V_id_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_id_V_full_n : IN STD_LOGIC;
    output_V_id_V_write : OUT STD_LOGIC;
    output_V_dest_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_dest_V_full_n : IN STD_LOGIC;
    output_V_dest_V_write : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    y_lower : IN STD_LOGIC_VECTOR (31 downto 0);
    y_upper : IN STD_LOGIC_VECTOR (31 downto 0);
    cb_lower : IN STD_LOGIC_VECTOR (31 downto 0);
    cb_upper : IN STD_LOGIC_VECTOR (31 downto 0);
    cr_lower : IN STD_LOGIC_VECTOR (31 downto 0);
    cr_upper : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of ImgProcess_Top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ImgProcess_Top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=11.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=1121,HLS_SYN_LUT=2444,HLS_VERSION=2018_3}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal Block_Mat_exit45_pro_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_start_out : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_start_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_rows_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_cols_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_img_1_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_img_1_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_img_1_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_img_1_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_y_lower_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_y_lower_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_y_upper_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_y_upper_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_cb_lower_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_cb_lower_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_cb_upper_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_cb_upper_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_cr_lower_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_cr_lower_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_cr_upper_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_cr_upper_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_img_0_cols_V_channel : STD_LOGIC;
    signal img_0_cols_V_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_0_cols_V_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_0_cols_V_channel : STD_LOGIC;
    signal ap_channel_done_img_0_rows_V_channel : STD_LOGIC;
    signal img_0_rows_V_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_0_rows_V_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_0_rows_V_channel : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_AXI_video_strm_V_data_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_AXI_video_strm_V_keep_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_AXI_video_strm_V_strb_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_AXI_video_strm_V_user_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_AXI_video_strm_V_last_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_AXI_video_strm_V_id_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_AXI_video_strm_V_dest_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal hls_skin_dection_U0_ap_start : STD_LOGIC;
    signal hls_skin_dection_U0_ap_done : STD_LOGIC;
    signal hls_skin_dection_U0_ap_continue : STD_LOGIC;
    signal hls_skin_dection_U0_ap_idle : STD_LOGIC;
    signal hls_skin_dection_U0_ap_ready : STD_LOGIC;
    signal hls_skin_dection_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal hls_skin_dection_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal hls_skin_dection_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal hls_skin_dection_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_skin_dection_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal hls_skin_dection_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_skin_dection_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal hls_skin_dection_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_skin_dection_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal hls_skin_dection_U0_rows_read : STD_LOGIC;
    signal hls_skin_dection_U0_cols_read : STD_LOGIC;
    signal hls_skin_dection_U0_y_lower_read : STD_LOGIC;
    signal hls_skin_dection_U0_y_upper_read : STD_LOGIC;
    signal hls_skin_dection_U0_cb_lower_read : STD_LOGIC;
    signal hls_skin_dection_U0_cb_upper_read : STD_LOGIC;
    signal hls_skin_dection_U0_cr_lower_read : STD_LOGIC;
    signal hls_skin_dection_U0_cr_upper_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_rows_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_cols_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_AXI_video_strm_V_data_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIvideo_U0_AXI_video_strm_V_data_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_AXI_video_strm_V_keep_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_AXI_video_strm_V_keep_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_AXI_video_strm_V_strb_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_AXI_video_strm_V_strb_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_AXI_video_strm_V_user_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_AXI_video_strm_V_user_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_AXI_video_strm_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_AXI_video_strm_V_last_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_AXI_video_strm_V_id_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_AXI_video_strm_V_id_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_AXI_video_strm_V_dest_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_AXI_video_strm_V_dest_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal rows_c_full_n : STD_LOGIC;
    signal rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_c_empty_n : STD_LOGIC;
    signal cols_c_full_n : STD_LOGIC;
    signal cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_c_empty_n : STD_LOGIC;
    signal img_1_rows_V_c_full_n : STD_LOGIC;
    signal img_1_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_1_rows_V_c_empty_n : STD_LOGIC;
    signal img_1_cols_V_c_full_n : STD_LOGIC;
    signal img_1_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_1_cols_V_c_empty_n : STD_LOGIC;
    signal y_lower_c_full_n : STD_LOGIC;
    signal y_lower_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_lower_c_empty_n : STD_LOGIC;
    signal y_upper_c_full_n : STD_LOGIC;
    signal y_upper_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_upper_c_empty_n : STD_LOGIC;
    signal cb_lower_c_full_n : STD_LOGIC;
    signal cb_lower_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_lower_c_empty_n : STD_LOGIC;
    signal cb_upper_c_full_n : STD_LOGIC;
    signal cb_upper_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_upper_c_empty_n : STD_LOGIC;
    signal cr_lower_c_full_n : STD_LOGIC;
    signal cr_lower_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_lower_c_empty_n : STD_LOGIC;
    signal cr_upper_c_full_n : STD_LOGIC;
    signal cr_upper_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_upper_c_empty_n : STD_LOGIC;
    signal img_0_rows_V_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_rows_V_channel_empty_n : STD_LOGIC;
    signal img_0_cols_V_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_cols_V_channel_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_full_n : STD_LOGIC;
    signal img_0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_full_n : STD_LOGIC;
    signal img_0_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_full_n : STD_LOGIC;
    signal img_0_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_full_n : STD_LOGIC;
    signal img_1_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_full_n : STD_LOGIC;
    signal img_1_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_empty_n : STD_LOGIC;
    signal img_1_data_stream_2_full_n : STD_LOGIC;
    signal img_1_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_2_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_Mat_exit45_pro_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIvideo2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_hls_skin_dection_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_skin_dection_U0_full_n : STD_LOGIC;
    signal start_for_hls_skin_dection_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_skin_dection_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_full_n : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal hls_skin_dection_U0_start_full_n : STD_LOGIC;
    signal hls_skin_dection_U0_start_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_Mat_exit45_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        y_lower : IN STD_LOGIC_VECTOR (31 downto 0);
        y_upper : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_lower : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_upper : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_lower : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_upper : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_out_full_n : IN STD_LOGIC;
        rows_out_write : OUT STD_LOGIC;
        cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_out_full_n : IN STD_LOGIC;
        cols_out_write : OUT STD_LOGIC;
        img_1_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_1_rows_V_out_full_n : IN STD_LOGIC;
        img_1_rows_V_out_write : OUT STD_LOGIC;
        img_1_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_1_cols_V_out_full_n : IN STD_LOGIC;
        img_1_cols_V_out_write : OUT STD_LOGIC;
        y_lower_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_lower_out_full_n : IN STD_LOGIC;
        y_lower_out_write : OUT STD_LOGIC;
        y_upper_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_upper_out_full_n : IN STD_LOGIC;
        y_upper_out_write : OUT STD_LOGIC;
        cb_lower_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cb_lower_out_full_n : IN STD_LOGIC;
        cb_lower_out_write : OUT STD_LOGIC;
        cb_upper_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cb_upper_out_full_n : IN STD_LOGIC;
        cb_upper_out_write : OUT STD_LOGIC;
        cr_lower_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cr_lower_out_full_n : IN STD_LOGIC;
        cr_lower_out_write : OUT STD_LOGIC;
        cr_upper_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cr_upper_out_full_n : IN STD_LOGIC;
        cr_upper_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AXI_video_strm_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        AXI_video_strm_V_data_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_data_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_keep_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_keep_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_strb_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_strb_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_user_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_user_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_last_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_last_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_id_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_id_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_dest_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_dest_V_read : OUT STD_LOGIC;
        img_rows_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component hls_skin_dection IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        y_lower_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_lower_empty_n : IN STD_LOGIC;
        y_lower_read : OUT STD_LOGIC;
        y_upper_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_upper_empty_n : IN STD_LOGIC;
        y_upper_read : OUT STD_LOGIC;
        cb_lower_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_lower_empty_n : IN STD_LOGIC;
        cb_lower_read : OUT STD_LOGIC;
        cb_upper_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_upper_empty_n : IN STD_LOGIC;
        cb_upper_read : OUT STD_LOGIC;
        cr_lower_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_lower_empty_n : IN STD_LOGIC;
        cr_lower_read : OUT STD_LOGIC;
        cr_upper_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_upper_empty_n : IN STD_LOGIC;
        cr_upper_read : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        AXI_video_strm_V_data_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_data_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_keep_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_keep_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_keep_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_strb_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_strb_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_user_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_user_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_user_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_last_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_last_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_id_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_id_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_id_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_dest_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_dest_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_dest_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_hls_skig8j IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIhbi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Block_Mat_exit45_pro_U0 : component Block_Mat_exit45_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_Mat_exit45_pro_U0_ap_start,
        start_full_n => Block_Mat_exit45_pro_U0_start_full_n,
        ap_done => Block_Mat_exit45_pro_U0_ap_done,
        ap_continue => Block_Mat_exit45_pro_U0_ap_continue,
        ap_idle => Block_Mat_exit45_pro_U0_ap_idle,
        ap_ready => Block_Mat_exit45_pro_U0_ap_ready,
        start_out => Block_Mat_exit45_pro_U0_start_out,
        start_write => Block_Mat_exit45_pro_U0_start_write,
        rows => rows,
        cols => cols,
        y_lower => y_lower,
        y_upper => y_upper,
        cb_lower => cb_lower,
        cb_upper => cb_upper,
        cr_lower => cr_lower,
        cr_upper => cr_upper,
        rows_out_din => Block_Mat_exit45_pro_U0_rows_out_din,
        rows_out_full_n => rows_c_full_n,
        rows_out_write => Block_Mat_exit45_pro_U0_rows_out_write,
        cols_out_din => Block_Mat_exit45_pro_U0_cols_out_din,
        cols_out_full_n => cols_c_full_n,
        cols_out_write => Block_Mat_exit45_pro_U0_cols_out_write,
        img_1_rows_V_out_din => Block_Mat_exit45_pro_U0_img_1_rows_V_out_din,
        img_1_rows_V_out_full_n => img_1_rows_V_c_full_n,
        img_1_rows_V_out_write => Block_Mat_exit45_pro_U0_img_1_rows_V_out_write,
        img_1_cols_V_out_din => Block_Mat_exit45_pro_U0_img_1_cols_V_out_din,
        img_1_cols_V_out_full_n => img_1_cols_V_c_full_n,
        img_1_cols_V_out_write => Block_Mat_exit45_pro_U0_img_1_cols_V_out_write,
        y_lower_out_din => Block_Mat_exit45_pro_U0_y_lower_out_din,
        y_lower_out_full_n => y_lower_c_full_n,
        y_lower_out_write => Block_Mat_exit45_pro_U0_y_lower_out_write,
        y_upper_out_din => Block_Mat_exit45_pro_U0_y_upper_out_din,
        y_upper_out_full_n => y_upper_c_full_n,
        y_upper_out_write => Block_Mat_exit45_pro_U0_y_upper_out_write,
        cb_lower_out_din => Block_Mat_exit45_pro_U0_cb_lower_out_din,
        cb_lower_out_full_n => cb_lower_c_full_n,
        cb_lower_out_write => Block_Mat_exit45_pro_U0_cb_lower_out_write,
        cb_upper_out_din => Block_Mat_exit45_pro_U0_cb_upper_out_din,
        cb_upper_out_full_n => cb_upper_c_full_n,
        cb_upper_out_write => Block_Mat_exit45_pro_U0_cb_upper_out_write,
        cr_lower_out_din => Block_Mat_exit45_pro_U0_cr_lower_out_din,
        cr_lower_out_full_n => cr_lower_c_full_n,
        cr_lower_out_write => Block_Mat_exit45_pro_U0_cr_lower_out_write,
        cr_upper_out_din => Block_Mat_exit45_pro_U0_cr_upper_out_din,
        cr_upper_out_full_n => cr_upper_c_full_n,
        cr_upper_out_write => Block_Mat_exit45_pro_U0_cr_upper_out_write,
        ap_return_0 => Block_Mat_exit45_pro_U0_ap_return_0,
        ap_return_1 => Block_Mat_exit45_pro_U0_ap_return_1);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AXIvideo2Mat_U0_ap_start,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        AXI_video_strm_V_data_V_dout => input_V_data_V_dout,
        AXI_video_strm_V_data_V_empty_n => input_V_data_V_empty_n,
        AXI_video_strm_V_data_V_read => AXIvideo2Mat_U0_AXI_video_strm_V_data_V_read,
        AXI_video_strm_V_keep_V_dout => input_V_keep_V_dout,
        AXI_video_strm_V_keep_V_empty_n => input_V_keep_V_empty_n,
        AXI_video_strm_V_keep_V_read => AXIvideo2Mat_U0_AXI_video_strm_V_keep_V_read,
        AXI_video_strm_V_strb_V_dout => input_V_strb_V_dout,
        AXI_video_strm_V_strb_V_empty_n => input_V_strb_V_empty_n,
        AXI_video_strm_V_strb_V_read => AXIvideo2Mat_U0_AXI_video_strm_V_strb_V_read,
        AXI_video_strm_V_user_V_dout => input_V_user_V_dout,
        AXI_video_strm_V_user_V_empty_n => input_V_user_V_empty_n,
        AXI_video_strm_V_user_V_read => AXIvideo2Mat_U0_AXI_video_strm_V_user_V_read,
        AXI_video_strm_V_last_V_dout => input_V_last_V_dout,
        AXI_video_strm_V_last_V_empty_n => input_V_last_V_empty_n,
        AXI_video_strm_V_last_V_read => AXIvideo2Mat_U0_AXI_video_strm_V_last_V_read,
        AXI_video_strm_V_id_V_dout => input_V_id_V_dout,
        AXI_video_strm_V_id_V_empty_n => input_V_id_V_empty_n,
        AXI_video_strm_V_id_V_read => AXIvideo2Mat_U0_AXI_video_strm_V_id_V_read,
        AXI_video_strm_V_dest_V_dout => input_V_dest_V_dout,
        AXI_video_strm_V_dest_V_empty_n => input_V_dest_V_empty_n,
        AXI_video_strm_V_dest_V_read => AXIvideo2Mat_U0_AXI_video_strm_V_dest_V_read,
        img_rows_V_read => img_0_rows_V_channel_dout,
        img_cols_V_read => img_0_cols_V_channel_dout,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_0_data_stream_0_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_0_data_stream_1_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_0_data_stream_2_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write);

    hls_skin_dection_U0 : component hls_skin_dection
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => hls_skin_dection_U0_ap_start,
        ap_done => hls_skin_dection_U0_ap_done,
        ap_continue => hls_skin_dection_U0_ap_continue,
        ap_idle => hls_skin_dection_U0_ap_idle,
        ap_ready => hls_skin_dection_U0_ap_ready,
        src_data_stream_0_V_dout => img_0_data_stream_0_dout,
        src_data_stream_0_V_empty_n => img_0_data_stream_0_empty_n,
        src_data_stream_0_V_read => hls_skin_dection_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => img_0_data_stream_1_dout,
        src_data_stream_1_V_empty_n => img_0_data_stream_1_empty_n,
        src_data_stream_1_V_read => hls_skin_dection_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => img_0_data_stream_2_dout,
        src_data_stream_2_V_empty_n => img_0_data_stream_2_empty_n,
        src_data_stream_2_V_read => hls_skin_dection_U0_src_data_stream_2_V_read,
        dst_data_stream_0_V_din => hls_skin_dection_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => img_1_data_stream_0_full_n,
        dst_data_stream_0_V_write => hls_skin_dection_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => hls_skin_dection_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => img_1_data_stream_1_full_n,
        dst_data_stream_1_V_write => hls_skin_dection_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => hls_skin_dection_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => img_1_data_stream_2_full_n,
        dst_data_stream_2_V_write => hls_skin_dection_U0_dst_data_stream_2_V_write,
        rows_dout => rows_c_dout,
        rows_empty_n => rows_c_empty_n,
        rows_read => hls_skin_dection_U0_rows_read,
        cols_dout => cols_c_dout,
        cols_empty_n => cols_c_empty_n,
        cols_read => hls_skin_dection_U0_cols_read,
        y_lower_dout => y_lower_c_dout,
        y_lower_empty_n => y_lower_c_empty_n,
        y_lower_read => hls_skin_dection_U0_y_lower_read,
        y_upper_dout => y_upper_c_dout,
        y_upper_empty_n => y_upper_c_empty_n,
        y_upper_read => hls_skin_dection_U0_y_upper_read,
        cb_lower_dout => cb_lower_c_dout,
        cb_lower_empty_n => cb_lower_c_empty_n,
        cb_lower_read => hls_skin_dection_U0_cb_lower_read,
        cb_upper_dout => cb_upper_c_dout,
        cb_upper_empty_n => cb_upper_c_empty_n,
        cb_upper_read => hls_skin_dection_U0_cb_upper_read,
        cr_lower_dout => cr_lower_c_dout,
        cr_lower_empty_n => cr_lower_c_empty_n,
        cr_lower_read => hls_skin_dection_U0_cr_lower_read,
        cr_upper_dout => cr_upper_c_dout,
        cr_upper_empty_n => cr_upper_c_empty_n,
        cr_upper_read => hls_skin_dection_U0_cr_upper_read);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_rows_V_dout => img_1_rows_V_c_dout,
        img_rows_V_empty_n => img_1_rows_V_c_empty_n,
        img_rows_V_read => Mat2AXIvideo_U0_img_rows_V_read,
        img_cols_V_dout => img_1_cols_V_c_dout,
        img_cols_V_empty_n => img_1_cols_V_c_empty_n,
        img_cols_V_read => Mat2AXIvideo_U0_img_cols_V_read,
        img_data_stream_0_V_dout => img_1_data_stream_0_dout,
        img_data_stream_0_V_empty_n => img_1_data_stream_0_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_1_data_stream_1_dout,
        img_data_stream_1_V_empty_n => img_1_data_stream_1_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_1_data_stream_2_dout,
        img_data_stream_2_V_empty_n => img_1_data_stream_2_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        AXI_video_strm_V_data_V_din => Mat2AXIvideo_U0_AXI_video_strm_V_data_V_din,
        AXI_video_strm_V_data_V_full_n => output_V_data_V_full_n,
        AXI_video_strm_V_data_V_write => Mat2AXIvideo_U0_AXI_video_strm_V_data_V_write,
        AXI_video_strm_V_keep_V_din => Mat2AXIvideo_U0_AXI_video_strm_V_keep_V_din,
        AXI_video_strm_V_keep_V_full_n => output_V_keep_V_full_n,
        AXI_video_strm_V_keep_V_write => Mat2AXIvideo_U0_AXI_video_strm_V_keep_V_write,
        AXI_video_strm_V_strb_V_din => Mat2AXIvideo_U0_AXI_video_strm_V_strb_V_din,
        AXI_video_strm_V_strb_V_full_n => output_V_strb_V_full_n,
        AXI_video_strm_V_strb_V_write => Mat2AXIvideo_U0_AXI_video_strm_V_strb_V_write,
        AXI_video_strm_V_user_V_din => Mat2AXIvideo_U0_AXI_video_strm_V_user_V_din,
        AXI_video_strm_V_user_V_full_n => output_V_user_V_full_n,
        AXI_video_strm_V_user_V_write => Mat2AXIvideo_U0_AXI_video_strm_V_user_V_write,
        AXI_video_strm_V_last_V_din => Mat2AXIvideo_U0_AXI_video_strm_V_last_V_din,
        AXI_video_strm_V_last_V_full_n => output_V_last_V_full_n,
        AXI_video_strm_V_last_V_write => Mat2AXIvideo_U0_AXI_video_strm_V_last_V_write,
        AXI_video_strm_V_id_V_din => Mat2AXIvideo_U0_AXI_video_strm_V_id_V_din,
        AXI_video_strm_V_id_V_full_n => output_V_id_V_full_n,
        AXI_video_strm_V_id_V_write => Mat2AXIvideo_U0_AXI_video_strm_V_id_V_write,
        AXI_video_strm_V_dest_V_din => Mat2AXIvideo_U0_AXI_video_strm_V_dest_V_din,
        AXI_video_strm_V_dest_V_full_n => output_V_dest_V_full_n,
        AXI_video_strm_V_dest_V_write => Mat2AXIvideo_U0_AXI_video_strm_V_dest_V_write);

    rows_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_rows_out_din,
        if_full_n => rows_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_rows_out_write,
        if_dout => rows_c_dout,
        if_empty_n => rows_c_empty_n,
        if_read => hls_skin_dection_U0_rows_read);

    cols_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_cols_out_din,
        if_full_n => cols_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_cols_out_write,
        if_dout => cols_c_dout,
        if_empty_n => cols_c_empty_n,
        if_read => hls_skin_dection_U0_cols_read);

    img_1_rows_V_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_img_1_rows_V_out_din,
        if_full_n => img_1_rows_V_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_img_1_rows_V_out_write,
        if_dout => img_1_rows_V_c_dout,
        if_empty_n => img_1_rows_V_c_empty_n,
        if_read => Mat2AXIvideo_U0_img_rows_V_read);

    img_1_cols_V_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_img_1_cols_V_out_din,
        if_full_n => img_1_cols_V_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_img_1_cols_V_out_write,
        if_dout => img_1_cols_V_c_dout,
        if_empty_n => img_1_cols_V_c_empty_n,
        if_read => Mat2AXIvideo_U0_img_cols_V_read);

    y_lower_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_y_lower_out_din,
        if_full_n => y_lower_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_y_lower_out_write,
        if_dout => y_lower_c_dout,
        if_empty_n => y_lower_c_empty_n,
        if_read => hls_skin_dection_U0_y_lower_read);

    y_upper_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_y_upper_out_din,
        if_full_n => y_upper_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_y_upper_out_write,
        if_dout => y_upper_c_dout,
        if_empty_n => y_upper_c_empty_n,
        if_read => hls_skin_dection_U0_y_upper_read);

    cb_lower_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_cb_lower_out_din,
        if_full_n => cb_lower_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_cb_lower_out_write,
        if_dout => cb_lower_c_dout,
        if_empty_n => cb_lower_c_empty_n,
        if_read => hls_skin_dection_U0_cb_lower_read);

    cb_upper_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_cb_upper_out_din,
        if_full_n => cb_upper_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_cb_upper_out_write,
        if_dout => cb_upper_c_dout,
        if_empty_n => cb_upper_c_empty_n,
        if_read => hls_skin_dection_U0_cb_upper_read);

    cr_lower_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_cr_lower_out_din,
        if_full_n => cr_lower_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_cr_lower_out_write,
        if_dout => cr_lower_c_dout,
        if_empty_n => cr_lower_c_empty_n,
        if_read => hls_skin_dection_U0_cr_lower_read);

    cr_upper_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_cr_upper_out_din,
        if_full_n => cr_upper_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_cr_upper_out_write,
        if_dout => cr_upper_c_dout,
        if_empty_n => cr_upper_c_empty_n,
        if_read => hls_skin_dection_U0_cr_upper_read);

    img_0_rows_V_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_ap_return_0,
        if_full_n => img_0_rows_V_channel_full_n,
        if_write => ap_channel_done_img_0_rows_V_channel,
        if_dout => img_0_rows_V_channel_dout,
        if_empty_n => img_0_rows_V_channel_empty_n,
        if_read => AXIvideo2Mat_U0_ap_ready);

    img_0_cols_V_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_ap_return_1,
        if_full_n => img_0_cols_V_channel_full_n,
        if_write => ap_channel_done_img_0_cols_V_channel,
        if_dout => img_0_cols_V_channel_dout,
        if_empty_n => img_0_cols_V_channel_empty_n,
        if_read => AXIvideo2Mat_U0_ap_ready);

    img_0_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_dout,
        if_empty_n => img_0_data_stream_0_empty_n,
        if_read => hls_skin_dection_U0_src_data_stream_0_V_read);

    img_0_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_dout,
        if_empty_n => img_0_data_stream_1_empty_n,
        if_read => hls_skin_dection_U0_src_data_stream_1_V_read);

    img_0_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_dout,
        if_empty_n => img_0_data_stream_2_empty_n,
        if_read => hls_skin_dection_U0_src_data_stream_2_V_read);

    img_1_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_skin_dection_U0_dst_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_full_n,
        if_write => hls_skin_dection_U0_dst_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_dout,
        if_empty_n => img_1_data_stream_0_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    img_1_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_skin_dection_U0_dst_data_stream_1_V_din,
        if_full_n => img_1_data_stream_1_full_n,
        if_write => hls_skin_dection_U0_dst_data_stream_1_V_write,
        if_dout => img_1_data_stream_1_dout,
        if_empty_n => img_1_data_stream_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    img_1_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_skin_dection_U0_dst_data_stream_2_V_din,
        if_full_n => img_1_data_stream_2_full_n,
        if_write => hls_skin_dection_U0_dst_data_stream_2_V_write,
        if_dout => img_1_data_stream_2_dout,
        if_empty_n => img_1_data_stream_2_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_hls_skig8j_U : component start_for_hls_skig8j
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_hls_skin_dection_U0_din,
        if_full_n => start_for_hls_skin_dection_U0_full_n,
        if_write => Block_Mat_exit45_pro_U0_start_write,
        if_dout => start_for_hls_skin_dection_U0_dout,
        if_empty_n => start_for_hls_skin_dection_U0_empty_n,
        if_read => hls_skin_dection_U0_ap_ready);

    start_for_Mat2AXIhbi_U : component start_for_Mat2AXIhbi
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => Block_Mat_exit45_pro_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);





    ap_sync_reg_AXIvideo2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_sync_AXIvideo2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready <= ap_sync_Block_Mat_exit45_pro_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_0_cols_V_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_img_0_cols_V_channel <= ap_const_logic_0;
            else
                if (((Block_Mat_exit45_pro_U0_ap_done and Block_Mat_exit45_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_0_cols_V_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_0_cols_V_channel <= ap_sync_channel_write_img_0_cols_V_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_0_rows_V_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_img_0_rows_V_channel <= ap_const_logic_0;
            else
                if (((Block_Mat_exit45_pro_U0_ap_done and Block_Mat_exit45_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_0_rows_V_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_0_rows_V_channel <= ap_sync_channel_write_img_0_rows_V_channel;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = AXIvideo2Mat_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_Mat_exit45_pro_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_Mat_exit45_pro_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_Mat_exit45_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit45_pro_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_Mat_exit45_pro_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_Mat_exit45_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit45_pro_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= (img_0_rows_V_channel_empty_n and img_0_cols_V_channel_empty_n and (ap_sync_reg_AXIvideo2Mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    AXIvideo2Mat_U0_start_full_n <= ap_const_logic_1;
    AXIvideo2Mat_U0_start_write <= ap_const_logic_0;
    Block_Mat_exit45_pro_U0_ap_continue <= (ap_sync_channel_write_img_0_rows_V_channel and ap_sync_channel_write_img_0_cols_V_channel);
    Block_Mat_exit45_pro_U0_ap_start <= ((ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_Mat_exit45_pro_U0_start_full_n <= (start_for_hls_skin_dection_U0_full_n and start_for_Mat2AXIvideo_U0_full_n);
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    ap_channel_done_img_0_cols_V_channel <= ((ap_sync_reg_channel_write_img_0_cols_V_channel xor ap_const_logic_1) and Block_Mat_exit45_pro_U0_ap_done);
    ap_channel_done_img_0_rows_V_channel <= ((ap_sync_reg_channel_write_img_0_rows_V_channel xor ap_const_logic_1) and Block_Mat_exit45_pro_U0_ap_done);
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (hls_skin_dection_U0_ap_idle and (img_0_cols_V_channel_empty_n xor ap_const_logic_1) and (img_0_rows_V_channel_empty_n xor ap_const_logic_1) and Mat2AXIvideo_U0_ap_idle and Block_Mat_exit45_pro_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_AXIvideo2Mat_U0_ap_ready <= (ap_sync_reg_AXIvideo2Mat_U0_ap_ready or AXIvideo2Mat_U0_ap_ready);
    ap_sync_Block_Mat_exit45_pro_U0_ap_ready <= (ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready or Block_Mat_exit45_pro_U0_ap_ready);
    ap_sync_channel_write_img_0_cols_V_channel <= ((img_0_cols_V_channel_full_n and ap_channel_done_img_0_cols_V_channel) or ap_sync_reg_channel_write_img_0_cols_V_channel);
    ap_sync_channel_write_img_0_rows_V_channel <= ((img_0_rows_V_channel_full_n and ap_channel_done_img_0_rows_V_channel) or ap_sync_reg_channel_write_img_0_rows_V_channel);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_ready <= (ap_sync_Block_Mat_exit45_pro_U0_ap_ready and ap_sync_AXIvideo2Mat_U0_ap_ready);
    hls_skin_dection_U0_ap_continue <= ap_const_logic_1;
    hls_skin_dection_U0_ap_start <= start_for_hls_skin_dection_U0_empty_n;
    hls_skin_dection_U0_start_full_n <= ap_const_logic_1;
    hls_skin_dection_U0_start_write <= ap_const_logic_0;
    input_V_data_V_read <= AXIvideo2Mat_U0_AXI_video_strm_V_data_V_read;
    input_V_dest_V_read <= AXIvideo2Mat_U0_AXI_video_strm_V_dest_V_read;
    input_V_id_V_read <= AXIvideo2Mat_U0_AXI_video_strm_V_id_V_read;
    input_V_keep_V_read <= AXIvideo2Mat_U0_AXI_video_strm_V_keep_V_read;
    input_V_last_V_read <= AXIvideo2Mat_U0_AXI_video_strm_V_last_V_read;
    input_V_strb_V_read <= AXIvideo2Mat_U0_AXI_video_strm_V_strb_V_read;
    input_V_user_V_read <= AXIvideo2Mat_U0_AXI_video_strm_V_user_V_read;
    output_V_data_V_din <= Mat2AXIvideo_U0_AXI_video_strm_V_data_V_din;
    output_V_data_V_write <= Mat2AXIvideo_U0_AXI_video_strm_V_data_V_write;
    output_V_dest_V_din <= Mat2AXIvideo_U0_AXI_video_strm_V_dest_V_din;
    output_V_dest_V_write <= Mat2AXIvideo_U0_AXI_video_strm_V_dest_V_write;
    output_V_id_V_din <= Mat2AXIvideo_U0_AXI_video_strm_V_id_V_din;
    output_V_id_V_write <= Mat2AXIvideo_U0_AXI_video_strm_V_id_V_write;
    output_V_keep_V_din <= Mat2AXIvideo_U0_AXI_video_strm_V_keep_V_din;
    output_V_keep_V_write <= Mat2AXIvideo_U0_AXI_video_strm_V_keep_V_write;
    output_V_last_V_din <= Mat2AXIvideo_U0_AXI_video_strm_V_last_V_din;
    output_V_last_V_write <= Mat2AXIvideo_U0_AXI_video_strm_V_last_V_write;
    output_V_strb_V_din <= Mat2AXIvideo_U0_AXI_video_strm_V_strb_V_din;
    output_V_strb_V_write <= Mat2AXIvideo_U0_AXI_video_strm_V_strb_V_write;
    output_V_user_V_din <= Mat2AXIvideo_U0_AXI_video_strm_V_user_V_din;
    output_V_user_V_write <= Mat2AXIvideo_U0_AXI_video_strm_V_user_V_write;
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_hls_skin_dection_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
