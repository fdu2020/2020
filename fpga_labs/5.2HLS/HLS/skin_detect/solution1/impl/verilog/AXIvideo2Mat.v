// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXIvideo2Mat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        AXI_video_strm_V_data_V_dout,
        AXI_video_strm_V_data_V_empty_n,
        AXI_video_strm_V_data_V_read,
        AXI_video_strm_V_keep_V_dout,
        AXI_video_strm_V_keep_V_empty_n,
        AXI_video_strm_V_keep_V_read,
        AXI_video_strm_V_strb_V_dout,
        AXI_video_strm_V_strb_V_empty_n,
        AXI_video_strm_V_strb_V_read,
        AXI_video_strm_V_user_V_dout,
        AXI_video_strm_V_user_V_empty_n,
        AXI_video_strm_V_user_V_read,
        AXI_video_strm_V_last_V_dout,
        AXI_video_strm_V_last_V_empty_n,
        AXI_video_strm_V_last_V_read,
        AXI_video_strm_V_id_V_dout,
        AXI_video_strm_V_id_V_empty_n,
        AXI_video_strm_V_id_V_read,
        AXI_video_strm_V_dest_V_dout,
        AXI_video_strm_V_dest_V_empty_n,
        AXI_video_strm_V_dest_V_read,
        img_rows_V_read,
        img_cols_V_read,
        img_data_stream_0_V_din,
        img_data_stream_0_V_full_n,
        img_data_stream_0_V_write,
        img_data_stream_1_V_din,
        img_data_stream_1_V_full_n,
        img_data_stream_1_V_write,
        img_data_stream_2_V_din,
        img_data_stream_2_V_full_n,
        img_data_stream_2_V_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state8 = 8'd32;
parameter    ap_ST_fsm_state9 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] AXI_video_strm_V_data_V_dout;
input   AXI_video_strm_V_data_V_empty_n;
output   AXI_video_strm_V_data_V_read;
input  [3:0] AXI_video_strm_V_keep_V_dout;
input   AXI_video_strm_V_keep_V_empty_n;
output   AXI_video_strm_V_keep_V_read;
input  [3:0] AXI_video_strm_V_strb_V_dout;
input   AXI_video_strm_V_strb_V_empty_n;
output   AXI_video_strm_V_strb_V_read;
input  [0:0] AXI_video_strm_V_user_V_dout;
input   AXI_video_strm_V_user_V_empty_n;
output   AXI_video_strm_V_user_V_read;
input  [0:0] AXI_video_strm_V_last_V_dout;
input   AXI_video_strm_V_last_V_empty_n;
output   AXI_video_strm_V_last_V_read;
input  [0:0] AXI_video_strm_V_id_V_dout;
input   AXI_video_strm_V_id_V_empty_n;
output   AXI_video_strm_V_id_V_read;
input  [0:0] AXI_video_strm_V_dest_V_dout;
input   AXI_video_strm_V_dest_V_empty_n;
output   AXI_video_strm_V_dest_V_read;
input  [31:0] img_rows_V_read;
input  [31:0] img_cols_V_read;
output  [7:0] img_data_stream_0_V_din;
input   img_data_stream_0_V_full_n;
output   img_data_stream_0_V_write;
output  [7:0] img_data_stream_1_V_din;
input   img_data_stream_1_V_full_n;
output   img_data_stream_1_V_write;
output  [7:0] img_data_stream_2_V_din;
input   img_data_stream_2_V_full_n;
output   img_data_stream_2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_data_stream_0_V_write;
reg img_data_stream_1_V_write;
reg img_data_stream_2_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    AXI_video_strm_V_data_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_reg_512;
wire   [0:0] brmerge_fu_438_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] ap_phi_mux_eol_2_phi_fu_387_p4;
reg    AXI_video_strm_V_keep_V_blk_n;
reg    AXI_video_strm_V_strb_V_blk_n;
reg    AXI_video_strm_V_user_V_blk_n;
reg    AXI_video_strm_V_last_V_blk_n;
reg    AXI_video_strm_V_id_V_blk_n;
reg    AXI_video_strm_V_dest_V_blk_n;
reg    img_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] exitcond_reg_512_pp1_iter1_reg;
reg    img_data_stream_1_V_blk_n;
reg    img_data_stream_2_V_blk_n;
reg   [31:0] t_V_2_reg_290;
reg   [0:0] eol_1_reg_301;
reg   [31:0] axi_data_V_1_reg_312;
reg   [0:0] eol_reg_323;
reg   [0:0] axi_last_V_2_reg_335;
reg   [31:0] p_Val2_s_reg_348;
reg    ap_block_state1;
reg   [31:0] tmp_data_V_reg_483;
wire    AXI_video_strm_V_id_V0_status;
reg   [0:0] tmp_last_V_reg_491;
wire   [0:0] exitcond2_fu_413_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] i_V_fu_418_p2;
reg   [31:0] i_V_reg_507;
wire   [0:0] exitcond_fu_424_p2;
wire    ap_block_state5_pp1_stage0_iter0;
reg    ap_predicate_op59_read_state6;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_state7_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [31:0] j_V_fu_429_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [7:0] tmp_8_fu_444_p1;
reg   [7:0] tmp_8_reg_525;
reg   [7:0] tmp_4_reg_530;
reg   [7:0] tmp_5_reg_535;
reg    ap_block_state9;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter1_state6;
reg   [0:0] axi_last_V_3_reg_360;
reg   [0:0] axi_last_V1_reg_259;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state3;
reg   [31:0] axi_data_V_3_reg_372;
reg   [31:0] axi_data_V1_reg_269;
reg   [31:0] t_V_reg_279;
reg   [0:0] ap_phi_mux_eol_1_phi_fu_304_p4;
reg   [31:0] ap_phi_mux_axi_data_V_1_phi_fu_315_p4;
reg   [0:0] ap_phi_mux_eol_phi_fu_327_p4;
wire   [0:0] ap_phi_reg_pp1_iter1_axi_last_V_2_reg_335;
reg   [31:0] ap_phi_mux_p_Val2_s_phi_fu_352_p4;
wire   [31:0] ap_phi_reg_pp1_iter1_p_Val2_s_reg_348;
wire    ap_CS_fsm_state8;
reg   [0:0] eol_2_reg_384;
reg    AXI_video_strm_V_id_V0_update;
reg    ap_block_pp1_stage0_01001;
reg   [0:0] sof_1_fu_204;
wire   [0:0] tmp_user_V_fu_404_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_287;
reg    ap_condition_249;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_413_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_fu_424_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((exitcond2_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state6)) | ((exitcond2_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state6))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((exitcond2_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V1_reg_269 <= tmp_data_V_reg_483;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_data_V1_reg_269 <= axi_data_V_3_reg_372;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        axi_data_V_1_reg_312 <= p_Val2_s_reg_348;
    end else if (((exitcond2_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        axi_data_V_1_reg_312 <= axi_data_V1_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_data_V_3_reg_372 <= axi_data_V_1_reg_312;
    end else if ((~((eol_2_reg_384 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_data_V_3_reg_372 <= AXI_video_strm_V_data_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V1_reg_259 <= tmp_last_V_reg_491;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_last_V1_reg_259 <= axi_last_V_3_reg_360;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_249)) begin
        if (((brmerge_fu_438_p2 == 1'd1) & (exitcond_reg_512 == 1'd0))) begin
            axi_last_V_2_reg_335 <= ap_phi_mux_eol_1_phi_fu_304_p4;
        end else if (((brmerge_fu_438_p2 == 1'd0) & (exitcond_reg_512 == 1'd0))) begin
            axi_last_V_2_reg_335 <= AXI_video_strm_V_last_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            axi_last_V_2_reg_335 <= ap_phi_reg_pp1_iter1_axi_last_V_2_reg_335;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_last_V_3_reg_360 <= eol_1_reg_301;
    end else if ((~((eol_2_reg_384 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_last_V_3_reg_360 <= AXI_video_strm_V_last_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        eol_1_reg_301 <= axi_last_V_2_reg_335;
    end else if (((exitcond2_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_1_reg_301 <= axi_last_V1_reg_259;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        eol_2_reg_384 <= eol_reg_323;
    end else if ((~((eol_2_reg_384 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        eol_2_reg_384 <= AXI_video_strm_V_last_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        eol_reg_323 <= axi_last_V_2_reg_335;
    end else if (((exitcond2_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_reg_323 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_249)) begin
        if (((brmerge_fu_438_p2 == 1'd1) & (exitcond_reg_512 == 1'd0))) begin
            p_Val2_s_reg_348 <= ap_phi_mux_axi_data_V_1_phi_fu_315_p4;
        end else if (((brmerge_fu_438_p2 == 1'd0) & (exitcond_reg_512 == 1'd0))) begin
            p_Val2_s_reg_348 <= AXI_video_strm_V_data_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            p_Val2_s_reg_348 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_348;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_512 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sof_1_fu_204 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sof_1_fu_204 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_V_2_reg_290 <= j_V_fu_429_p2;
    end else if (((exitcond2_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_2_reg_290 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        t_V_reg_279 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t_V_reg_279 <= i_V_reg_507;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond_reg_512 <= exitcond_fu_424_p2;
        exitcond_reg_512_pp1_iter1_reg <= exitcond_reg_512;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_V_reg_507 <= i_V_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_512 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_4_reg_530 <= {{ap_phi_mux_p_Val2_s_phi_fu_352_p4[15:8]}};
        tmp_5_reg_535 <= {{ap_phi_mux_p_Val2_s_phi_fu_352_p4[23:16]}};
        tmp_8_reg_525 <= tmp_8_fu_444_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == AXI_video_strm_V_id_V0_status))) begin
        tmp_data_V_reg_483 <= AXI_video_strm_V_data_V_dout;
        tmp_last_V_reg_491 <= AXI_video_strm_V_last_V_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((brmerge_fu_438_p2 == 1'd0) & (exitcond_reg_512 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        AXI_video_strm_V_data_V_blk_n = AXI_video_strm_V_data_V_empty_n;
    end else begin
        AXI_video_strm_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((brmerge_fu_438_p2 == 1'd0) & (exitcond_reg_512 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        AXI_video_strm_V_dest_V_blk_n = AXI_video_strm_V_dest_V_empty_n;
    end else begin
        AXI_video_strm_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_predicate_op59_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == AXI_video_strm_V_id_V0_status)) | (~((eol_2_reg_384 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        AXI_video_strm_V_id_V0_update = 1'b1;
    end else begin
        AXI_video_strm_V_id_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((brmerge_fu_438_p2 == 1'd0) & (exitcond_reg_512 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        AXI_video_strm_V_id_V_blk_n = AXI_video_strm_V_id_V_empty_n;
    end else begin
        AXI_video_strm_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((brmerge_fu_438_p2 == 1'd0) & (exitcond_reg_512 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        AXI_video_strm_V_keep_V_blk_n = AXI_video_strm_V_keep_V_empty_n;
    end else begin
        AXI_video_strm_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((brmerge_fu_438_p2 == 1'd0) & (exitcond_reg_512 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        AXI_video_strm_V_last_V_blk_n = AXI_video_strm_V_last_V_empty_n;
    end else begin
        AXI_video_strm_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((brmerge_fu_438_p2 == 1'd0) & (exitcond_reg_512 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        AXI_video_strm_V_strb_V_blk_n = AXI_video_strm_V_strb_V_empty_n;
    end else begin
        AXI_video_strm_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((brmerge_fu_438_p2 == 1'd0) & (exitcond_reg_512 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        AXI_video_strm_V_user_V_blk_n = AXI_video_strm_V_user_V_empty_n;
    end else begin
        AXI_video_strm_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_413_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_axi_data_V_1_phi_fu_315_p4 = p_Val2_s_reg_348;
    end else begin
        ap_phi_mux_axi_data_V_1_phi_fu_315_p4 = axi_data_V_1_reg_312;
    end
end

always @ (*) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_eol_1_phi_fu_304_p4 = axi_last_V_2_reg_335;
    end else begin
        ap_phi_mux_eol_1_phi_fu_304_p4 = eol_1_reg_301;
    end
end

always @ (*) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_eol_phi_fu_327_p4 = axi_last_V_2_reg_335;
    end else begin
        ap_phi_mux_eol_phi_fu_327_p4 = eol_reg_323;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_287)) begin
        if ((brmerge_fu_438_p2 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_352_p4 = ap_phi_mux_axi_data_V_1_phi_fu_315_p4;
        end else if ((brmerge_fu_438_p2 == 1'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_352_p4 = AXI_video_strm_V_data_V_dout;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_352_p4 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_348;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_352_p4 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_348;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_413_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        img_data_stream_0_V_blk_n = img_data_stream_0_V_full_n;
    end else begin
        img_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img_data_stream_0_V_write = 1'b1;
    end else begin
        img_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        img_data_stream_1_V_blk_n = img_data_stream_1_V_full_n;
    end else begin
        img_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img_data_stream_1_V_write = 1'b1;
    end else begin
        img_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        img_data_stream_2_V_blk_n = img_data_stream_2_V_full_n;
    end else begin
        img_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img_data_stream_2_V_write = 1'b1;
    end else begin
        img_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_user_V_fu_404_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == AXI_video_strm_V_id_V0_status))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_user_V_fu_404_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == AXI_video_strm_V_id_V0_status))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_413_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((eol_2_reg_384 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (eol_2_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((eol_2_reg_384 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (1'b1 == ap_CS_fsm_state9) & (ap_phi_mux_eol_2_phi_fu_387_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_dest_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_id_V0_status = (AXI_video_strm_V_user_V_empty_n & AXI_video_strm_V_strb_V_empty_n & AXI_video_strm_V_last_V_empty_n & AXI_video_strm_V_keep_V_empty_n & AXI_video_strm_V_id_V_empty_n & AXI_video_strm_V_dest_V_empty_n & AXI_video_strm_V_data_V_empty_n);

assign AXI_video_strm_V_id_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_keep_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_last_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_strb_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_user_V_read = AXI_video_strm_V_id_V0_update;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((1'b0 == AXI_video_strm_V_id_V0_status) & (ap_predicate_op59_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_0_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b0 == AXI_video_strm_V_id_V0_status) & (ap_predicate_op59_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_0_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b0 == AXI_video_strm_V_id_V0_status) & (ap_predicate_op59_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_0_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((1'b0 == AXI_video_strm_V_id_V0_status) & (ap_predicate_op59_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter2 = (((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_512_pp1_iter1_reg == 1'd0) & (img_data_stream_0_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state9 = ((eol_2_reg_384 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status));
end

always @ (*) begin
    ap_condition_249 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001));
end

always @ (*) begin
    ap_condition_287 = ((exitcond_reg_512 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_eol_2_phi_fu_387_p4 = eol_2_reg_384;

assign ap_phi_reg_pp1_iter1_axi_last_V_2_reg_335 = 'bx;

assign ap_phi_reg_pp1_iter1_p_Val2_s_reg_348 = 'bx;

always @ (*) begin
    ap_predicate_op59_read_state6 = ((brmerge_fu_438_p2 == 1'd0) & (exitcond_reg_512 == 1'd0));
end

assign brmerge_fu_438_p2 = (sof_1_fu_204 | ap_phi_mux_eol_phi_fu_327_p4);

assign exitcond2_fu_413_p2 = ((t_V_reg_279 == img_rows_V_read) ? 1'b1 : 1'b0);

assign exitcond_fu_424_p2 = ((t_V_2_reg_290 == img_cols_V_read) ? 1'b1 : 1'b0);

assign i_V_fu_418_p2 = (t_V_reg_279 + 32'd1);

assign img_data_stream_0_V_din = tmp_8_reg_525;

assign img_data_stream_1_V_din = tmp_4_reg_530;

assign img_data_stream_2_V_din = tmp_5_reg_535;

assign j_V_fu_429_p2 = (t_V_2_reg_290 + 32'd1);

assign tmp_8_fu_444_p1 = ap_phi_mux_p_Val2_s_phi_fu_352_p4[7:0];

assign tmp_user_V_fu_404_p1 = AXI_video_strm_V_user_V_dout;

endmodule //AXIvideo2Mat
