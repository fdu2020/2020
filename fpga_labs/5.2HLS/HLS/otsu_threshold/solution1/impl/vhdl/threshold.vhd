-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity threshold is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_V_read : OUT STD_LOGIC;
    p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of threshold is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp3_stage2 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp3_stage3 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp3_stage4 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (57 downto 0) := "0000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (57 downto 0) := "0000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (57 downto 0) := "0000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (57 downto 0) := "0000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (57 downto 0) := "0000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (57 downto 0) := "0000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (57 downto 0) := "0001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (57 downto 0) := "0010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (57 downto 0) := "0100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (57 downto 0) := "1000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_437F0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011111110000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_9 : STD_LOGIC_VECTOR (11 downto 0) := "000000001001";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal hls_array_data_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_array_data_V_ce0 : STD_LOGIC;
    signal hls_array_data_V_we0 : STD_LOGIC;
    signal hls_array_data_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal hls_array_data_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_2_reg_2278 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_2_reg_2278_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_452 : STD_LOGIC_VECTOR (30 downto 0);
    signal i5_reg_474 : STD_LOGIC_VECTOR (8 downto 0);
    signal w0_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal u0tmp_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal j7_reg_545 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_4_reg_578 : STD_LOGIC_VECTOR (20 downto 0);
    signal i9_reg_590 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_pp3_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage2 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state39_pp3_stage2_iter0 : BOOLEAN;
    signal ap_block_state44_pp3_stage2_iter1 : BOOLEAN;
    signal ap_block_pp3_stage2_11001 : BOOLEAN;
    signal exitcond6_reg_2401 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_block_state21_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter12 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter13 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal exitcond4_reg_2353 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_2353_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state76_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state77_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state78_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state79_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state80_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_state81_pp4_stage0_iter5 : BOOLEAN;
    signal ap_block_state82_pp4_stage0_iter6 : BOOLEAN;
    signal ap_block_state83_pp4_stage0_iter7 : BOOLEAN;
    signal ap_block_state84_pp4_stage0_iter8 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal exitcond_reg_2468 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_2468_pp4_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal exitcond4_reg_2353_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal pixelPro_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_block_state38_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_state43_pp3_stage1_iter1 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal grp_fu_611_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp3_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage4 : signal is "none";
    signal ap_block_state41_pp3_stage4_iter0 : BOOLEAN;
    signal ap_block_pp3_stage4_11001 : BOOLEAN;
    signal reg_675_pp4_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_enable_reg_pp4_iter6 : STD_LOGIC := '0';
    signal exitcond_reg_2468_pp4_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_695_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_756_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_2273 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_1_fu_771_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal addr_win_val_0_V_2_1_reg_2287 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_2297 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_1_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_1_reg_2303 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_2_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_2_reg_2309 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_2315 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_2325 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_2330 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_1170_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_s_fu_1204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal scale_reg_2348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond4_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal exitcond4_reg_2353_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_2353_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_2353_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_2353_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_2353_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_2353_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_2353_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_2353_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_2353_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_2353_pp2_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_1214_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_13_fu_1220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_2362_pp2_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal hist_out_V_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_V_reg_2372 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal tmp_38_fu_1225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_cast8_fu_1229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_cast8_reg_2382 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal j_5_cast_fu_1233_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_5_cast_reg_2387 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond5_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_1243_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_4_reg_2396 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond6_fu_1253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state37_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state42_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal exitcond6_reg_2401_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_1258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_reg_2405 : STD_LOGIC_VECTOR (7 downto 0);
    signal j7_cast7_fu_1264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w0_1_reg_2420 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp3_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage3 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_state40_pp3_stage3_iter0 : BOOLEAN;
    signal ap_block_state45_pp3_stage3_iter1 : BOOLEAN;
    signal ap_block_pp3_stage3_11001 : BOOLEAN;
    signal threshold_V_fu_1280_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal threshold_V_reg_2433 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal exitcond7_fu_1274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal j_3_fu_1289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_2443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal u1_reg_2453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal threshold_V_1_fu_1379_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal deltaMax_1_fu_1386_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_1394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal exitcond_reg_2468_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_2468_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_2468_pp4_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_2468_pp4_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_2468_pp4_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_1400_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal tmp_18_fu_1406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_2477 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_2477_pp4_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_2477_pp4_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_2477_pp4_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_2477_pp4_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_2477_pp4_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_2477_pp4_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_2477_pp4_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_V_fu_1411_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum_V_reg_2487 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal tmp_39_fu_1417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_reg_2498 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_1463_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_8_reg_2507 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_1467_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_reg_2512 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_40_i_fu_1473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_i_reg_2517 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_1479_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_2523 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_41_i_fu_1485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_i_reg_2531 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_2_fu_1497_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_2_reg_2537 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_i_fu_1505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_i_reg_2543 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_i_fu_1511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_i_reg_2550 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_1527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_2555 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state5 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state37 : STD_LOGIC;
    signal ap_block_pp3_stage4_subdone : BOOLEAN;
    signal ap_block_pp3_stage3_subdone : BOOLEAN;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state76 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter8 : STD_LOGIC := '0';
    signal hist_out_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hist_out_V_ce0 : STD_LOGIC;
    signal hist_out_V_we0 : STD_LOGIC;
    signal hist_out_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal hist_out_V_ce1 : STD_LOGIC;
    signal hist_out_V_we1 : STD_LOGIC;
    signal hist_out_V_d1 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_out_V_q1 : STD_LOGIC_VECTOR (20 downto 0);
    signal pixelPro_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelPro_ce0 : STD_LOGIC;
    signal pixelPro_we0 : STD_LOGIC;
    signal pixelPro_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_430 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_reg_441 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal col_assign_reg_463 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond3_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_reg_485 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal p_2_reg_497 : STD_LOGIC_VECTOR (7 downto 0);
    signal deltaMax_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_w0_phi_fu_525_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal ap_phi_mux_j7_phi_fu_549_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal u1tmp_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal j8_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_4_phi_fu_582_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal tmp_8_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_1135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_1190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal tmp_26_fu_1269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_1284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_0334_s_fu_256 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_0334_2_be_2_fu_1101_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_0337_s_fu_260 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0337_2_be_2_fu_930_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_win_val_0_V_2_fu_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_win_val_0_V_1_fu_268 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_win_val_V_0_0_2_fu_994_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_win_val_0_V_3_fu_272 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_last_V_fu_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal hist_win_val_0_V_1_1_fu_280 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_win_val_0_V_1_fu_1094_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_win_val_V_fu_284 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_win_val_V_0_0_2_fu_1128_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_win_val_0_V_2_1_fu_288 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_win_val_0_V_2_fu_1073_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_win_val_0_V_3_1_fu_292 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_win_val_0_V_3_fu_1053_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_win_val_V_load_s_fu_1195_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal data_val_V_cast_fu_2172_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal grp_fu_601_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_fu_611_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage3 : BOOLEAN;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_fu_616_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_624_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_627_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i2_cast_fu_747_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_762_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_3_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_fu_816_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_23_1_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_2_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_cast_fu_868_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp_fu_830_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_3_fu_882_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_fu_890_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0337_2_be_fu_902_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_V_1_0337_2_be_fu_916_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_950_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_29_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_fu_966_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp8_fu_986_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal hist_flag_V_fu_1047_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_w_V_s_fu_1067_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_0334_2_be_fu_1060_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_flag_V_2_fu_1088_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_w_V_172_0334_2_fu_1081_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_win_val_0_V_0_fu_1108_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal storemerge1_fu_1114_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal hist_last_V_fu_1041_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sel_tmp9_fu_1121_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal cond_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_win_val_V_load_s_fu_1182_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j7_cast_fu_1249_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal deltaTmp_to_int_fu_1295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal deltaMax_to_int_fu_1313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_1299_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_1309_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_1317_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_1327_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_1355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_1349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_1343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_1361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_1367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_1373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_assign_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_1421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_1437_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_52_fu_1451_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_26_i_fu_1455_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_44_fu_1425_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_i_fu_1447_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_42_i_fu_1491_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_55_fu_1517_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_1_fu_1533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_4_fu_1537_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_5_fu_1547_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_i_i_i_i_fu_1551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_i_20_fu_1557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_1569_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal F2_2_cast_i_fu_1577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_i_fu_1584_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_49_i_fu_1588_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_57_fu_1598_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_1580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_fu_1574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_1594_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_i_fu_1606_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_i_fu_1632_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_63_cast_i_fu_1637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_i_fu_1627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_1641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_1620_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_fu_1649_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_i_fu_1664_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_fu_1668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_fu_1674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_fu_1695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_1700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_1656_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_1705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_fu_1688_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp7_i_fu_1719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_i_fu_1725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_i_fu_1711_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp12_demorgan_i_fu_1739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_i_fu_1743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_i_fu_1749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_i_fu_1614_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp9_i_fu_1731_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_not_i_fu_1762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp28_i_fu_1767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_1682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp12_fu_1773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_fu_1785_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos2_fu_1794_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_5_fu_1754_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_fu_1817_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_cast_i_fu_1790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_i_fu_1831_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_60_i_fu_1835_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal lD_fu_1841_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_1825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp13_fu_1845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_i_fu_1811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_1857_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_i_fu_1871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_1865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos2_cast_i_fu_1799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_i_fu_1883_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_1_fu_1887_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal r_V_fu_1893_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal or_cond173_i_i_i_fu_1877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_1899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_i_s_fu_1905_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_1851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_i_fu_1925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_1949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_i_not_fu_1961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_i_fu_1943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp33_i_fu_1967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp34_i_fu_1973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond175_i_i_i_fu_1913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp35_i_fu_1979_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_177_i_i_i_fu_1955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_180_i_i_i_fu_1937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp39_i_fu_1995_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_i_i_i_fu_1779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_i_s_fu_1987_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_2_i_fu_2003_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_i_fu_2019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_fu_1803_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp41_i_fu_2031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp14_fu_2037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp47_i_fu_2048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_i_fu_2025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp46_i_fu_2043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp15_fu_2061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_2011_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_2053_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_179_demorgan_i_i_i_fu_2066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_i_fu_2072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_179_demorgan_i_i_no_fu_2084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_not_i_fu_2078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp50_i_demorgan_fu_2104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp50_i_fu_2110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp51_i_fu_2116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_demorgan_i_fu_1563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_2121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_2127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp55_demorgan_i_fu_2141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_2090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp55_i_fu_2146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp56_i_fu_2152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_0_i_i_mux_fu_2096_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp52_i_fu_2133_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_V_fu_2158_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_2166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_601_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp3_stage1_00001 : BOOLEAN;
    signal ap_block_pp3_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_block_pp3_stage2_subdone : BOOLEAN;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_block_pp2 : BOOLEAN;
    signal ap_block_pp3 : BOOLEAN;
    signal ap_block_pp4 : BOOLEAN;
    signal ap_enable_operation_177 : BOOLEAN;
    signal ap_enable_state5_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_213 : BOOLEAN;
    signal ap_enable_state6_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_220 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component hls_counter_colorg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_counter_colorhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_counter_coloribs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_counter_colorjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_counter_colorkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_counter_colorlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hls_counter_colormb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component threshold_hls_arreOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component threshold_hist_oufYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (20 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (20 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component threshold_pixelPro IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hls_array_data_V_U : component threshold_hls_arreOg
    generic map (
        DataWidth => 2,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_array_data_V_address0,
        ce0 => hls_array_data_V_ce0,
        we0 => hls_array_data_V_we0,
        d0 => hls_array_data_V_d0,
        q0 => hls_array_data_V_q0);

    hist_out_V_U : component threshold_hist_oufYi
    generic map (
        DataWidth => 21,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hist_out_V_address0,
        ce0 => hist_out_V_ce0,
        we0 => hist_out_V_we0,
        d0 => ap_const_lv21_0,
        q0 => hist_out_V_q0,
        address1 => hist_out_V_address1,
        ce1 => hist_out_V_ce1,
        we1 => hist_out_V_we1,
        d1 => hist_out_V_d1,
        q1 => hist_out_V_q1);

    pixelPro_U : component threshold_pixelPro
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pixelPro_address0,
        ce0 => pixelPro_ce0,
        we0 => pixelPro_we0,
        d0 => pixelPro_d0,
        q0 => pixelPro_q0);

    hls_counter_colorg8j_U25 : component hls_counter_colorg8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_601_p0,
        din1 => grp_fu_601_p1,
        opcode => grp_fu_601_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_601_p2);

    hls_counter_colorhbi_U26 : component hls_counter_colorhbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_611_p0,
        din1 => grp_fu_611_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_611_p2);

    hls_counter_coloribs_U27 : component hls_counter_coloribs
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_616_p0,
        din1 => grp_fu_616_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_616_p2);

    hls_counter_colorjbC_U28 : component hls_counter_colorjbC
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_624_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_624_p1);

    hls_counter_colorkbM_U29 : component hls_counter_colorkbM
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_627_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_627_p1);

    hls_counter_colorlbW_U30 : component hls_counter_colorlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => reg_675,
        dout => d_assign_fu_631_p1);

    hls_counter_colormb6_U31 : component hls_counter_colormb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_675,
        din1 => deltaMax_reg_509,
        opcode => ap_const_lv5_2,
        dout => tmp_48_fu_634_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_fu_766_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_751_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_751_p2 = ap_const_lv1_1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_751_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state37) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_1237_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp3_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3)) or ((ap_const_boolean_0 = ap_block_pp3_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage4)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_1237_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state76) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_1237_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state76)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state76);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_1237_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp4_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    addr_last_V_fu_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_2278 = ap_const_lv1_1))) then 
                addr_last_V_fu_276 <= addr_win_val_0_V_3_fu_272;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_1))) then 
                addr_last_V_fu_276 <= ap_const_lv8_3;
            end if; 
        end if;
    end process;

    addr_win_val_0_V_1_fu_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_2278 = ap_const_lv1_1))) then 
                addr_win_val_0_V_1_fu_268 <= addr_win_val_V_0_0_2_fu_994_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_1))) then 
                addr_win_val_0_V_1_fu_268 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    addr_win_val_0_V_2_fu_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_2278 = ap_const_lv1_1))) then 
                addr_win_val_0_V_2_fu_264 <= addr_win_val_0_V_1_fu_268;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_1))) then 
                addr_win_val_0_V_2_fu_264 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    addr_win_val_0_V_3_fu_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_2278 = ap_const_lv1_1))) then 
                addr_win_val_0_V_3_fu_272 <= addr_win_val_0_V_2_fu_264;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_1))) then 
                addr_win_val_0_V_3_fu_272 <= ap_const_lv8_2;
            end if; 
        end if;
    end process;

    col_assign_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_751_p2 = ap_const_lv1_0))) then 
                col_assign_reg_463 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_1164_p2 = ap_const_lv1_0))) then 
                col_assign_reg_463 <= m_fu_1170_p2;
            end if; 
        end if;
    end process;

    deltaMax_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                deltaMax_reg_509 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                deltaMax_reg_509 <= deltaMax_1_fu_1386_p3;
            end if; 
        end if;
    end process;

    hist_win_val_0_V_1_1_fu_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1))) then 
                hist_win_val_0_V_1_1_fu_280 <= hist_win_val_0_V_1_fu_1094_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_1))) then 
                hist_win_val_0_V_1_1_fu_280 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    hist_win_val_0_V_2_1_fu_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1))) then 
                hist_win_val_0_V_2_1_fu_288 <= hist_win_val_0_V_2_fu_1073_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_1))) then 
                hist_win_val_0_V_2_1_fu_288 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    hist_win_val_0_V_3_1_fu_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1))) then 
                hist_win_val_0_V_3_1_fu_292 <= hist_win_val_0_V_3_fu_1053_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_1))) then 
                hist_win_val_0_V_3_1_fu_292 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    hist_win_val_V_fu_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1))) then 
                hist_win_val_V_fu_284 <= hist_win_val_V_0_0_2_fu_1128_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_1))) then 
                hist_win_val_V_fu_284 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    i1_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i1_reg_430 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_0))) then 
                i1_reg_430 <= i_fu_695_p2;
            end if; 
        end if;
    end process;

    i2_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_1))) then 
                i2_reg_441 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i2_reg_441 <= i_1_reg_2273;
            end if; 
        end if;
    end process;

    i5_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond4_fu_1208_p2 = ap_const_lv1_0))) then 
                i5_reg_474 <= i_2_fu_1214_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i5_reg_474 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i9_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_1237_p2 = ap_const_lv1_1))) then 
                i9_reg_590 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond_fu_1394_p2 = ap_const_lv1_0))) then 
                i9_reg_590 <= i_3_fu_1400_p2;
            end if; 
        end if;
    end process;

    j7_reg_545_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond6_reg_2401 = ap_const_lv1_0))) then 
                j7_reg_545 <= j_2_reg_2405;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_1237_p2 = ap_const_lv1_0))) then 
                j7_reg_545 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j8_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                j8_reg_568 <= j_5_cast8_reg_2382;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                j8_reg_568 <= j_3_reg_2443;
            end if; 
        end if;
    end process;

    j_4_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                j_4_reg_485 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                j_4_reg_485 <= i_4_reg_2396;
            end if; 
        end if;
    end process;

    j_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_fu_766_p2 = ap_const_lv1_1))) then 
                j_reg_452 <= j_1_fu_771_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_751_p2 = ap_const_lv1_1))) then 
                j_reg_452 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    p_2_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                p_2_reg_497 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                p_2_reg_497 <= threshold_V_1_fu_1379_p3;
            end if; 
        end if;
    end process;

    p_4_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_1237_p2 = ap_const_lv1_1))) then 
                p_4_reg_578 <= ap_const_lv21_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (exitcond_reg_2468_pp4_iter1_reg = ap_const_lv1_0))) then 
                p_4_reg_578 <= sum_V_reg_2487;
            end if; 
        end if;
    end process;

    u0tmp_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (exitcond6_reg_2401_pp3_iter1_reg = ap_const_lv1_0))) then 
                u0tmp_reg_533 <= grp_fu_601_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_1237_p2 = ap_const_lv1_0))) then 
                u0tmp_reg_533 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    u1tmp_reg_556_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                u1tmp_reg_556 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                u1tmp_reg_556 <= grp_fu_601_p2;
            end if; 
        end if;
    end process;

    w0_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (exitcond6_reg_2401_pp3_iter1_reg = ap_const_lv1_0))) then 
                w0_reg_521 <= w0_1_reg_2420;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_1237_p2 = ap_const_lv1_0))) then 
                w0_reg_521 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (exitcond_reg_2468_pp4_iter6_reg = ap_const_lv1_0))) then
                F2_2_reg_2537 <= F2_2_fu_1497_p3;
                F2_reg_2523 <= F2_fu_1479_p2;
                icmp1_reg_2555 <= icmp1_fu_1527_p2;
                man_V_1_reg_2512 <= man_V_1_fu_1467_p2;
                p_Result_7_reg_2498 <= ireg_V_fu_1421_p1(63 downto 63);
                    p_Result_8_reg_2507(51 downto 0) <= p_Result_8_fu_1463_p1(51 downto 0);
                tmp_40_i_reg_2517 <= tmp_40_i_fu_1473_p2;
                tmp_41_i_reg_2531 <= tmp_41_i_fu_1485_p2;
                tmp_43_i_reg_2543 <= tmp_43_i_fu_1505_p2;
                tmp_45_i_reg_2550 <= tmp_45_i_fu_1511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_2278 = ap_const_lv1_1))) then
                addr_win_val_0_V_2_1_reg_2287 <= addr_win_val_0_V_2_fu_264;
                p_0337_s_fu_260 <= p_0337_2_be_2_fu_930_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond4_reg_2353 <= exitcond4_fu_1208_p2;
                exitcond4_reg_2353_pp2_iter1_reg <= exitcond4_reg_2353;
                    tmp_13_reg_2362_pp2_iter1_reg(8 downto 0) <= tmp_13_reg_2362(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                exitcond4_reg_2353_pp2_iter10_reg <= exitcond4_reg_2353_pp2_iter9_reg;
                exitcond4_reg_2353_pp2_iter11_reg <= exitcond4_reg_2353_pp2_iter10_reg;
                exitcond4_reg_2353_pp2_iter12_reg <= exitcond4_reg_2353_pp2_iter11_reg;
                exitcond4_reg_2353_pp2_iter2_reg <= exitcond4_reg_2353_pp2_iter1_reg;
                exitcond4_reg_2353_pp2_iter3_reg <= exitcond4_reg_2353_pp2_iter2_reg;
                exitcond4_reg_2353_pp2_iter4_reg <= exitcond4_reg_2353_pp2_iter3_reg;
                exitcond4_reg_2353_pp2_iter5_reg <= exitcond4_reg_2353_pp2_iter4_reg;
                exitcond4_reg_2353_pp2_iter6_reg <= exitcond4_reg_2353_pp2_iter5_reg;
                exitcond4_reg_2353_pp2_iter7_reg <= exitcond4_reg_2353_pp2_iter6_reg;
                exitcond4_reg_2353_pp2_iter8_reg <= exitcond4_reg_2353_pp2_iter7_reg;
                exitcond4_reg_2353_pp2_iter9_reg <= exitcond4_reg_2353_pp2_iter8_reg;
                    tmp_13_reg_2362_pp2_iter10_reg(8 downto 0) <= tmp_13_reg_2362_pp2_iter9_reg(8 downto 0);
                    tmp_13_reg_2362_pp2_iter11_reg(8 downto 0) <= tmp_13_reg_2362_pp2_iter10_reg(8 downto 0);
                    tmp_13_reg_2362_pp2_iter12_reg(8 downto 0) <= tmp_13_reg_2362_pp2_iter11_reg(8 downto 0);
                    tmp_13_reg_2362_pp2_iter2_reg(8 downto 0) <= tmp_13_reg_2362_pp2_iter1_reg(8 downto 0);
                    tmp_13_reg_2362_pp2_iter3_reg(8 downto 0) <= tmp_13_reg_2362_pp2_iter2_reg(8 downto 0);
                    tmp_13_reg_2362_pp2_iter4_reg(8 downto 0) <= tmp_13_reg_2362_pp2_iter3_reg(8 downto 0);
                    tmp_13_reg_2362_pp2_iter5_reg(8 downto 0) <= tmp_13_reg_2362_pp2_iter4_reg(8 downto 0);
                    tmp_13_reg_2362_pp2_iter6_reg(8 downto 0) <= tmp_13_reg_2362_pp2_iter5_reg(8 downto 0);
                    tmp_13_reg_2362_pp2_iter7_reg(8 downto 0) <= tmp_13_reg_2362_pp2_iter6_reg(8 downto 0);
                    tmp_13_reg_2362_pp2_iter8_reg(8 downto 0) <= tmp_13_reg_2362_pp2_iter7_reg(8 downto 0);
                    tmp_13_reg_2362_pp2_iter9_reg(8 downto 0) <= tmp_13_reg_2362_pp2_iter8_reg(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond6_reg_2401 <= exitcond6_fu_1253_p2;
                exitcond6_reg_2401_pp3_iter1_reg <= exitcond6_reg_2401;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                exitcond_reg_2468 <= exitcond_fu_1394_p2;
                exitcond_reg_2468_pp4_iter1_reg <= exitcond_reg_2468;
                    tmp_18_reg_2477_pp4_iter1_reg(8 downto 0) <= tmp_18_reg_2477(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                exitcond_reg_2468_pp4_iter2_reg <= exitcond_reg_2468_pp4_iter1_reg;
                exitcond_reg_2468_pp4_iter3_reg <= exitcond_reg_2468_pp4_iter2_reg;
                exitcond_reg_2468_pp4_iter4_reg <= exitcond_reg_2468_pp4_iter3_reg;
                exitcond_reg_2468_pp4_iter5_reg <= exitcond_reg_2468_pp4_iter4_reg;
                exitcond_reg_2468_pp4_iter6_reg <= exitcond_reg_2468_pp4_iter5_reg;
                exitcond_reg_2468_pp4_iter7_reg <= exitcond_reg_2468_pp4_iter6_reg;
                reg_675_pp4_iter7_reg <= reg_675;
                    tmp_18_reg_2477_pp4_iter2_reg(8 downto 0) <= tmp_18_reg_2477_pp4_iter1_reg(8 downto 0);
                    tmp_18_reg_2477_pp4_iter3_reg(8 downto 0) <= tmp_18_reg_2477_pp4_iter2_reg(8 downto 0);
                    tmp_18_reg_2477_pp4_iter4_reg(8 downto 0) <= tmp_18_reg_2477_pp4_iter3_reg(8 downto 0);
                    tmp_18_reg_2477_pp4_iter5_reg(8 downto 0) <= tmp_18_reg_2477_pp4_iter4_reg(8 downto 0);
                    tmp_18_reg_2477_pp4_iter6_reg(8 downto 0) <= tmp_18_reg_2477_pp4_iter5_reg(8 downto 0);
                    tmp_18_reg_2477_pp4_iter7_reg(8 downto 0) <= tmp_18_reg_2477_pp4_iter6_reg(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_2273 <= i_1_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                i_4_reg_2396 <= i_4_fu_1243_p2;
                    j_5_cast8_reg_2382(8 downto 0) <= j_5_cast8_fu_1229_p1(8 downto 0);
                    j_5_cast_reg_2387(8 downto 0) <= j_5_cast_fu_1233_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_2278 = ap_const_lv1_1))) then
                icmp_reg_2325 <= icmp_fu_960_p2;
                sel_tmp5_reg_2330 <= sel_tmp5_fu_980_p2;
                tmp_23_reg_2297 <= tmp_23_fu_896_p2;
                tmp_24_reg_2315 <= tmp_24_fu_938_p2;
                tmp_45_1_reg_2303 <= tmp_45_1_fu_910_p2;
                tmp_47_2_reg_2309 <= tmp_47_2_fu_924_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                j_2_reg_2405 <= j_2_fu_1258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                j_3_reg_2443 <= j_3_fu_1289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1))) then
                p_0334_s_fu_256 <= p_0334_2_be_2_fu_1101_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (exitcond6_reg_2401 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)))) then
                reg_651 <= grp_fu_627_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (exitcond_reg_2468_pp4_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (exitcond4_reg_2353_pp2_iter3_reg = ap_const_lv1_0)))) then
                reg_657 <= grp_fu_624_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter12 = ap_const_logic_1) and (exitcond4_reg_2353_pp2_iter11_reg = ap_const_lv1_0)))) then
                reg_663 <= grp_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond6_reg_2401 = ap_const_lv1_0)))) then
                reg_669 <= pixelPro_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1) and (exitcond_reg_2468_pp4_iter5_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond6_reg_2401 = ap_const_lv1_0)))) then
                reg_675 <= grp_fu_611_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state58))) then
                reg_683 <= grp_fu_601_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                scale_reg_2348 <= grp_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond_reg_2468 = ap_const_lv1_0))) then
                sum_V_reg_2487 <= sum_V_fu_1411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond7_fu_1274_p2 = ap_const_lv1_1))) then
                threshold_V_reg_2433 <= threshold_V_fu_1280_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond4_fu_1208_p2 = ap_const_lv1_0))) then
                    tmp_13_reg_2362(8 downto 0) <= tmp_13_fu_1220_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond_fu_1394_p2 = ap_const_lv1_0))) then
                    tmp_18_reg_2477(8 downto 0) <= tmp_18_fu_1406_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_2_reg_2278 <= tmp_2_fu_766_p2;
                tmp_2_reg_2278_pp0_iter1_reg <= tmp_2_reg_2278;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (exitcond4_reg_2353 = ap_const_lv1_0))) then
                tmp_V_reg_2372 <= hist_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                u1_reg_2453 <= grp_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond6_reg_2401 = ap_const_lv1_0))) then
                w0_1_reg_2420 <= grp_fu_601_p2;
            end if;
        end if;
    end process;
    tmp_13_reg_2362(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter1_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter2_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter3_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter4_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter5_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter6_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter7_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter8_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter9_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter10_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter11_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2362_pp2_iter12_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    j_5_cast8_reg_2382(31 downto 9) <= "00000000000000000000000";
    j_5_cast_reg_2387(9) <= '0';
    tmp_18_reg_2477(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_18_reg_2477_pp4_iter1_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_18_reg_2477_pp4_iter2_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_18_reg_2477_pp4_iter3_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_18_reg_2477_pp4_iter4_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_18_reg_2477_pp4_iter5_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_18_reg_2477_pp4_iter6_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_18_reg_2477_pp4_iter7_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    p_Result_8_reg_2507(53 downto 52) <= "01";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter12, ap_CS_fsm_state2, tmp_1_fu_751_p2, ap_CS_fsm_state3, ap_enable_reg_pp0_iter0, ap_CS_fsm_state8, exitcond4_fu_1208_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state36, exitcond5_fu_1237_p2, exitcond6_fu_1253_p2, ap_CS_fsm_pp3_stage3, ap_enable_reg_pp3_iter1, ap_CS_fsm_state47, exitcond7_fu_1274_p2, exitcond_fu_1394_p2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_block_pp0_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter13, ap_block_pp3_stage0_subdone, ap_block_pp3_stage4_subdone, ap_block_pp3_stage3_subdone, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter7, ap_enable_reg_pp4_iter8, exitcond2_fu_689_p2, exitcond3_fu_1164_p2, ap_block_pp3_stage1_subdone, ap_block_pp3_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_751_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_1164_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond4_fu_1208_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (exitcond4_fu_1208_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond5_fu_1237_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond6_fu_1253_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond6_fu_1253_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_pp3_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                end if;
            when ap_ST_fsm_pp3_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage3_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp3_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage4;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage3_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                end if;
            when ap_ST_fsm_pp3_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage4;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond7_fu_1274_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (exitcond_fu_1394_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp4_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (exitcond_fu_1394_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
        F2_2_cast_i_fu_1577_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(F2_2_reg_2537),32));

    F2_2_fu_1497_p3 <= 
        F2_fu_1479_p2 when (tmp_41_i_fu_1485_p2(0) = '1') else 
        tmp_42_i_fu_1491_p2;
    F2_fu_1479_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_i_fu_1447_p1));
    Range1_all_ones_1_fu_1851_p2 <= (tmp_57_i_fu_1811_p2 and tmp13_fu_1845_p2);
    Range1_all_ones_2_i_fu_2019_p2 <= (carry_1_i_i_i_fu_1779_p2 and Range1_all_ones_2_i_s_fu_1987_p3);
    Range1_all_ones_2_i_s_fu_1987_p3 <= 
        Range1_all_ones_fu_1919_p2 when (or_cond175_i_i_i_fu_1913_p2(0) = '1') else 
        sel_tmp35_i_fu_1979_p3;
    Range1_all_ones_fu_1919_p2 <= (Range2_all_ones_1_i_s_fu_1905_p3 and Range1_all_ones_1_fu_1851_p2);
    Range1_all_zeros_1_fu_1949_p2 <= "1" when (p_Val2_s_fu_1569_p3 = ap_const_lv54_0) else "0";
    Range1_all_zeros_2_i_fu_2003_p3 <= 
        p_180_i_i_i_fu_1937_p2 when (or_cond175_i_i_i_fu_1913_p2(0) = '1') else 
        sel_tmp39_i_fu_1995_p3;
    Range1_all_zeros_fu_1931_p2 <= (ap_const_lv1_1 xor Range1_all_ones_1_fu_1851_p2);
    Range2_V_1_fu_1887_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_s_fu_1569_p3),to_integer(unsigned('0' & tmp_63_i_fu_1883_p1(31-1 downto 0)))));
    Range2_all_ones_1_i_s_fu_1905_p3 <= 
        Range2_all_ones_fu_1899_p2 when (or_cond173_i_i_i_fu_1877_p2(0) = '1') else 
        rev2_fu_1865_p2;
    Range2_all_ones_fu_1899_p2 <= "1" when (Range2_V_1_fu_1887_p2 = r_V_fu_1893_p2) else "0";
    addr_V_1_0337_2_be_fu_916_p3 <= 
        addr_win_val_0_V_2_fu_264 when (tmp_45_1_fu_910_p2(0) = '1') else 
        p_0337_2_be_fu_902_p3;
    addr_win_val_V_0_0_2_fu_994_p3 <= 
        addr_last_V_fu_276 when (sel_tmp5_fu_980_p2(0) = '1') else 
        sel_tmp8_fu_986_p3;
    addr_win_val_V_load_s_fu_1182_p3 <= 
        addr_win_val_0_V_1_fu_268 when (cond_fu_1176_p2(0) = '1') else 
        addr_win_val_0_V_2_fu_264;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(22);
    ap_CS_fsm_pp3_stage2 <= ap_CS_fsm(23);
    ap_CS_fsm_pp3_stage3 <= ap_CS_fsm(24);
    ap_CS_fsm_pp3_stage4 <= ap_CS_fsm(25);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(56);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(19);
    ap_CS_fsm_state36 <= ap_CS_fsm(20);
    ap_CS_fsm_state46 <= ap_CS_fsm(26);
    ap_CS_fsm_state47 <= ap_CS_fsm(27);
    ap_CS_fsm_state48 <= ap_CS_fsm(28);
    ap_CS_fsm_state49 <= ap_CS_fsm(29);
    ap_CS_fsm_state50 <= ap_CS_fsm(30);
    ap_CS_fsm_state51 <= ap_CS_fsm(31);
    ap_CS_fsm_state52 <= ap_CS_fsm(32);
    ap_CS_fsm_state55 <= ap_CS_fsm(35);
    ap_CS_fsm_state58 <= ap_CS_fsm(38);
    ap_CS_fsm_state59 <= ap_CS_fsm(39);
    ap_CS_fsm_state60 <= ap_CS_fsm(40);
    ap_CS_fsm_state65 <= ap_CS_fsm(45);
    ap_CS_fsm_state66 <= ap_CS_fsm(46);
    ap_CS_fsm_state67 <= ap_CS_fsm(47);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state70 <= ap_CS_fsm(50);
    ap_CS_fsm_state71 <= ap_CS_fsm(51);
    ap_CS_fsm_state72 <= ap_CS_fsm(52);
    ap_CS_fsm_state73 <= ap_CS_fsm(53);
    ap_CS_fsm_state74 <= ap_CS_fsm(54);
    ap_CS_fsm_state75 <= ap_CS_fsm(55);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state85 <= ap_CS_fsm(57);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, tmp_2_reg_2278, ap_enable_reg_pp0_iter2, tmp_2_reg_2278_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_2_reg_2278 = ap_const_lv1_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, tmp_2_reg_2278, ap_enable_reg_pp0_iter2, tmp_2_reg_2278_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_2_reg_2278 = ap_const_lv1_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, tmp_2_reg_2278, ap_enable_reg_pp0_iter2, tmp_2_reg_2278_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_2_reg_2278 = ap_const_lv1_1)));
    end process;


    ap_block_pp2_assign_proc : process(ap_CS_fsm, ap_block_pp2_stage0_subdone)
    begin
                ap_block_pp2 <= ((ap_const_boolean_1 = ap_block_pp2_stage0_subdone) and (ap_ST_fsm_pp2_stage0 = ap_CS_fsm));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_assign_proc : process(ap_CS_fsm, ap_block_pp3_stage0_subdone, ap_block_pp3_stage4_subdone, ap_block_pp3_stage3_subdone, ap_block_pp3_stage1_subdone, ap_block_pp3_stage2_subdone)
    begin
                ap_block_pp3 <= (((ap_const_boolean_1 = ap_block_pp3_stage3_subdone) and (ap_ST_fsm_pp3_stage3 = ap_CS_fsm)) or ((ap_const_boolean_1 = ap_block_pp3_stage0_subdone) and (ap_ST_fsm_pp3_stage0 = ap_CS_fsm)) or ((ap_const_boolean_1 = ap_block_pp3_stage4_subdone) and (ap_ST_fsm_pp3_stage4 = ap_CS_fsm)) or ((ap_const_boolean_1 = ap_block_pp3_stage1_subdone) and (ap_ST_fsm_pp3_stage1 = ap_CS_fsm)) or ((ap_const_boolean_1 = ap_block_pp3_stage2_subdone) and (ap_ST_fsm_pp3_stage2 = ap_CS_fsm)));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_assign_proc : process(ap_CS_fsm, ap_block_pp4_stage0_subdone)
    begin
                ap_block_pp4 <= ((ap_const_boolean_1 = ap_block_pp4_stage0_subdone) and (ap_ST_fsm_pp4_stage0 = ap_CS_fsm));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state21_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp3_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp3_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp3_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp3_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(p_src_data_stream_V_empty_n, tmp_2_reg_2278)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (tmp_2_reg_2278 = ap_const_lv1_1));
    end process;


    ap_block_state6_pp0_stage0_iter2_assign_proc : process(p_dst_data_stream_V_full_n, tmp_2_reg_2278_pp0_iter1_reg)
    begin
                ap_block_state6_pp0_stage0_iter2 <= ((p_dst_data_stream_V_full_n = ap_const_logic_0) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1));
    end process;

        ap_block_state76_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp4_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp4_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp4_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp4_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state21_assign_proc : process(exitcond4_fu_1208_p2)
    begin
        if ((exitcond4_fu_1208_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state37_assign_proc : process(exitcond6_fu_1253_p2)
    begin
        if ((exitcond6_fu_1253_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state37 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state76_assign_proc : process(exitcond_fu_1394_p2)
    begin
        if ((exitcond_fu_1394_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state76 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state76 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_177_assign_proc : process(tmp_2_reg_2278)
    begin
                ap_enable_operation_177 <= (tmp_2_reg_2278 = ap_const_lv1_1);
    end process;


    ap_enable_operation_213_assign_proc : process(tmp_2_reg_2278_pp0_iter1_reg)
    begin
                ap_enable_operation_213 <= (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_220_assign_proc : process(tmp_2_reg_2278_pp0_iter1_reg)
    begin
                ap_enable_operation_220 <= (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_enable_state5_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state5_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state6_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state6_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter13)
    begin
        if (((ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter4, ap_enable_reg_pp4_iter6, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter7, ap_enable_reg_pp4_iter8)
    begin
        if (((ap_enable_reg_pp4_iter8 = ap_const_logic_0) and (ap_enable_reg_pp4_iter7 = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j7_phi_fu_549_p4_assign_proc : process(j7_reg_545, exitcond6_reg_2401, ap_CS_fsm_pp3_stage0, j_2_reg_2405, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond6_reg_2401 = ap_const_lv1_0))) then 
            ap_phi_mux_j7_phi_fu_549_p4 <= j_2_reg_2405;
        else 
            ap_phi_mux_j7_phi_fu_549_p4 <= j7_reg_545;
        end if; 
    end process;


    ap_phi_mux_p_4_phi_fu_582_p4_assign_proc : process(p_4_reg_578, exitcond_reg_2468_pp4_iter1_reg, sum_V_reg_2487, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (exitcond_reg_2468_pp4_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_p_4_phi_fu_582_p4 <= sum_V_reg_2487;
        else 
            ap_phi_mux_p_4_phi_fu_582_p4 <= p_4_reg_578;
        end if; 
    end process;


    ap_phi_mux_w0_phi_fu_525_p4_assign_proc : process(w0_reg_521, ap_CS_fsm_pp3_stage1, exitcond6_reg_2401_pp3_iter1_reg, w0_1_reg_2420, ap_enable_reg_pp3_iter1, ap_block_pp3_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (exitcond6_reg_2401_pp3_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_w0_phi_fu_525_p4 <= w0_1_reg_2420;
        else 
            ap_phi_mux_w0_phi_fu_525_p4 <= w0_reg_521;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    brmerge_i_fu_2090_p2 <= (underflow_not_i_fu_2072_p2 or p_179_demorgan_i_i_no_fu_2084_p2);
    brmerge_i_i_not_i_fu_2078_p2 <= (underflow_not_i_fu_2072_p2 and p_179_demorgan_i_i_i_fu_2066_p2);
    carry_1_i_i_i_fu_1779_p2 <= (tmp12_fu_1773_p2 and sel_tmp3_i_fu_1705_p2);
    cond_fu_1176_p2 <= "1" when (col_assign_reg_463 = ap_const_lv2_0) else "0";
    data_val_V_cast_fu_2172_p3 <= 
        ap_const_lv2_3 when (tmp_21_fu_2166_p2(0) = '1') else 
        ap_const_lv2_0;
    deleted_zeros_fu_2011_p3 <= 
        Range1_all_ones_2_i_s_fu_1987_p3 when (carry_1_i_i_i_fu_1779_p2(0) = '1') else 
        Range1_all_zeros_2_i_fu_2003_p3;
    deltaMax_1_fu_1386_p3 <= 
        reg_675 when (tmp_49_fu_1373_p2(0) = '1') else 
        deltaMax_reg_509;
    deltaMax_to_int_fu_1313_p1 <= deltaMax_reg_509;
    deltaTmp_to_int_fu_1295_p1 <= reg_675;
    exitcond2_fu_689_p2 <= "1" when (i1_reg_430 = ap_const_lv9_100) else "0";
    exitcond3_fu_1164_p2 <= "1" when (col_assign_reg_463 = ap_const_lv2_2) else "0";
    exitcond4_fu_1208_p2 <= "1" when (i5_reg_474 = ap_const_lv9_100) else "0";
    exitcond5_fu_1237_p2 <= "1" when (j_4_reg_485 = ap_const_lv9_100) else "0";
    exitcond6_fu_1253_p2 <= "1" when (j7_cast_fu_1249_p1 = j_5_cast_reg_2387) else "0";
    exitcond7_fu_1274_p2 <= "1" when (j8_reg_568 = ap_const_lv32_100) else "0";
    exitcond_fu_1394_p2 <= "1" when (i9_reg_590 = ap_const_lv9_100) else "0";
    exp_tmp_V_fu_1437_p4 <= ireg_V_fu_1421_p1(62 downto 52);

    grp_fu_601_opcode_assign_proc : process(ap_enable_reg_pp3_iter0, exitcond6_reg_2401, ap_CS_fsm_pp3_stage1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state47, exitcond7_fu_1274_p2, ap_CS_fsm_state52, ap_CS_fsm_state67, ap_block_pp3_stage1_00001, ap_block_pp3_stage0_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond7_fu_1274_p2 = ap_const_lv1_1)))) then 
            grp_fu_601_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond6_reg_2401 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond6_reg_2401 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage1_00001)))) then 
            grp_fu_601_opcode <= ap_const_lv2_0;
        else 
            grp_fu_601_opcode <= "XX";
        end if; 
    end process;


    grp_fu_601_p0_assign_proc : process(u0tmp_reg_533, ap_enable_reg_pp3_iter0, reg_663, ap_CS_fsm_pp3_stage1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state47, ap_phi_mux_w0_phi_fu_525_p4, ap_block_pp3_stage1, ap_block_pp3_stage0, u1tmp_reg_556, ap_CS_fsm_state52, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_601_p0 <= reg_663;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_601_p0 <= u1tmp_reg_556;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_601_p0 <= ap_const_lv32_3F800000;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            grp_fu_601_p0 <= u0tmp_reg_533;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            grp_fu_601_p0 <= ap_phi_mux_w0_phi_fu_525_p4;
        else 
            grp_fu_601_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_601_p1_assign_proc : process(w0_reg_521, ap_enable_reg_pp3_iter0, pixelPro_q0, ap_CS_fsm_pp3_stage1, reg_675, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state47, u1_reg_2453, ap_block_pp3_stage1, ap_block_pp3_stage0, ap_CS_fsm_state52, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_601_p1 <= u1_reg_2453;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_601_p1 <= w0_reg_521;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            grp_fu_601_p1 <= reg_675;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            grp_fu_601_p1 <= pixelPro_q0;
        else 
            grp_fu_601_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_611_p0_assign_proc : process(w0_reg_521, reg_651, ap_enable_reg_pp3_iter0, reg_657, reg_675, ap_CS_fsm_pp3_stage3, ap_enable_reg_pp4_iter5, ap_block_pp4_stage0, ap_block_pp3_stage3, ap_CS_fsm_state50, ap_CS_fsm_state59, ap_CS_fsm_state71, ap_CS_fsm_state73)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1))) then 
            grp_fu_611_p0 <= reg_657;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            grp_fu_611_p0 <= reg_675;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_611_p0 <= w0_reg_521;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or ((ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            grp_fu_611_p0 <= reg_651;
        else 
            grp_fu_611_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_611_p1_assign_proc : process(ap_enable_reg_pp3_iter0, reg_669, reg_683, scale_reg_2348, ap_CS_fsm_pp3_stage3, ap_enable_reg_pp4_iter5, ap_block_pp4_stage0, ap_block_pp3_stage3, ap_CS_fsm_state50, ap_CS_fsm_state59, ap_CS_fsm_state71, ap_CS_fsm_state73)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1))) then 
            grp_fu_611_p1 <= scale_reg_2348;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            grp_fu_611_p1 <= reg_683;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or ((ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            grp_fu_611_p1 <= reg_669;
        else 
            grp_fu_611_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_616_p0_assign_proc : process(u0tmp_reg_533, reg_657, ap_CS_fsm_state58, ap_enable_reg_pp2_iter5, u1tmp_reg_556, ap_block_pp2_stage0, ap_CS_fsm_state59, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_616_p0 <= u1tmp_reg_556;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_616_p0 <= u0tmp_reg_533;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1))) then 
            grp_fu_616_p0 <= reg_657;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_616_p0 <= ap_const_lv32_437F0000;
        else 
            grp_fu_616_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_616_p1_assign_proc : process(w0_reg_521, reg_651, reg_683, ap_CS_fsm_state58, ap_enable_reg_pp2_iter5, ap_block_pp2_stage0, ap_CS_fsm_state59, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_616_p1 <= reg_683;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_616_p1 <= w0_reg_521;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1)))) then 
            grp_fu_616_p1 <= reg_651;
        else 
            grp_fu_616_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_624_p0_assign_proc : process(tmp_38_fu_1225_p1, tmp_39_fu_1417_p1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            grp_fu_624_p0 <= tmp_39_fu_1417_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            grp_fu_624_p0 <= tmp_38_fu_1225_p1;
        else 
            grp_fu_624_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_627_p0_assign_proc : process(ap_enable_reg_pp3_iter0, tmp_s_fu_1204_p2, ap_CS_fsm_pp3_stage0, j7_cast7_fu_1264_p1, ap_CS_fsm_state47, ap_block_pp3_stage0, j8_reg_568, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_627_p0 <= j8_reg_568;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            grp_fu_627_p0 <= j7_cast7_fu_1264_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_627_p0 <= tmp_s_fu_1204_p2;
        else 
            grp_fu_627_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    hist_flag_V_2_fu_1088_p2 <= std_logic_vector(unsigned(hist_win_val_V_fu_284) + unsigned(ap_const_lv21_1));
    hist_flag_V_fu_1047_p2 <= std_logic_vector(unsigned(hist_win_val_0_V_2_1_fu_288) + unsigned(ap_const_lv21_1));
    hist_last_V_fu_1041_p2 <= std_logic_vector(unsigned(hist_win_val_0_V_3_1_fu_292) + unsigned(ap_const_lv21_1));

    hist_out_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, tmp_13_fu_1220_p1, tmp_8_fu_701_p1, tmp_6_fu_786_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            hist_out_V_address0 <= tmp_13_fu_1220_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hist_out_V_address0 <= tmp_6_fu_786_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hist_out_V_address0 <= tmp_8_fu_701_p1(8 - 1 downto 0);
        else 
            hist_out_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    hist_out_V_address1_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state8, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, tmp_18_fu_1406_p1, ap_block_pp4_stage0, tmp_34_fu_1135_p1, tmp_7_fu_1190_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            hist_out_V_address1 <= tmp_18_fu_1406_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hist_out_V_address1 <= tmp_7_fu_1190_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hist_out_V_address1 <= tmp_34_fu_1135_p1(8 - 1 downto 0);
        else 
            hist_out_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    hist_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_state2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            hist_out_V_ce0 <= ap_const_logic_1;
        else 
            hist_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hist_out_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp4_stage0_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_state8, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            hist_out_V_ce1 <= ap_const_logic_1;
        else 
            hist_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hist_out_V_d1_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state8, hist_win_val_0_V_2_fu_1073_p3, hist_win_val_V_load_s_fu_1195_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hist_out_V_d1 <= hist_win_val_V_load_s_fu_1195_p3;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hist_out_V_d1 <= hist_win_val_0_V_2_fu_1073_p3;
        else 
            hist_out_V_d1 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hist_out_V_we0_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_689_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_0))) then 
            hist_out_V_we0 <= ap_const_logic_1;
        else 
            hist_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hist_out_V_we1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_2_reg_2278_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_CS_fsm_state8, exitcond3_fu_1164_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_1164_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1)))) then 
            hist_out_V_we1 <= ap_const_logic_1;
        else 
            hist_out_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    hist_w_V_172_0334_2_fu_1081_p3 <= 
        hist_w_V_s_fu_1067_p2 when (tmp_45_1_reg_2303(0) = '1') else 
        p_0334_2_be_fu_1060_p3;
    hist_w_V_s_fu_1067_p2 <= std_logic_vector(unsigned(hist_win_val_0_V_1_1_fu_280) + unsigned(ap_const_lv21_1));
    hist_win_val_0_V_0_fu_1108_p2 <= std_logic_vector(unsigned(hist_out_V_q0) + unsigned(ap_const_lv21_1));
    hist_win_val_0_V_1_fu_1094_p3 <= 
        hist_flag_V_2_fu_1088_p2 when (tmp_47_2_reg_2309(0) = '1') else 
        hist_win_val_V_fu_284;
    hist_win_val_0_V_2_fu_1073_p3 <= 
        hist_w_V_s_fu_1067_p2 when (tmp_45_1_reg_2303(0) = '1') else 
        hist_win_val_0_V_1_1_fu_280;
    hist_win_val_0_V_3_fu_1053_p3 <= 
        hist_flag_V_fu_1047_p2 when (tmp_23_reg_2297(0) = '1') else 
        hist_win_val_0_V_2_1_fu_288;
    hist_win_val_V_0_0_2_fu_1128_p3 <= 
        hist_last_V_fu_1041_p2 when (sel_tmp5_reg_2330(0) = '1') else 
        sel_tmp9_fu_1121_p3;
    hist_win_val_V_load_s_fu_1195_p3 <= 
        hist_win_val_V_fu_284 when (cond_fu_1176_p2(0) = '1') else 
        hist_win_val_0_V_1_1_fu_280;

    hls_array_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_18_reg_2477_pp4_iter7_reg, ap_enable_reg_pp4_iter8, ap_block_pp4_stage0, tmp_6_fu_786_p1, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            hls_array_data_V_address0 <= ap_const_lv8_0;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then 
            hls_array_data_V_address0 <= tmp_18_reg_2477_pp4_iter7_reg(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hls_array_data_V_address0 <= tmp_6_fu_786_p1(8 - 1 downto 0);
        else 
            hls_array_data_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    hls_array_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp4_stage0_11001, ap_block_pp0_stage0_11001, ap_enable_reg_pp4_iter8, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            hls_array_data_V_ce0 <= ap_const_logic_1;
        else 
            hls_array_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hls_array_data_V_d0_assign_proc : process(ap_enable_reg_pp4_iter8, ap_block_pp4_stage0, data_val_V_cast_fu_2172_p3, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            hls_array_data_V_d0 <= ap_const_lv2_0;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then 
            hls_array_data_V_d0 <= data_val_V_cast_fu_2172_p3;
        else 
            hls_array_data_V_d0 <= "XX";
        end if; 
    end process;


    hls_array_data_V_we0_assign_proc : process(ap_block_pp4_stage0_11001, exitcond_reg_2468_pp4_iter7_reg, ap_enable_reg_pp4_iter8, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1) and (exitcond_reg_2468_pp4_iter7_reg = ap_const_lv1_0)))) then 
            hls_array_data_V_we0 <= ap_const_logic_1;
        else 
            hls_array_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i2_cast_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_441),32));
    i_1_fu_756_p2 <= std_logic_vector(unsigned(i2_reg_441) + unsigned(ap_const_lv31_1));
    i_2_fu_1214_p2 <= std_logic_vector(unsigned(i5_reg_474) + unsigned(ap_const_lv9_1));
    i_3_fu_1400_p2 <= std_logic_vector(unsigned(i9_reg_590) + unsigned(ap_const_lv9_1));
    i_4_fu_1243_p2 <= std_logic_vector(unsigned(j_4_reg_485) + unsigned(ap_const_lv9_1));
    i_fu_695_p2 <= std_logic_vector(unsigned(i1_reg_430) + unsigned(ap_const_lv9_1));
    icmp1_fu_1527_p2 <= "1" when (tmp_55_fu_1517_p4 = ap_const_lv9_0) else "0";
    icmp_fu_960_p2 <= "0" when (tmp_30_fu_950_p4 = ap_const_lv2_0) else "1";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_1421_p1 <= d_assign_fu_631_p1;
    j7_cast7_fu_1264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j7_phi_fu_549_p4),32));
    j7_cast_fu_1249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j7_phi_fu_549_p4),10));
    j_1_fu_771_p2 <= std_logic_vector(unsigned(j_reg_452) + unsigned(ap_const_lv31_1));
    j_2_fu_1258_p2 <= std_logic_vector(unsigned(ap_phi_mux_j7_phi_fu_549_p4) + unsigned(ap_const_lv8_1));
    j_3_fu_1289_p2 <= std_logic_vector(signed(j8_reg_568) + signed(ap_const_lv32_1));
    j_5_cast8_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_485),32));
    j_5_cast_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_485),10));
    j_cast_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_452),32));
    lD_fu_1841_p1 <= tmp_60_i_fu_1835_p2(1 - 1 downto 0);
    m_fu_1170_p2 <= std_logic_vector(unsigned(col_assign_reg_463) + unsigned(ap_const_lv2_1));
    man_V_1_fu_1467_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_8_fu_1463_p1));
    not_sel_tmp28_i_fu_1767_p2 <= (tmp_47_not_i_fu_1762_p2 or sel_tmp12_demorgan_i_fu_1739_p2);
    notlhs1_fu_1349_p2 <= "0" when (tmp_43_fu_1317_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_1331_p2 <= "0" when (tmp_41_fu_1299_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_1355_p2 <= "1" when (tmp_65_fu_1327_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_1337_p2 <= "1" when (tmp_64_fu_1309_p1 = ap_const_lv23_0) else "0";
    or_cond173_i_i_i_fu_1877_p2 <= (tmp_62_i_fu_1871_p2 and rev2_fu_1865_p2);
    or_cond175_i_i_i_fu_1913_p2 <= (tmp_62_i_fu_1871_p2 and rev1_fu_1825_p2);
    p_0334_2_be_2_fu_1101_p3 <= 
        hist_flag_V_2_fu_1088_p2 when (tmp_47_2_reg_2309(0) = '1') else 
        hist_w_V_172_0334_2_fu_1081_p3;
    p_0334_2_be_fu_1060_p3 <= 
        hist_flag_V_fu_1047_p2 when (tmp_23_reg_2297(0) = '1') else 
        p_0334_s_fu_256;
    p_0337_2_be_2_fu_930_p3 <= 
        addr_win_val_0_V_1_fu_268 when (tmp_47_2_fu_924_p2(0) = '1') else 
        addr_V_1_0337_2_be_fu_916_p3;
    p_0337_2_be_fu_902_p3 <= 
        addr_win_val_0_V_3_fu_272 when (tmp_23_fu_896_p2(0) = '1') else 
        p_0337_s_fu_260;
    p_177_i_i_i_fu_1955_p2 <= (rev1_fu_1825_p2 or Range1_all_zeros_1_fu_1949_p2);
    p_179_demorgan_i_i_i_fu_2066_p2 <= (tmp15_fu_2061_p2 or deleted_zeros_fu_2011_p3);
    p_179_demorgan_i_i_no_fu_2084_p2 <= (p_179_demorgan_i_i_i_fu_2066_p2 xor ap_const_lv1_1);
    p_180_i_i_i_fu_1937_p2 <= (tmp_64_i_fu_1925_p2 and Range1_all_zeros_fu_1931_p2);
    p_3_fu_882_p3 <= 
        sel_tmp3_cast_fu_868_p3 when (tmp_20_fu_876_p2(0) = '1') else 
        sel_tmp_fu_830_p3;
    p_Result_10_fu_1803_p3 <= p_Val2_5_fu_1754_p3(7 downto 7);
    p_Result_8_fu_1463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_i_fu_1455_p3),54));
    p_Result_9_fu_1656_p3 <= p_Val2_3_fu_1620_p3(7 downto 7);
    p_Result_s_fu_1641_p3 <= p_Val2_s_fu_1569_p3(to_integer(unsigned(tmp_63_cast_i_fu_1637_p1)) downto to_integer(unsigned(tmp_63_cast_i_fu_1637_p1))) when (to_integer(unsigned(tmp_63_cast_i_fu_1637_p1))>= 0 and to_integer(unsigned(tmp_63_cast_i_fu_1637_p1))<=53) else "-";
    p_Val2_11_0_i_i_mux_fu_2096_p3 <= 
        p_Val2_5_fu_1754_p3 when (brmerge_i_i_not_i_fu_2078_p2(0) = '1') else 
        ap_const_lv8_FF;
    p_Val2_1_fu_1533_p1 <= reg_675_pp4_iter7_reg;
    p_Val2_3_fu_1620_p3 <= 
        tmp_56_fu_1594_p1 when (tmp_45_i_reg_2550(0) = '1') else 
        tmp_51_i_fu_1606_p3;
    p_Val2_4_fu_1668_p2 <= std_logic_vector(unsigned(p_Val2_3_fu_1620_p3) + unsigned(tmp_55_i_fu_1664_p1));
    p_Val2_5_fu_1754_p3 <= 
        tmp_52_i_fu_1614_p2 when (sel_tmp13_i_fu_1749_p2(0) = '1') else 
        sel_tmp9_i_fu_1731_p3;
    p_Val2_s_fu_1569_p3 <= 
        man_V_1_reg_2512 when (p_Result_7_reg_2498(0) = '1') else 
        p_Result_8_reg_2507;
    p_cast_fu_816_p3 <= 
        ap_const_lv3_0 when (tmp_9_fu_792_p2(0) = '1') else 
        ap_const_lv3_3;

    p_dst_data_stream_V_blk_n_assign_proc : process(p_dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_2_reg_2278_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_dst_data_stream_V_blk_n <= p_dst_data_stream_V_full_n;
        else 
            p_dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        p_dst_data_stream_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(hls_array_data_V_q0),8));


    p_dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_2_reg_2278_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_2_reg_2278_pp0_iter1_reg = ap_const_lv1_1))) then 
            p_dst_data_stream_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_V_blk_n_assign_proc : process(p_src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_2_reg_2278)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_2278 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_src_data_stream_V_blk_n <= p_src_data_stream_V_empty_n;
        else 
            p_src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_2_reg_2278, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_2278 = ap_const_lv1_1))) then 
            p_src_data_stream_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    pixelPro_address0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_state2, tmp_13_reg_2362_pp2_iter12_reg, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state48, ap_enable_reg_pp2_iter13, ap_block_pp3_stage0, tmp_8_fu_701_p1, ap_block_pp2_stage0, tmp_26_fu_1269_p1, tmp_36_fu_1284_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            pixelPro_address0 <= tmp_36_fu_1284_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            pixelPro_address0 <= tmp_26_fu_1269_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1))) then 
            pixelPro_address0 <= tmp_13_reg_2362_pp2_iter12_reg(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pixelPro_address0 <= tmp_8_fu_701_p1(8 - 1 downto 0);
        else 
            pixelPro_address0 <= "XXXXXXXX";
        end if; 
    end process;


    pixelPro_ce0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_state48, ap_enable_reg_pp2_iter13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            pixelPro_ce0 <= ap_const_logic_1;
        else 
            pixelPro_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pixelPro_d0_assign_proc : process(reg_663, ap_CS_fsm_state2, ap_enable_reg_pp2_iter13, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1))) then 
            pixelPro_d0 <= reg_663;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pixelPro_d0 <= ap_const_lv32_0;
        else 
            pixelPro_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pixelPro_we0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_state2, exitcond4_reg_2353_pp2_iter12_reg, ap_enable_reg_pp2_iter13, exitcond2_fu_689_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_689_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1) and (exitcond4_reg_2353_pp2_iter12_reg = ap_const_lv1_0)))) then 
            pixelPro_we0 <= ap_const_logic_1;
        else 
            pixelPro_we0 <= ap_const_logic_0;
        end if; 
    end process;

        pos1_cast_i_fu_1790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos1_fu_1785_p2),32));

    pos1_fu_1785_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) + unsigned(F2_reg_2523));
        pos2_cast_i_fu_1799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos2_fu_1794_p2),32));

    pos2_fu_1794_p2 <= std_logic_vector(unsigned(ap_const_lv12_9) + unsigned(F2_reg_2523));
    qb_fu_1649_p3 <= 
        p_Result_7_reg_2498 when (tmp_53_i_fu_1627_p2(0) = '1') else 
        p_Result_s_fu_1641_p3;
    r_V_fu_1893_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_63_i_fu_1883_p1(31-1 downto 0)))));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_V_fu_890_p2 <= std_logic_vector(unsigned(p_3_fu_882_p3) + unsigned(ap_const_lv3_1));
    rev1_fu_1825_p2 <= (tmp_61_fu_1817_p3 xor ap_const_lv1_1);
    rev2_fu_1865_p2 <= (tmp_63_fu_1857_p3 xor ap_const_lv1_1);
    rev_fu_1682_p2 <= (tmp_59_fu_1674_p3 xor ap_const_lv1_1);
    sel_tmp12_demorgan_i_fu_1739_p2 <= (tmp_43_i_reg_2543 or tmp_41_i_reg_2531);
    sel_tmp12_i_fu_1743_p2 <= (sel_tmp12_demorgan_i_fu_1739_p2 xor ap_const_lv1_1);
    sel_tmp13_i_fu_1749_p2 <= (sel_tmp12_i_fu_1743_p2 and icmp1_reg_2555);
    sel_tmp1_fu_838_p2 <= (tmp_9_fu_792_p2 xor ap_const_lv1_1);
    sel_tmp1_i_fu_1695_p2 <= (tmp_43_i_reg_2543 xor ap_const_lv1_1);
    sel_tmp2_fu_844_p2 <= (tmp_23_1_fu_798_p2 and sel_tmp1_fu_838_p2);
    sel_tmp2_i_fu_1700_p2 <= (tmp_41_i_reg_2531 and sel_tmp1_i_fu_1695_p2);
    sel_tmp33_i_fu_1967_p2 <= (tmp_62_i_not_fu_1961_p2 or tmp_61_fu_1817_p3);
    sel_tmp34_i_fu_1973_p2 <= (tmp_66_i_fu_1943_p2 and sel_tmp33_i_fu_1967_p2);
    sel_tmp35_i_fu_1979_p3 <= 
        Range1_all_ones_1_fu_1851_p2 when (sel_tmp34_i_fu_1973_p2(0) = '1') else 
        rev1_fu_1825_p2;
    sel_tmp39_i_fu_1995_p3 <= 
        Range1_all_zeros_fu_1931_p2 when (sel_tmp34_i_fu_1973_p2(0) = '1') else 
        p_177_i_i_i_fu_1955_p2;
    sel_tmp3_cast_fu_868_p3 <= 
        ap_const_lv3_2 when (sel_tmp7_fu_862_p2(0) = '1') else 
        ap_const_lv3_1;
    sel_tmp3_i_fu_1705_p2 <= (sel_tmp2_i_fu_1700_p2 and p_Result_9_fu_1656_p3);
    sel_tmp41_i_fu_2031_p2 <= (tmp_57_i_fu_1811_p2 xor ap_const_lv1_1);
    sel_tmp46_i_fu_2043_p2 <= (tmp14_fu_2037_p2 and p_Result_7_reg_2498);
    sel_tmp47_i_fu_2048_p2 <= (tmp_57_i_fu_1811_p2 and p_Result_7_reg_2498);
    sel_tmp4_fu_974_p2 <= (tmp_24_fu_938_p2 xor ap_const_lv1_1);
    sel_tmp4_i_fu_1711_p3 <= 
        p_Val2_4_fu_1668_p2 when (sel_tmp3_i_fu_1705_p2(0) = '1') else 
        sel_tmp_i_fu_1688_p3;
    sel_tmp50_i_demorgan_fu_2104_p2 <= (tmp_i_i_i_i_fu_1551_p2 and tmp_i_i_i_i_20_fu_1557_p2);
    sel_tmp50_i_fu_2110_p2 <= (sel_tmp50_i_demorgan_fu_2104_p2 xor ap_const_lv1_1);
    sel_tmp51_i_fu_2116_p2 <= (tmp_40_i_reg_2517 and sel_tmp50_i_fu_2110_p2);
    sel_tmp52_i_fu_2133_p3 <= 
        ap_const_lv8_0 when (tmp_42_fu_2127_p2(0) = '1') else 
        p_Val2_5_fu_1754_p3;
    sel_tmp55_demorgan_i_fu_2141_p2 <= (tmp_demorgan_i_fu_1563_p2 or tmp_40_i_reg_2517);
    sel_tmp55_i_fu_2146_p2 <= (sel_tmp55_demorgan_i_fu_2141_p2 xor ap_const_lv1_1);
    sel_tmp56_i_fu_2152_p2 <= (sel_tmp55_i_fu_2146_p2 and brmerge_i_fu_2090_p2);
    sel_tmp5_fu_980_p2 <= (tmp_29_fu_944_p2 and sel_tmp4_fu_974_p2);
    sel_tmp6_demorgan_fu_850_p2 <= (tmp_9_fu_792_p2 or tmp_23_1_fu_798_p2);
    sel_tmp6_fu_856_p2 <= (sel_tmp6_demorgan_fu_850_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_862_p2 <= (tmp_23_2_fu_804_p2 and sel_tmp6_fu_856_p2);
    sel_tmp7_i_fu_1719_p2 <= (p_Result_9_fu_1656_p3 xor ap_const_lv1_1);
    sel_tmp8_fu_986_p3 <= 
        p_src_data_stream_V_dout when (tmp_24_fu_938_p2(0) = '1') else 
        storemerge_fu_966_p3;
    sel_tmp8_i_fu_1725_p2 <= (sel_tmp7_i_fu_1719_p2 and sel_tmp2_i_fu_1700_p2);
    sel_tmp9_fu_1121_p3 <= 
        hist_win_val_0_V_0_fu_1108_p2 when (tmp_24_reg_2315(0) = '1') else 
        storemerge1_fu_1114_p3;
    sel_tmp9_i_fu_1731_p3 <= 
        p_Val2_4_fu_1668_p2 when (sel_tmp8_i_fu_1725_p2(0) = '1') else 
        sel_tmp4_i_fu_1711_p3;
    sel_tmp_fu_830_p3 <= 
        p_cast_fu_816_p3 when (tmp_11_fu_824_p2(0) = '1') else 
        ap_const_lv3_4;
    sel_tmp_i_fu_1688_p3 <= 
        tmp_54_fu_1580_p1 when (tmp_43_i_reg_2543(0) = '1') else 
        ap_const_lv8_0;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    storemerge1_fu_1114_p3 <= 
        p_0334_2_be_2_fu_1101_p3 when (icmp_reg_2325(0) = '1') else 
        hist_win_val_0_V_2_fu_1073_p3;
    storemerge_fu_966_p3 <= 
        p_0337_2_be_2_fu_930_p3 when (icmp_fu_960_p2(0) = '1') else 
        addr_win_val_0_V_2_fu_264;
    sum_V_fu_1411_p2 <= std_logic_vector(unsigned(hist_out_V_q1) + unsigned(ap_phi_mux_p_4_phi_fu_582_p4));
    threshold_V_1_fu_1379_p3 <= 
        threshold_V_reg_2433 when (tmp_49_fu_1373_p2(0) = '1') else 
        p_2_reg_497;
    threshold_V_fu_1280_p1 <= j_4_reg_485(8 - 1 downto 0);
    tmp12_fu_1773_p2 <= (rev_fu_1682_p2 and not_sel_tmp28_i_fu_1767_p2);
    tmp13_fu_1845_p2 <= (rev1_fu_1825_p2 and lD_fu_1841_p1);
    tmp14_fu_2037_p2 <= (sel_tmp41_i_fu_2031_p2 and p_Result_10_fu_1803_p3);
    tmp15_fu_2061_p2 <= (sel_tmp41_i_fu_2031_p2 or p_Result_7_reg_2498);
    tmp_11_fu_824_p2 <= (tmp_9_fu_792_p2 or tmp_23_3_fu_810_p2);
    tmp_13_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_reg_474),64));
    tmp_18_fu_1406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i9_reg_590),64));
    tmp_1_fu_751_p1 <= p_src_rows_V;
    tmp_1_fu_751_p2 <= "1" when (signed(i2_cast_fu_747_p1) < signed(tmp_1_fu_751_p1)) else "0";
    tmp_20_fu_876_p2 <= (sel_tmp7_fu_862_p2 or sel_tmp2_fu_844_p2);
    tmp_21_fu_2166_p2 <= "1" when (unsigned(val_V_fu_2158_p3) > unsigned(p_2_reg_497)) else "0";
    tmp_23_1_fu_798_p2 <= "1" when (p_src_data_stream_V_dout = addr_win_val_0_V_2_fu_264) else "0";
    tmp_23_2_fu_804_p2 <= "1" when (p_src_data_stream_V_dout = addr_win_val_0_V_3_fu_272) else "0";
    tmp_23_3_fu_810_p2 <= "1" when (p_src_data_stream_V_dout = addr_last_V_fu_276) else "0";
    tmp_23_fu_896_p2 <= "1" when (ret_V_fu_890_p2 = ap_const_lv3_3) else "0";
    tmp_24_fu_938_p2 <= "1" when (p_3_fu_882_p3 = ap_const_lv3_4) else "0";
    tmp_26_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j7_phi_fu_549_p4),64));
    tmp_26_i_fu_1455_p3 <= (ap_const_lv1_1 & tmp_52_fu_1451_p1);
    tmp_29_fu_944_p2 <= "1" when (p_3_fu_882_p3 = ap_const_lv3_3) else "0";
    tmp_2_fu_766_p1 <= p_src_cols_V;
    tmp_2_fu_766_p2 <= "1" when (signed(j_cast_fu_762_p1) < signed(tmp_2_fu_766_p1)) else "0";
    tmp_30_fu_950_p4 <= p_3_fu_882_p3(2 downto 1);
    tmp_34_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr_win_val_0_V_2_1_reg_2287),64));
        tmp_36_fu_1284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j8_reg_568),64));

    tmp_38_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_2372),32));
    tmp_39_fu_1417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_V_reg_2487),32));
    tmp_40_fu_2121_p2 <= (tmp_demorgan_i_fu_1563_p2 or sel_tmp51_i_fu_2116_p2);
    tmp_40_i_fu_1473_p2 <= "1" when (tmp_44_fu_1425_p1 = ap_const_lv63_0) else "0";
    tmp_41_fu_1299_p4 <= deltaTmp_to_int_fu_1295_p1(30 downto 23);
    tmp_41_i_fu_1485_p2 <= "1" when (signed(F2_fu_1479_p2) > signed(ap_const_lv12_0)) else "0";
    tmp_42_fu_2127_p2 <= (underflow_fu_2053_p3 or tmp_40_fu_2121_p2);
    tmp_42_i_fu_1491_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(F2_fu_1479_p2));
    tmp_43_fu_1317_p4 <= deltaMax_to_int_fu_1313_p1(30 downto 23);
    tmp_43_i_fu_1505_p2 <= "1" when (exp_tmp_V_fu_1437_p4 = ap_const_lv11_433) else "0";
    tmp_44_fu_1425_p1 <= ireg_V_fu_1421_p1(63 - 1 downto 0);
    tmp_45_1_fu_910_p2 <= "1" when (ret_V_fu_890_p2 = ap_const_lv3_2) else "0";
    tmp_45_fu_1343_p2 <= (notrhs_fu_1337_p2 or notlhs_fu_1331_p2);
    tmp_45_i_fu_1511_p2 <= "1" when (unsigned(F2_2_fu_1497_p3) < unsigned(ap_const_lv12_36)) else "0";
    tmp_46_fu_1361_p2 <= (notrhs1_fu_1355_p2 or notlhs1_fu_1349_p2);
    tmp_47_2_fu_924_p2 <= "1" when (p_3_fu_882_p3 = ap_const_lv3_0) else "0";
    tmp_47_fu_1367_p2 <= (tmp_46_fu_1361_p2 and tmp_45_fu_1343_p2);
    tmp_47_not_i_fu_1762_p2 <= (icmp1_reg_2555 xor ap_const_lv1_1);
    tmp_48_i_fu_1584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(F2_2_cast_i_fu_1577_p1),54));
    tmp_49_fu_1373_p2 <= (tmp_48_fu_634_p2 and tmp_47_fu_1367_p2);
    tmp_49_i_fu_1588_p2 <= std_logic_vector(shift_right(signed(p_Val2_s_fu_1569_p3),to_integer(unsigned('0' & tmp_48_i_fu_1584_p1(31-1 downto 0)))));
    tmp_51_i_fu_1606_p3 <= 
        ap_const_lv8_FF when (tmp_57_fu_1598_p3(0) = '1') else 
        ap_const_lv8_0;
    tmp_52_fu_1451_p1 <= ireg_V_fu_1421_p1(52 - 1 downto 0);
    tmp_52_i_fu_1614_p2 <= std_logic_vector(shift_left(unsigned(tmp_54_fu_1580_p1),to_integer(unsigned('0' & tmp_53_fu_1574_p1(8-1 downto 0)))));
    tmp_53_fu_1574_p1 <= F2_2_reg_2537(8 - 1 downto 0);
    tmp_53_i_fu_1627_p2 <= "1" when (signed(F2_reg_2523) > signed(ap_const_lv12_36)) else "0";
    tmp_54_fu_1580_p1 <= p_Val2_s_fu_1569_p3(8 - 1 downto 0);
    tmp_54_i_fu_1632_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(F2_reg_2523));
    tmp_55_fu_1517_p4 <= F2_2_fu_1497_p3(11 downto 3);
    tmp_55_i_fu_1664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_fu_1649_p3),8));
    tmp_56_fu_1594_p1 <= tmp_49_i_fu_1588_p2(8 - 1 downto 0);
    tmp_57_fu_1598_p3 <= p_Val2_1_fu_1533_p1(31 downto 31);
    tmp_57_i_fu_1811_p2 <= "1" when (signed(pos1_fu_1785_p2) < signed(ap_const_lv12_36)) else "0";
    tmp_59_fu_1674_p3 <= p_Val2_4_fu_1668_p2(7 downto 7);
    tmp_59_i_fu_1831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos1_cast_i_fu_1790_p1),54));
    tmp_60_i_fu_1835_p2 <= std_logic_vector(shift_right(signed(p_Val2_s_fu_1569_p3),to_integer(unsigned('0' & tmp_59_i_fu_1831_p1(31-1 downto 0)))));
    tmp_61_fu_1817_p3 <= pos1_fu_1785_p2(11 downto 11);
    tmp_62_i_fu_1871_p2 <= "1" when (signed(pos2_fu_1794_p2) < signed(ap_const_lv12_36)) else "0";
    tmp_62_i_not_fu_1961_p2 <= (tmp_62_i_fu_1871_p2 xor ap_const_lv1_1);
    tmp_63_cast_i_fu_1637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_i_fu_1632_p2),32));
    tmp_63_fu_1857_p3 <= pos2_fu_1794_p2(11 downto 11);
    tmp_63_i_fu_1883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos2_cast_i_fu_1799_p1),54));
    tmp_64_fu_1309_p1 <= deltaTmp_to_int_fu_1295_p1(23 - 1 downto 0);
    tmp_64_i_fu_1925_p2 <= "1" when (Range2_V_1_fu_1887_p2 = ap_const_lv54_0) else "0";
    tmp_65_fu_1327_p1 <= deltaMax_to_int_fu_1313_p1(23 - 1 downto 0);
    tmp_66_i_fu_1943_p2 <= "1" when (pos2_fu_1794_p2 = ap_const_lv12_36) else "0";
    tmp_67_i_fu_2025_p2 <= (ap_const_lv1_1 xor Range1_all_ones_2_i_fu_2019_p2);
    tmp_6_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_src_data_stream_V_dout),64));
    tmp_7_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr_win_val_V_load_s_fu_1182_p3),64));
    tmp_8_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_430),64));
    tmp_9_fu_792_p2 <= "1" when (p_src_data_stream_V_dout = addr_win_val_0_V_1_fu_268) else "0";
    tmp_V_4_fu_1537_p4 <= p_Val2_1_fu_1533_p1(30 downto 23);
    tmp_V_5_fu_1547_p1 <= p_Val2_1_fu_1533_p1(23 - 1 downto 0);
    tmp_demorgan_i_fu_1563_p2 <= (tmp_i_i_i_i_fu_1551_p2 and tmp_i_i_i_i_20_fu_1557_p2);
    tmp_i_fu_1447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_1437_p4),12));
    tmp_i_i_i_i_20_fu_1557_p2 <= "0" when (tmp_V_5_fu_1547_p1 = ap_const_lv23_0) else "1";
    tmp_i_i_i_i_fu_1551_p2 <= "1" when (tmp_V_4_fu_1537_p4 = ap_const_lv8_FF) else "0";
    tmp_s_fu_1204_p0 <= p_src_rows_V;
    tmp_s_fu_1204_p1 <= p_src_cols_V;
    tmp_s_fu_1204_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_s_fu_1204_p0) * signed(tmp_s_fu_1204_p1))), 32));
    underflow_fu_2053_p3 <= 
        tmp_67_i_fu_2025_p2 when (sel_tmp47_i_fu_2048_p2(0) = '1') else 
        sel_tmp46_i_fu_2043_p2;
    underflow_not_i_fu_2072_p2 <= (underflow_fu_2053_p3 xor ap_const_lv1_1);
    val_V_fu_2158_p3 <= 
        p_Val2_11_0_i_i_mux_fu_2096_p3 when (sel_tmp56_i_fu_2152_p2(0) = '1') else 
        sel_tmp52_i_fu_2133_p3;
end behav;
