// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXIvideo2Mat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        AXI_video_strm_V_data_V_dout,
        AXI_video_strm_V_data_V_empty_n,
        AXI_video_strm_V_data_V_read,
        AXI_video_strm_V_keep_V_dout,
        AXI_video_strm_V_keep_V_empty_n,
        AXI_video_strm_V_keep_V_read,
        AXI_video_strm_V_strb_V_dout,
        AXI_video_strm_V_strb_V_empty_n,
        AXI_video_strm_V_strb_V_read,
        AXI_video_strm_V_user_V_dout,
        AXI_video_strm_V_user_V_empty_n,
        AXI_video_strm_V_user_V_read,
        AXI_video_strm_V_last_V_dout,
        AXI_video_strm_V_last_V_empty_n,
        AXI_video_strm_V_last_V_read,
        AXI_video_strm_V_id_V_dout,
        AXI_video_strm_V_id_V_empty_n,
        AXI_video_strm_V_id_V_read,
        AXI_video_strm_V_dest_V_dout,
        AXI_video_strm_V_dest_V_empty_n,
        AXI_video_strm_V_dest_V_read,
        img_rows_V_read,
        img_cols_V_read,
        img_data_stream_V_din,
        img_data_stream_V_full_n,
        img_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_state8 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] AXI_video_strm_V_data_V_dout;
input   AXI_video_strm_V_data_V_empty_n;
output   AXI_video_strm_V_data_V_read;
input  [3:0] AXI_video_strm_V_keep_V_dout;
input   AXI_video_strm_V_keep_V_empty_n;
output   AXI_video_strm_V_keep_V_read;
input  [3:0] AXI_video_strm_V_strb_V_dout;
input   AXI_video_strm_V_strb_V_empty_n;
output   AXI_video_strm_V_strb_V_read;
input  [0:0] AXI_video_strm_V_user_V_dout;
input   AXI_video_strm_V_user_V_empty_n;
output   AXI_video_strm_V_user_V_read;
input  [0:0] AXI_video_strm_V_last_V_dout;
input   AXI_video_strm_V_last_V_empty_n;
output   AXI_video_strm_V_last_V_read;
input  [0:0] AXI_video_strm_V_id_V_dout;
input   AXI_video_strm_V_id_V_empty_n;
output   AXI_video_strm_V_id_V_read;
input  [0:0] AXI_video_strm_V_dest_V_dout;
input   AXI_video_strm_V_dest_V_empty_n;
output   AXI_video_strm_V_dest_V_read;
input  [31:0] img_rows_V_read;
input  [31:0] img_cols_V_read;
output  [7:0] img_data_stream_V_din;
input   img_data_stream_V_full_n;
output   img_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_data_stream_V_write;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    AXI_video_strm_V_data_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_reg_349;
wire   [0:0] brmerge_fu_294_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] ap_phi_mux_eol_2_phi_fu_243_p4;
reg    AXI_video_strm_V_keep_V_blk_n;
reg    AXI_video_strm_V_strb_V_blk_n;
reg    AXI_video_strm_V_user_V_blk_n;
reg    AXI_video_strm_V_last_V_blk_n;
reg    AXI_video_strm_V_id_V_blk_n;
reg    AXI_video_strm_V_dest_V_blk_n;
reg    img_data_stream_V_blk_n;
reg   [31:0] t_V_2_reg_146;
reg   [0:0] eol_1_reg_157;
reg   [31:0] axi_data_V_1_reg_168;
reg   [0:0] eol_reg_179;
reg   [31:0] tmp_data_V_reg_320;
wire    AXI_video_strm_V_id_V0_status;
reg   [0:0] tmp_last_V_reg_328;
wire   [0:0] exitcond2_fu_269_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] i_V_fu_274_p2;
reg   [31:0] i_V_reg_344;
wire   [0:0] exitcond_fu_280_p2;
wire    ap_block_state5_pp1_stage0_iter0;
reg    ap_predicate_op59_read_state6;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [31:0] j_V_fu_285_p2;
reg    ap_enable_reg_pp1_iter0;
reg    ap_block_state8;
reg    ap_block_pp1_stage0_subdone;
reg   [0:0] axi_last_V_3_reg_216;
reg   [0:0] axi_last_V1_reg_115;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state3;
reg   [31:0] axi_data_V_3_reg_228;
reg   [31:0] axi_data_V1_reg_125;
reg   [31:0] t_V_reg_135;
reg   [0:0] ap_phi_mux_axi_last_V_2_phi_fu_196_p4;
reg   [31:0] ap_phi_mux_p_Val2_s_phi_fu_208_p4;
wire   [0:0] ap_phi_reg_pp1_iter1_axi_last_V_2_reg_191;
wire   [31:0] ap_phi_reg_pp1_iter1_p_Val2_s_reg_204;
wire    ap_CS_fsm_state7;
reg   [0:0] eol_2_reg_240;
reg    AXI_video_strm_V_id_V0_update;
reg    ap_block_pp1_stage0_01001;
reg   [0:0] sof_1_fu_74;
wire   [0:0] tmp_user_V_fu_260_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_105;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_fu_280_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((exitcond2_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((exitcond2_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V1_reg_125 <= tmp_data_V_reg_320;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_data_V1_reg_125 <= axi_data_V_3_reg_228;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_349 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        axi_data_V_1_reg_168 <= ap_phi_mux_p_Val2_s_phi_fu_208_p4;
    end else if (((exitcond2_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        axi_data_V_1_reg_168 <= axi_data_V1_reg_125;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_data_V_3_reg_228 <= axi_data_V_1_reg_168;
    end else if ((~((eol_2_reg_240 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_data_V_3_reg_228 <= AXI_video_strm_V_data_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V1_reg_115 <= tmp_last_V_reg_328;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_last_V1_reg_115 <= axi_last_V_3_reg_216;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_last_V_3_reg_216 <= eol_1_reg_157;
    end else if ((~((eol_2_reg_240 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_last_V_3_reg_216 <= AXI_video_strm_V_last_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_349 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        eol_1_reg_157 <= ap_phi_mux_axi_last_V_2_phi_fu_196_p4;
    end else if (((exitcond2_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_1_reg_157 <= axi_last_V1_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        eol_2_reg_240 <= eol_reg_179;
    end else if ((~((eol_2_reg_240 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        eol_2_reg_240 <= AXI_video_strm_V_last_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_349 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        eol_reg_179 <= ap_phi_mux_axi_last_V_2_phi_fu_196_p4;
    end else if (((exitcond2_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_reg_179 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_349 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sof_1_fu_74 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sof_1_fu_74 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_V_2_reg_146 <= j_V_fu_285_p2;
    end else if (((exitcond2_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_2_reg_146 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        t_V_reg_135 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        t_V_reg_135 <= i_V_reg_344;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond_reg_349 <= exitcond_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_V_reg_344 <= i_V_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == AXI_video_strm_V_id_V0_status))) begin
        tmp_data_V_reg_320 <= AXI_video_strm_V_data_V_dout;
        tmp_last_V_reg_328 <= AXI_video_strm_V_last_V_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((brmerge_fu_294_p2 == 1'd0) & (exitcond_reg_349 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        AXI_video_strm_V_data_V_blk_n = AXI_video_strm_V_data_V_empty_n;
    end else begin
        AXI_video_strm_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((brmerge_fu_294_p2 == 1'd0) & (exitcond_reg_349 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        AXI_video_strm_V_dest_V_blk_n = AXI_video_strm_V_dest_V_empty_n;
    end else begin
        AXI_video_strm_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((eol_2_reg_240 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op59_read_state6 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == AXI_video_strm_V_id_V0_status)))) begin
        AXI_video_strm_V_id_V0_update = 1'b1;
    end else begin
        AXI_video_strm_V_id_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((brmerge_fu_294_p2 == 1'd0) & (exitcond_reg_349 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        AXI_video_strm_V_id_V_blk_n = AXI_video_strm_V_id_V_empty_n;
    end else begin
        AXI_video_strm_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((brmerge_fu_294_p2 == 1'd0) & (exitcond_reg_349 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        AXI_video_strm_V_keep_V_blk_n = AXI_video_strm_V_keep_V_empty_n;
    end else begin
        AXI_video_strm_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((brmerge_fu_294_p2 == 1'd0) & (exitcond_reg_349 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        AXI_video_strm_V_last_V_blk_n = AXI_video_strm_V_last_V_empty_n;
    end else begin
        AXI_video_strm_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((brmerge_fu_294_p2 == 1'd0) & (exitcond_reg_349 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        AXI_video_strm_V_strb_V_blk_n = AXI_video_strm_V_strb_V_empty_n;
    end else begin
        AXI_video_strm_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((brmerge_fu_294_p2 == 1'd0) & (exitcond_reg_349 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        AXI_video_strm_V_user_V_blk_n = AXI_video_strm_V_user_V_empty_n;
    end else begin
        AXI_video_strm_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_269_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_105)) begin
        if ((brmerge_fu_294_p2 == 1'd1)) begin
            ap_phi_mux_axi_last_V_2_phi_fu_196_p4 = eol_1_reg_157;
        end else if ((brmerge_fu_294_p2 == 1'd0)) begin
            ap_phi_mux_axi_last_V_2_phi_fu_196_p4 = AXI_video_strm_V_last_V_dout;
        end else begin
            ap_phi_mux_axi_last_V_2_phi_fu_196_p4 = ap_phi_reg_pp1_iter1_axi_last_V_2_reg_191;
        end
    end else begin
        ap_phi_mux_axi_last_V_2_phi_fu_196_p4 = ap_phi_reg_pp1_iter1_axi_last_V_2_reg_191;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_105)) begin
        if ((brmerge_fu_294_p2 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_208_p4 = axi_data_V_1_reg_168;
        end else if ((brmerge_fu_294_p2 == 1'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_208_p4 = AXI_video_strm_V_data_V_dout;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_208_p4 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_204;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_208_p4 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_204;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_269_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_349 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_data_stream_V_blk_n = img_data_stream_V_full_n;
    end else begin
        img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_349 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img_data_stream_V_write = 1'b1;
    end else begin
        img_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_user_V_fu_260_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == AXI_video_strm_V_id_V0_status))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_user_V_fu_260_p1 == 1'd1) & (1'b1 == AXI_video_strm_V_id_V0_status))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_269_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((eol_2_reg_240 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (eol_2_reg_240 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((eol_2_reg_240 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status)) & (ap_phi_mux_eol_2_phi_fu_243_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_dest_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_id_V0_status = (AXI_video_strm_V_user_V_empty_n & AXI_video_strm_V_strb_V_empty_n & AXI_video_strm_V_last_V_empty_n & AXI_video_strm_V_keep_V_empty_n & AXI_video_strm_V_id_V_empty_n & AXI_video_strm_V_dest_V_empty_n & AXI_video_strm_V_data_V_empty_n);

assign AXI_video_strm_V_id_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_keep_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_last_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_strb_V_read = AXI_video_strm_V_id_V0_update;

assign AXI_video_strm_V_user_V_read = AXI_video_strm_V_id_V0_update;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((exitcond_reg_349 == 1'd0) & (img_data_stream_V_full_n == 1'b0)) | ((1'b0 == AXI_video_strm_V_id_V0_status) & (ap_predicate_op59_read_state6 == 1'b1))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((exitcond_reg_349 == 1'd0) & (img_data_stream_V_full_n == 1'b0)) | ((1'b0 == AXI_video_strm_V_id_V0_status) & (ap_predicate_op59_read_state6 == 1'b1))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((exitcond_reg_349 == 1'd0) & (img_data_stream_V_full_n == 1'b0)) | ((1'b0 == AXI_video_strm_V_id_V0_status) & (ap_predicate_op59_read_state6 == 1'b1))));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = (((exitcond_reg_349 == 1'd0) & (img_data_stream_V_full_n == 1'b0)) | ((1'b0 == AXI_video_strm_V_id_V0_status) & (ap_predicate_op59_read_state6 == 1'b1)));
end

always @ (*) begin
    ap_block_state8 = ((eol_2_reg_240 == 1'd0) & (1'b0 == AXI_video_strm_V_id_V0_status));
end

always @ (*) begin
    ap_condition_105 = ((exitcond_reg_349 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_eol_2_phi_fu_243_p4 = eol_2_reg_240;

assign ap_phi_reg_pp1_iter1_axi_last_V_2_reg_191 = 'bx;

assign ap_phi_reg_pp1_iter1_p_Val2_s_reg_204 = 'bx;

always @ (*) begin
    ap_predicate_op59_read_state6 = ((brmerge_fu_294_p2 == 1'd0) & (exitcond_reg_349 == 1'd0));
end

assign brmerge_fu_294_p2 = (sof_1_fu_74 | eol_reg_179);

assign exitcond2_fu_269_p2 = ((t_V_reg_135 == img_rows_V_read) ? 1'b1 : 1'b0);

assign exitcond_fu_280_p2 = ((t_V_2_reg_146 == img_cols_V_read) ? 1'b1 : 1'b0);

assign i_V_fu_274_p2 = (t_V_reg_135 + 32'd1);

assign img_data_stream_V_din = ap_phi_mux_p_Val2_s_phi_fu_208_p4[7:0];

assign j_V_fu_285_p2 = (t_V_2_reg_146 + 32'd1);

assign tmp_user_V_fu_260_p1 = AXI_video_strm_V_user_V_dout;

endmodule //AXIvideo2Mat
