// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "hls_hough.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic hls_hough::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic hls_hough::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> hls_hough::ap_ST_fsm_state1 = "1";
const sc_lv<7> hls_hough::ap_ST_fsm_state2 = "10";
const sc_lv<7> hls_hough::ap_ST_fsm_state3 = "100";
const sc_lv<7> hls_hough::ap_ST_fsm_state4 = "1000";
const sc_lv<7> hls_hough::ap_ST_fsm_state5 = "10000";
const sc_lv<7> hls_hough::ap_ST_fsm_pp0_stage0 = "100000";
const sc_lv<7> hls_hough::ap_ST_fsm_state8 = "1000000";
const sc_lv<32> hls_hough::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool hls_hough::ap_const_boolean_1 = true;
const sc_lv<32> hls_hough::ap_const_lv32_5 = "101";
const bool hls_hough::ap_const_boolean_0 = false;
const sc_lv<1> hls_hough::ap_const_lv1_0 = "0";
const sc_lv<32> hls_hough::ap_const_lv32_3 = "11";
const sc_lv<32> hls_hough::ap_const_lv32_4 = "100";
const sc_lv<1> hls_hough::ap_const_lv1_1 = "1";
const sc_lv<32> hls_hough::ap_const_lv32_6 = "110";
const sc_lv<32> hls_hough::ap_const_lv32_2 = "10";
const sc_lv<32> hls_hough::ap_const_lv32_1 = "1";
const sc_lv<4> hls_hough::ap_const_lv4_F = "1111";
const sc_lv<4> hls_hough::ap_const_lv4_0 = "0000";
const sc_lv<33> hls_hough::ap_const_lv33_1FFFFFFFF = "111111111111111111111111111111111";
const sc_lv<24> hls_hough::ap_const_lv24_FFFFFF = "111111111111111111111111";

hls_hough::hls_hough(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_hls_hough_line_fu_218 = new hls_hough_line("grp_hls_hough_line_fu_218");
    grp_hls_hough_line_fu_218->ap_clk(ap_clk);
    grp_hls_hough_line_fu_218->ap_rst(ap_rst);
    grp_hls_hough_line_fu_218->ap_start(grp_hls_hough_line_fu_218_ap_start);
    grp_hls_hough_line_fu_218->ap_done(grp_hls_hough_line_fu_218_ap_done);
    grp_hls_hough_line_fu_218->ap_idle(grp_hls_hough_line_fu_218_ap_idle);
    grp_hls_hough_line_fu_218->ap_ready(grp_hls_hough_line_fu_218_ap_ready);
    grp_hls_hough_line_fu_218->src_data_stream_V_dout(img_src_data_stream_s_dout);
    grp_hls_hough_line_fu_218->src_data_stream_V_empty_n(img_src_data_stream_s_empty_n);
    grp_hls_hough_line_fu_218->src_data_stream_V_read(grp_hls_hough_line_fu_218_src_data_stream_V_read);
    grp_hls_hough_line_fu_218->dst_data_stream_V_din(grp_hls_hough_line_fu_218_dst_data_stream_V_din);
    grp_hls_hough_line_fu_218->dst_data_stream_V_full_n(img_dst_data_stream_s_full_n);
    grp_hls_hough_line_fu_218->dst_data_stream_V_write(grp_hls_hough_line_fu_218_dst_data_stream_V_write);
    grp_hls_hough_line_fu_218->rows(rows);
    grp_hls_hough_line_fu_218->cols(cols);
    grp_AXIvideo2Mat_fu_250 = new AXIvideo2Mat("grp_AXIvideo2Mat_fu_250");
    grp_AXIvideo2Mat_fu_250->ap_clk(ap_clk);
    grp_AXIvideo2Mat_fu_250->ap_rst(ap_rst);
    grp_AXIvideo2Mat_fu_250->ap_start(grp_AXIvideo2Mat_fu_250_ap_start);
    grp_AXIvideo2Mat_fu_250->ap_done(grp_AXIvideo2Mat_fu_250_ap_done);
    grp_AXIvideo2Mat_fu_250->ap_idle(grp_AXIvideo2Mat_fu_250_ap_idle);
    grp_AXIvideo2Mat_fu_250->ap_ready(grp_AXIvideo2Mat_fu_250_ap_ready);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_data_V_dout(src_axi_V_data_V_dout);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_data_V_empty_n(src_axi_V_data_V_empty_n);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_data_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_keep_V_dout(src_axi_V_keep_V_dout);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_keep_V_empty_n(src_axi_V_keep_V_empty_n);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_keep_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_strb_V_dout(src_axi_V_strb_V_dout);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_strb_V_empty_n(src_axi_V_strb_V_empty_n);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_strb_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_user_V_dout(src_axi_V_user_V_dout);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_user_V_empty_n(src_axi_V_user_V_empty_n);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_user_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_last_V_dout(src_axi_V_last_V_dout);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_last_V_empty_n(src_axi_V_last_V_empty_n);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_last_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_id_V_dout(src_axi_V_id_V_dout);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_id_V_empty_n(src_axi_V_id_V_empty_n);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_id_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_dest_V_dout(src_axi_V_dest_V_dout);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_dest_V_empty_n(src_axi_V_dest_V_empty_n);
    grp_AXIvideo2Mat_fu_250->AXI_video_strm_V_dest_V_read(grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read);
    grp_AXIvideo2Mat_fu_250->img_rows_V_read(rows);
    grp_AXIvideo2Mat_fu_250->img_cols_V_read(cols);
    grp_AXIvideo2Mat_fu_250->img_data_stream_V_din(grp_AXIvideo2Mat_fu_250_img_data_stream_V_din);
    grp_AXIvideo2Mat_fu_250->img_data_stream_V_full_n(img_src_data_stream_s_full_n);
    grp_AXIvideo2Mat_fu_250->img_data_stream_V_write(grp_AXIvideo2Mat_fu_250_img_data_stream_V_write);
    img_src_data_stream_s_fifo_U = new fifo_w8_d64_A("img_src_data_stream_s_fifo_U");
    img_src_data_stream_s_fifo_U->clk(ap_clk);
    img_src_data_stream_s_fifo_U->reset(ap_rst);
    img_src_data_stream_s_fifo_U->if_read_ce(ap_var_for_const0);
    img_src_data_stream_s_fifo_U->if_write_ce(ap_var_for_const0);
    img_src_data_stream_s_fifo_U->if_din(grp_AXIvideo2Mat_fu_250_img_data_stream_V_din);
    img_src_data_stream_s_fifo_U->if_full_n(img_src_data_stream_s_full_n);
    img_src_data_stream_s_fifo_U->if_write(img_src_data_stream_s_write);
    img_src_data_stream_s_fifo_U->if_dout(img_src_data_stream_s_dout);
    img_src_data_stream_s_fifo_U->if_empty_n(img_src_data_stream_s_empty_n);
    img_src_data_stream_s_fifo_U->if_read(img_src_data_stream_s_read);
    img_dst_data_stream_s_fifo_U = new fifo_w8_d64_A("img_dst_data_stream_s_fifo_U");
    img_dst_data_stream_s_fifo_U->clk(ap_clk);
    img_dst_data_stream_s_fifo_U->reset(ap_rst);
    img_dst_data_stream_s_fifo_U->if_read_ce(ap_var_for_const0);
    img_dst_data_stream_s_fifo_U->if_write_ce(ap_var_for_const0);
    img_dst_data_stream_s_fifo_U->if_din(grp_hls_hough_line_fu_218_dst_data_stream_V_din);
    img_dst_data_stream_s_fifo_U->if_full_n(img_dst_data_stream_s_full_n);
    img_dst_data_stream_s_fifo_U->if_write(img_dst_data_stream_s_write);
    img_dst_data_stream_s_fifo_U->if_dout(img_dst_data_stream_s_dout);
    img_dst_data_stream_s_fifo_U->if_empty_n(img_dst_data_stream_s_empty_n);
    img_dst_data_stream_s_fifo_U->if_read(img_dst_data_stream_s_read);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( img_dst_data_stream_s_empty_n );
    sensitive << ( dst_axi_V_id_V1_status );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( img_dst_data_stream_s_empty_n );
    sensitive << ( dst_axi_V_id_V1_status );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( img_dst_data_stream_s_empty_n );
    sensitive << ( dst_axi_V_id_V1_status );

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter1);
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( img_dst_data_stream_s_empty_n );
    sensitive << ( dst_axi_V_id_V1_status );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state6);
    sensitive << ( exitcond_i_fu_298_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( exitcond1_i_fu_287_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( exitcond1_i_fu_287_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_axi_last_V_fu_313_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ret_V_reg_370 );
    sensitive << ( exitcond_i_fu_298_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_i_cast_fu_309_p1 );

    SC_METHOD(thread_dst_axi_V_data_V_blk_n);
    sensitive << ( dst_axi_V_data_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_reg_384 );

    SC_METHOD(thread_dst_axi_V_data_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( img_dst_data_stream_s_dout );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_dst_axi_V_data_V_write);
    sensitive << ( dst_axi_V_id_V1_update );

    SC_METHOD(thread_dst_axi_V_dest_V_blk_n);
    sensitive << ( dst_axi_V_dest_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_reg_384 );

    SC_METHOD(thread_dst_axi_V_dest_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_dst_axi_V_dest_V_write);
    sensitive << ( dst_axi_V_id_V1_update );

    SC_METHOD(thread_dst_axi_V_id_V1_status);
    sensitive << ( dst_axi_V_data_V_full_n );
    sensitive << ( dst_axi_V_keep_V_full_n );
    sensitive << ( dst_axi_V_strb_V_full_n );
    sensitive << ( dst_axi_V_user_V_full_n );
    sensitive << ( dst_axi_V_last_V_full_n );
    sensitive << ( dst_axi_V_id_V_full_n );
    sensitive << ( dst_axi_V_dest_V_full_n );

    SC_METHOD(thread_dst_axi_V_id_V1_update);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_axi_V_id_V_blk_n);
    sensitive << ( dst_axi_V_id_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_reg_384 );

    SC_METHOD(thread_dst_axi_V_id_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_dst_axi_V_id_V_write);
    sensitive << ( dst_axi_V_id_V1_update );

    SC_METHOD(thread_dst_axi_V_keep_V_blk_n);
    sensitive << ( dst_axi_V_keep_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_reg_384 );

    SC_METHOD(thread_dst_axi_V_keep_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_dst_axi_V_keep_V_write);
    sensitive << ( dst_axi_V_id_V1_update );

    SC_METHOD(thread_dst_axi_V_last_V_blk_n);
    sensitive << ( dst_axi_V_last_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_reg_384 );

    SC_METHOD(thread_dst_axi_V_last_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( axi_last_V_reg_393 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_dst_axi_V_last_V_write);
    sensitive << ( dst_axi_V_id_V1_update );

    SC_METHOD(thread_dst_axi_V_strb_V_blk_n);
    sensitive << ( dst_axi_V_strb_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_reg_384 );

    SC_METHOD(thread_dst_axi_V_strb_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_dst_axi_V_strb_V_write);
    sensitive << ( dst_axi_V_id_V1_update );

    SC_METHOD(thread_dst_axi_V_user_V_blk_n);
    sensitive << ( dst_axi_V_user_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_reg_384 );

    SC_METHOD(thread_dst_axi_V_user_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_user_V_fu_138 );

    SC_METHOD(thread_dst_axi_V_user_V_write);
    sensitive << ( dst_axi_V_id_V1_update );

    SC_METHOD(thread_exitcond1_i_fu_287_p2);
    sensitive << ( rows );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( t_V_reg_196 );

    SC_METHOD(thread_exitcond_i_fu_298_p2);
    sensitive << ( cols );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( t_V_2_reg_207 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_grp_AXIvideo2Mat_fu_250_ap_start);
    sensitive << ( grp_AXIvideo2Mat_fu_250_ap_start_reg );

    SC_METHOD(thread_grp_hls_hough_line_fu_218_ap_start);
    sensitive << ( grp_hls_hough_line_fu_218_ap_start_reg );

    SC_METHOD(thread_i_V_fu_292_p2);
    sensitive << ( t_V_reg_196 );

    SC_METHOD(thread_img_dst_data_stream_s_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_384 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_img_dst_data_stream_s_write);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_hls_hough_line_fu_218_dst_data_stream_V_write );

    SC_METHOD(thread_img_src_data_stream_s_read);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_hls_hough_line_fu_218_src_data_stream_V_read );

    SC_METHOD(thread_img_src_data_stream_s_write);
    sensitive << ( grp_AXIvideo2Mat_fu_250_img_data_stream_V_write );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_j_V_fu_303_p2);
    sensitive << ( t_V_2_reg_207 );

    SC_METHOD(thread_lhs_V_cast_fu_278_p1);
    sensitive << ( cols );

    SC_METHOD(thread_ret_V_fu_281_p2);
    sensitive << ( lhs_V_cast_fu_278_p1 );

    SC_METHOD(thread_src_axi_V_data_V_read);
    sensitive << ( grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_src_axi_V_dest_V_read);
    sensitive << ( grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_src_axi_V_id_V_read);
    sensitive << ( grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_src_axi_V_keep_V_read);
    sensitive << ( grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_src_axi_V_last_V_read);
    sensitive << ( grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_src_axi_V_strb_V_read);
    sensitive << ( grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_src_axi_V_user_V_read);
    sensitive << ( grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_i_cast_fu_309_p1);
    sensitive << ( t_V_2_reg_207 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_hls_hough_line_fu_218_ap_done );
    sensitive << ( exitcond1_i_fu_287_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_i_fu_298_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( grp_AXIvideo2Mat_fu_250_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    grp_hls_hough_line_fu_218_ap_start_reg = SC_LOGIC_0;
    grp_AXIvideo2Mat_fu_250_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hls_hough_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, src_axi_V_data_V_dout, "(port)src_axi_V_data_V_dout");
    sc_trace(mVcdFile, src_axi_V_data_V_empty_n, "(port)src_axi_V_data_V_empty_n");
    sc_trace(mVcdFile, src_axi_V_data_V_read, "(port)src_axi_V_data_V_read");
    sc_trace(mVcdFile, src_axi_V_keep_V_dout, "(port)src_axi_V_keep_V_dout");
    sc_trace(mVcdFile, src_axi_V_keep_V_empty_n, "(port)src_axi_V_keep_V_empty_n");
    sc_trace(mVcdFile, src_axi_V_keep_V_read, "(port)src_axi_V_keep_V_read");
    sc_trace(mVcdFile, src_axi_V_strb_V_dout, "(port)src_axi_V_strb_V_dout");
    sc_trace(mVcdFile, src_axi_V_strb_V_empty_n, "(port)src_axi_V_strb_V_empty_n");
    sc_trace(mVcdFile, src_axi_V_strb_V_read, "(port)src_axi_V_strb_V_read");
    sc_trace(mVcdFile, src_axi_V_user_V_dout, "(port)src_axi_V_user_V_dout");
    sc_trace(mVcdFile, src_axi_V_user_V_empty_n, "(port)src_axi_V_user_V_empty_n");
    sc_trace(mVcdFile, src_axi_V_user_V_read, "(port)src_axi_V_user_V_read");
    sc_trace(mVcdFile, src_axi_V_last_V_dout, "(port)src_axi_V_last_V_dout");
    sc_trace(mVcdFile, src_axi_V_last_V_empty_n, "(port)src_axi_V_last_V_empty_n");
    sc_trace(mVcdFile, src_axi_V_last_V_read, "(port)src_axi_V_last_V_read");
    sc_trace(mVcdFile, src_axi_V_id_V_dout, "(port)src_axi_V_id_V_dout");
    sc_trace(mVcdFile, src_axi_V_id_V_empty_n, "(port)src_axi_V_id_V_empty_n");
    sc_trace(mVcdFile, src_axi_V_id_V_read, "(port)src_axi_V_id_V_read");
    sc_trace(mVcdFile, src_axi_V_dest_V_dout, "(port)src_axi_V_dest_V_dout");
    sc_trace(mVcdFile, src_axi_V_dest_V_empty_n, "(port)src_axi_V_dest_V_empty_n");
    sc_trace(mVcdFile, src_axi_V_dest_V_read, "(port)src_axi_V_dest_V_read");
    sc_trace(mVcdFile, dst_axi_V_data_V_din, "(port)dst_axi_V_data_V_din");
    sc_trace(mVcdFile, dst_axi_V_data_V_full_n, "(port)dst_axi_V_data_V_full_n");
    sc_trace(mVcdFile, dst_axi_V_data_V_write, "(port)dst_axi_V_data_V_write");
    sc_trace(mVcdFile, dst_axi_V_keep_V_din, "(port)dst_axi_V_keep_V_din");
    sc_trace(mVcdFile, dst_axi_V_keep_V_full_n, "(port)dst_axi_V_keep_V_full_n");
    sc_trace(mVcdFile, dst_axi_V_keep_V_write, "(port)dst_axi_V_keep_V_write");
    sc_trace(mVcdFile, dst_axi_V_strb_V_din, "(port)dst_axi_V_strb_V_din");
    sc_trace(mVcdFile, dst_axi_V_strb_V_full_n, "(port)dst_axi_V_strb_V_full_n");
    sc_trace(mVcdFile, dst_axi_V_strb_V_write, "(port)dst_axi_V_strb_V_write");
    sc_trace(mVcdFile, dst_axi_V_user_V_din, "(port)dst_axi_V_user_V_din");
    sc_trace(mVcdFile, dst_axi_V_user_V_full_n, "(port)dst_axi_V_user_V_full_n");
    sc_trace(mVcdFile, dst_axi_V_user_V_write, "(port)dst_axi_V_user_V_write");
    sc_trace(mVcdFile, dst_axi_V_last_V_din, "(port)dst_axi_V_last_V_din");
    sc_trace(mVcdFile, dst_axi_V_last_V_full_n, "(port)dst_axi_V_last_V_full_n");
    sc_trace(mVcdFile, dst_axi_V_last_V_write, "(port)dst_axi_V_last_V_write");
    sc_trace(mVcdFile, dst_axi_V_id_V_din, "(port)dst_axi_V_id_V_din");
    sc_trace(mVcdFile, dst_axi_V_id_V_full_n, "(port)dst_axi_V_id_V_full_n");
    sc_trace(mVcdFile, dst_axi_V_id_V_write, "(port)dst_axi_V_id_V_write");
    sc_trace(mVcdFile, dst_axi_V_dest_V_din, "(port)dst_axi_V_dest_V_din");
    sc_trace(mVcdFile, dst_axi_V_dest_V_full_n, "(port)dst_axi_V_dest_V_full_n");
    sc_trace(mVcdFile, dst_axi_V_dest_V_write, "(port)dst_axi_V_dest_V_write");
    sc_trace(mVcdFile, rows, "(port)rows");
    sc_trace(mVcdFile, cols, "(port)cols");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, dst_axi_V_data_V_blk_n, "dst_axi_V_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_i_reg_384, "exitcond_i_reg_384");
    sc_trace(mVcdFile, dst_axi_V_keep_V_blk_n, "dst_axi_V_keep_V_blk_n");
    sc_trace(mVcdFile, dst_axi_V_strb_V_blk_n, "dst_axi_V_strb_V_blk_n");
    sc_trace(mVcdFile, dst_axi_V_user_V_blk_n, "dst_axi_V_user_V_blk_n");
    sc_trace(mVcdFile, dst_axi_V_last_V_blk_n, "dst_axi_V_last_V_blk_n");
    sc_trace(mVcdFile, dst_axi_V_id_V_blk_n, "dst_axi_V_id_V_blk_n");
    sc_trace(mVcdFile, dst_axi_V_dest_V_blk_n, "dst_axi_V_dest_V_blk_n");
    sc_trace(mVcdFile, t_V_2_reg_207, "t_V_2_reg_207");
    sc_trace(mVcdFile, ret_V_fu_281_p2, "ret_V_fu_281_p2");
    sc_trace(mVcdFile, ret_V_reg_370, "ret_V_reg_370");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_hls_hough_line_fu_218_ap_ready, "grp_hls_hough_line_fu_218_ap_ready");
    sc_trace(mVcdFile, grp_hls_hough_line_fu_218_ap_done, "grp_hls_hough_line_fu_218_ap_done");
    sc_trace(mVcdFile, exitcond1_i_fu_287_p2, "exitcond1_i_fu_287_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_V_fu_292_p2, "i_V_fu_292_p2");
    sc_trace(mVcdFile, i_V_reg_379, "i_V_reg_379");
    sc_trace(mVcdFile, exitcond_i_fu_298_p2, "exitcond_i_fu_298_p2");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter0, "ap_block_state6_pp0_stage0_iter0");
    sc_trace(mVcdFile, img_dst_data_stream_s_dout, "img_dst_data_stream_s_dout");
    sc_trace(mVcdFile, img_dst_data_stream_s_empty_n, "img_dst_data_stream_s_empty_n");
    sc_trace(mVcdFile, img_dst_data_stream_s_read, "img_dst_data_stream_s_read");
    sc_trace(mVcdFile, dst_axi_V_id_V1_status, "dst_axi_V_id_V1_status");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter1, "ap_block_state7_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, j_V_fu_303_p2, "j_V_fu_303_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, axi_last_V_fu_313_p2, "axi_last_V_fu_313_p2");
    sc_trace(mVcdFile, axi_last_V_reg_393, "axi_last_V_reg_393");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state6, "ap_condition_pp0_exit_iter0_state6");
    sc_trace(mVcdFile, grp_hls_hough_line_fu_218_ap_start, "grp_hls_hough_line_fu_218_ap_start");
    sc_trace(mVcdFile, grp_hls_hough_line_fu_218_ap_idle, "grp_hls_hough_line_fu_218_ap_idle");
    sc_trace(mVcdFile, grp_hls_hough_line_fu_218_src_data_stream_V_read, "grp_hls_hough_line_fu_218_src_data_stream_V_read");
    sc_trace(mVcdFile, grp_hls_hough_line_fu_218_dst_data_stream_V_din, "grp_hls_hough_line_fu_218_dst_data_stream_V_din");
    sc_trace(mVcdFile, grp_hls_hough_line_fu_218_dst_data_stream_V_write, "grp_hls_hough_line_fu_218_dst_data_stream_V_write");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_ap_start, "grp_AXIvideo2Mat_fu_250_ap_start");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_ap_done, "grp_AXIvideo2Mat_fu_250_ap_done");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_ap_idle, "grp_AXIvideo2Mat_fu_250_ap_idle");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_ap_ready, "grp_AXIvideo2Mat_fu_250_ap_ready");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read, "grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read, "grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read, "grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read, "grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read, "grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read, "grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read, "grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_img_data_stream_V_din, "grp_AXIvideo2Mat_fu_250_img_data_stream_V_din");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_img_data_stream_V_write, "grp_AXIvideo2Mat_fu_250_img_data_stream_V_write");
    sc_trace(mVcdFile, t_V_reg_196, "t_V_reg_196");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_hls_hough_line_fu_218_ap_start_reg, "grp_hls_hough_line_fu_218_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, img_src_data_stream_s_dout, "img_src_data_stream_s_dout");
    sc_trace(mVcdFile, img_src_data_stream_s_empty_n, "img_src_data_stream_s_empty_n");
    sc_trace(mVcdFile, img_src_data_stream_s_read, "img_src_data_stream_s_read");
    sc_trace(mVcdFile, img_dst_data_stream_s_full_n, "img_dst_data_stream_s_full_n");
    sc_trace(mVcdFile, img_dst_data_stream_s_write, "img_dst_data_stream_s_write");
    sc_trace(mVcdFile, grp_AXIvideo2Mat_fu_250_ap_start_reg, "grp_AXIvideo2Mat_fu_250_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, img_src_data_stream_s_full_n, "img_src_data_stream_s_full_n");
    sc_trace(mVcdFile, img_src_data_stream_s_write, "img_src_data_stream_s_write");
    sc_trace(mVcdFile, dst_axi_V_id_V1_update, "dst_axi_V_id_V1_update");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_user_V_fu_138, "tmp_user_V_fu_138");
    sc_trace(mVcdFile, lhs_V_cast_fu_278_p1, "lhs_V_cast_fu_278_p1");
    sc_trace(mVcdFile, tmp_i_cast_fu_309_p1, "tmp_i_cast_fu_309_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("hls_hough.hdltvin.dat");
    mHdltvoutHandle.open("hls_hough.hdltvout.dat");
}

hls_hough::~hls_hough() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_hls_hough_line_fu_218;
    delete grp_AXIvideo2Mat_fu_250;
    delete img_src_data_stream_s_fifo_U;
    delete img_dst_data_stream_s_fifo_U;
}

void hls_hough::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void hls_hough::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state6.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_287_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state6.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state6.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_287_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AXIvideo2Mat_fu_250_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_AXIvideo2Mat_fu_250_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AXIvideo2Mat_fu_250_ap_ready.read())) {
            grp_AXIvideo2Mat_fu_250_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_hls_hough_line_fu_218_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_hls_hough_line_fu_218_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_hls_hough_line_fu_218_ap_ready.read())) {
            grp_hls_hough_line_fu_218_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_298_p2.read()))) {
        t_V_2_reg_207 = j_V_fu_303_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_287_p2.read()))) {
        t_V_2_reg_207 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        t_V_reg_196 = i_V_reg_379.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(grp_hls_hough_line_fu_218_ap_done.read(), ap_const_logic_1))) {
        t_V_reg_196 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_user_V_fu_138 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_user_V_fu_138 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_298_p2.read()))) {
        axi_last_V_reg_393 = axi_last_V_fu_313_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_i_reg_384 = exitcond_i_fu_298_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_V_reg_379 = i_V_fu_292_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_hls_hough_line_fu_218_ap_done.read(), ap_const_logic_1))) {
        ret_V_reg_370 = ret_V_fu_281_p2.read();
    }
}

void hls_hough::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[5];
}

void hls_hough::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void hls_hough::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void hls_hough::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void hls_hough::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void hls_hough::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void hls_hough::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[6];
}

void hls_hough::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hls_hough::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, img_dst_data_stream_s_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_axi_V_id_V1_status.read()))));
}

void hls_hough::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, img_dst_data_stream_s_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_axi_V_id_V1_status.read()))));
}

void hls_hough::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, img_dst_data_stream_s_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_axi_V_id_V1_status.read()))));
}

void hls_hough::thread_ap_block_state6_pp0_stage0_iter0() {
    ap_block_state6_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hls_hough::thread_ap_block_state7_pp0_stage0_iter1() {
    ap_block_state7_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, img_dst_data_stream_s_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dst_axi_V_id_V1_status.read())));
}

void hls_hough::thread_ap_condition_pp0_exit_iter0_state6() {
    if (esl_seteq<1,1,1>(exitcond_i_fu_298_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state6 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state6 = ap_const_logic_0;
    }
}

void hls_hough::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(exitcond1_i_fu_287_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void hls_hough::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void hls_hough::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void hls_hough::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void hls_hough::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(exitcond1_i_fu_287_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void hls_hough::thread_axi_last_V_fu_313_p2() {
    axi_last_V_fu_313_p2 = (!tmp_i_cast_fu_309_p1.read().is_01() || !ret_V_reg_370.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_i_cast_fu_309_p1.read() == ret_V_reg_370.read());
}

void hls_hough::thread_dst_axi_V_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0))) {
        dst_axi_V_data_V_blk_n = dst_axi_V_data_V_full_n.read();
    } else {
        dst_axi_V_data_V_blk_n = ap_const_logic_1;
    }
}

void hls_hough::thread_dst_axi_V_data_V_din() {
    dst_axi_V_data_V_din = esl_concat<24,8>(ap_const_lv24_FFFFFF, img_dst_data_stream_s_dout.read());
}

void hls_hough::thread_dst_axi_V_data_V_write() {
    dst_axi_V_data_V_write = dst_axi_V_id_V1_update.read();
}

void hls_hough::thread_dst_axi_V_dest_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0))) {
        dst_axi_V_dest_V_blk_n = dst_axi_V_dest_V_full_n.read();
    } else {
        dst_axi_V_dest_V_blk_n = ap_const_logic_1;
    }
}

void hls_hough::thread_dst_axi_V_dest_V_din() {
    dst_axi_V_dest_V_din = ap_const_lv1_0;
}

void hls_hough::thread_dst_axi_V_dest_V_write() {
    dst_axi_V_dest_V_write = dst_axi_V_id_V1_update.read();
}

void hls_hough::thread_dst_axi_V_id_V1_status() {
    dst_axi_V_id_V1_status = (dst_axi_V_data_V_full_n.read() & dst_axi_V_keep_V_full_n.read() & dst_axi_V_strb_V_full_n.read() & dst_axi_V_user_V_full_n.read() & dst_axi_V_last_V_full_n.read() & dst_axi_V_id_V_full_n.read() & dst_axi_V_dest_V_full_n.read());
}

void hls_hough::thread_dst_axi_V_id_V1_update() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_axi_V_id_V1_update = ap_const_logic_1;
    } else {
        dst_axi_V_id_V1_update = ap_const_logic_0;
    }
}

void hls_hough::thread_dst_axi_V_id_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0))) {
        dst_axi_V_id_V_blk_n = dst_axi_V_id_V_full_n.read();
    } else {
        dst_axi_V_id_V_blk_n = ap_const_logic_1;
    }
}

void hls_hough::thread_dst_axi_V_id_V_din() {
    dst_axi_V_id_V_din = ap_const_lv1_0;
}

void hls_hough::thread_dst_axi_V_id_V_write() {
    dst_axi_V_id_V_write = dst_axi_V_id_V1_update.read();
}

void hls_hough::thread_dst_axi_V_keep_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0))) {
        dst_axi_V_keep_V_blk_n = dst_axi_V_keep_V_full_n.read();
    } else {
        dst_axi_V_keep_V_blk_n = ap_const_logic_1;
    }
}

void hls_hough::thread_dst_axi_V_keep_V_din() {
    dst_axi_V_keep_V_din = ap_const_lv4_F;
}

void hls_hough::thread_dst_axi_V_keep_V_write() {
    dst_axi_V_keep_V_write = dst_axi_V_id_V1_update.read();
}

void hls_hough::thread_dst_axi_V_last_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0))) {
        dst_axi_V_last_V_blk_n = dst_axi_V_last_V_full_n.read();
    } else {
        dst_axi_V_last_V_blk_n = ap_const_logic_1;
    }
}

void hls_hough::thread_dst_axi_V_last_V_din() {
    dst_axi_V_last_V_din = axi_last_V_reg_393.read();
}

void hls_hough::thread_dst_axi_V_last_V_write() {
    dst_axi_V_last_V_write = dst_axi_V_id_V1_update.read();
}

void hls_hough::thread_dst_axi_V_strb_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0))) {
        dst_axi_V_strb_V_blk_n = dst_axi_V_strb_V_full_n.read();
    } else {
        dst_axi_V_strb_V_blk_n = ap_const_logic_1;
    }
}

void hls_hough::thread_dst_axi_V_strb_V_din() {
    dst_axi_V_strb_V_din = ap_const_lv4_0;
}

void hls_hough::thread_dst_axi_V_strb_V_write() {
    dst_axi_V_strb_V_write = dst_axi_V_id_V1_update.read();
}

void hls_hough::thread_dst_axi_V_user_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0))) {
        dst_axi_V_user_V_blk_n = dst_axi_V_user_V_full_n.read();
    } else {
        dst_axi_V_user_V_blk_n = ap_const_logic_1;
    }
}

void hls_hough::thread_dst_axi_V_user_V_din() {
    dst_axi_V_user_V_din = tmp_user_V_fu_138.read();
}

void hls_hough::thread_dst_axi_V_user_V_write() {
    dst_axi_V_user_V_write = dst_axi_V_id_V1_update.read();
}

void hls_hough::thread_exitcond1_i_fu_287_p2() {
    exitcond1_i_fu_287_p2 = (!t_V_reg_196.read().is_01() || !rows.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_196.read() == rows.read());
}

void hls_hough::thread_exitcond_i_fu_298_p2() {
    exitcond_i_fu_298_p2 = (!t_V_2_reg_207.read().is_01() || !cols.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_2_reg_207.read() == cols.read());
}

void hls_hough::thread_grp_AXIvideo2Mat_fu_250_ap_start() {
    grp_AXIvideo2Mat_fu_250_ap_start = grp_AXIvideo2Mat_fu_250_ap_start_reg.read();
}

void hls_hough::thread_grp_hls_hough_line_fu_218_ap_start() {
    grp_hls_hough_line_fu_218_ap_start = grp_hls_hough_line_fu_218_ap_start_reg.read();
}

void hls_hough::thread_i_V_fu_292_p2() {
    i_V_fu_292_p2 = (!t_V_reg_196.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_reg_196.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void hls_hough::thread_img_dst_data_stream_s_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_i_reg_384.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_dst_data_stream_s_read = ap_const_logic_1;
    } else {
        img_dst_data_stream_s_read = ap_const_logic_0;
    }
}

void hls_hough::thread_img_dst_data_stream_s_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        img_dst_data_stream_s_write = grp_hls_hough_line_fu_218_dst_data_stream_V_write.read();
    } else {
        img_dst_data_stream_s_write = ap_const_logic_0;
    }
}

void hls_hough::thread_img_src_data_stream_s_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        img_src_data_stream_s_read = grp_hls_hough_line_fu_218_src_data_stream_V_read.read();
    } else {
        img_src_data_stream_s_read = ap_const_logic_0;
    }
}

void hls_hough::thread_img_src_data_stream_s_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        img_src_data_stream_s_write = grp_AXIvideo2Mat_fu_250_img_data_stream_V_write.read();
    } else {
        img_src_data_stream_s_write = ap_const_logic_0;
    }
}

void hls_hough::thread_j_V_fu_303_p2() {
    j_V_fu_303_p2 = (!t_V_2_reg_207.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_2_reg_207.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void hls_hough::thread_lhs_V_cast_fu_278_p1() {
    lhs_V_cast_fu_278_p1 = esl_zext<33,32>(cols.read());
}

void hls_hough::thread_ret_V_fu_281_p2() {
    ret_V_fu_281_p2 = (!lhs_V_cast_fu_278_p1.read().is_01() || !ap_const_lv33_1FFFFFFFF.is_01())? sc_lv<33>(): (sc_biguint<33>(lhs_V_cast_fu_278_p1.read()) + sc_bigint<33>(ap_const_lv33_1FFFFFFFF));
}

void hls_hough::thread_src_axi_V_data_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        src_axi_V_data_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_data_V_read.read();
    } else {
        src_axi_V_data_V_read = ap_const_logic_0;
    }
}

void hls_hough::thread_src_axi_V_dest_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        src_axi_V_dest_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_dest_V_read.read();
    } else {
        src_axi_V_dest_V_read = ap_const_logic_0;
    }
}

void hls_hough::thread_src_axi_V_id_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        src_axi_V_id_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_id_V_read.read();
    } else {
        src_axi_V_id_V_read = ap_const_logic_0;
    }
}

void hls_hough::thread_src_axi_V_keep_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        src_axi_V_keep_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_keep_V_read.read();
    } else {
        src_axi_V_keep_V_read = ap_const_logic_0;
    }
}

void hls_hough::thread_src_axi_V_last_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        src_axi_V_last_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_last_V_read.read();
    } else {
        src_axi_V_last_V_read = ap_const_logic_0;
    }
}

void hls_hough::thread_src_axi_V_strb_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        src_axi_V_strb_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_strb_V_read.read();
    } else {
        src_axi_V_strb_V_read = ap_const_logic_0;
    }
}

void hls_hough::thread_src_axi_V_user_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        src_axi_V_user_V_read = grp_AXIvideo2Mat_fu_250_AXI_video_strm_V_user_V_read.read();
    } else {
        src_axi_V_user_V_read = ap_const_logic_0;
    }
}

void hls_hough::thread_tmp_i_cast_fu_309_p1() {
    tmp_i_cast_fu_309_p1 = esl_zext<33,32>(t_V_2_reg_207.read());
}

void hls_hough::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_AXIvideo2Mat_fu_250_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_hls_hough_line_fu_218_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond1_i_fu_287_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 32 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_i_fu_298_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_i_fu_298_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void hls_hough::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_data_V_dout\" :  \"" << src_axi_V_data_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_data_V_empty_n\" :  \"" << src_axi_V_data_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_axi_V_data_V_read\" :  \"" << src_axi_V_data_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_keep_V_dout\" :  \"" << src_axi_V_keep_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_keep_V_empty_n\" :  \"" << src_axi_V_keep_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_axi_V_keep_V_read\" :  \"" << src_axi_V_keep_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_strb_V_dout\" :  \"" << src_axi_V_strb_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_strb_V_empty_n\" :  \"" << src_axi_V_strb_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_axi_V_strb_V_read\" :  \"" << src_axi_V_strb_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_user_V_dout\" :  \"" << src_axi_V_user_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_user_V_empty_n\" :  \"" << src_axi_V_user_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_axi_V_user_V_read\" :  \"" << src_axi_V_user_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_last_V_dout\" :  \"" << src_axi_V_last_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_last_V_empty_n\" :  \"" << src_axi_V_last_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_axi_V_last_V_read\" :  \"" << src_axi_V_last_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_id_V_dout\" :  \"" << src_axi_V_id_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_id_V_empty_n\" :  \"" << src_axi_V_id_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_axi_V_id_V_read\" :  \"" << src_axi_V_id_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_dest_V_dout\" :  \"" << src_axi_V_dest_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_axi_V_dest_V_empty_n\" :  \"" << src_axi_V_dest_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_axi_V_dest_V_read\" :  \"" << src_axi_V_dest_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_data_V_din\" :  \"" << dst_axi_V_data_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dst_axi_V_data_V_full_n\" :  \"" << dst_axi_V_data_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_data_V_write\" :  \"" << dst_axi_V_data_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_keep_V_din\" :  \"" << dst_axi_V_keep_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dst_axi_V_keep_V_full_n\" :  \"" << dst_axi_V_keep_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_keep_V_write\" :  \"" << dst_axi_V_keep_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_strb_V_din\" :  \"" << dst_axi_V_strb_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dst_axi_V_strb_V_full_n\" :  \"" << dst_axi_V_strb_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_strb_V_write\" :  \"" << dst_axi_V_strb_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_user_V_din\" :  \"" << dst_axi_V_user_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dst_axi_V_user_V_full_n\" :  \"" << dst_axi_V_user_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_user_V_write\" :  \"" << dst_axi_V_user_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_last_V_din\" :  \"" << dst_axi_V_last_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dst_axi_V_last_V_full_n\" :  \"" << dst_axi_V_last_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_last_V_write\" :  \"" << dst_axi_V_last_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_id_V_din\" :  \"" << dst_axi_V_id_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dst_axi_V_id_V_full_n\" :  \"" << dst_axi_V_id_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_id_V_write\" :  \"" << dst_axi_V_id_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_dest_V_din\" :  \"" << dst_axi_V_dest_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dst_axi_V_dest_V_full_n\" :  \"" << dst_axi_V_dest_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_axi_V_dest_V_write\" :  \"" << dst_axi_V_dest_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rows\" :  \"" << rows.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cols\" :  \"" << cols.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

